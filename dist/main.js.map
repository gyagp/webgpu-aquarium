{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./types.ts","webpack:///./behavior.ts","webpack:///./buffer.ts","webpack:///./bufferManager.ts","webpack:///./glslang.ts","webpack:///./uniforms.ts","webpack:///./utils.ts","webpack:///./model.ts","webpack:///./io.ts","webpack:///./program.ts","webpack:///./resourceHelper.ts","webpack:///./texture.ts","webpack:///./context.ts","webpack:///./fpsTimer.ts","webpack:///./matrix.ts","webpack:///./aquarium.ts","webpack:///./main.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","BuildArray","size","itemBuilder","a","push","ASSERT","condition","message","Error","Behavior","frame","op","count","this","_frame","_op","_count","context","totalComponents","numComponents","buffer","isIndex","_stride","_offset","_size","_usage","GPUBufferUsage","INDEX","VERTEX","_totalComponents","Float32Array","sizeOfFloat","BYTES_PER_ELEMENT","bufferSize","length","_buf","createBuffer","COPY_DST","setBufferData","Uint16Array","sizeOfUint16","b","toString","constructor","set","MergeTypedArrays","_head","_tail","bufferManager","super","reset","data","_bufferMappedResultBuffer","_pixels","encoder","destBuffer","src_offset","dest_offset","pixels","copyBufferToBuffer","resultBuffer","resultData","createBufferMapped","MAP_WRITE","COPY_SRC","ringBuffer","mappedData","mappedBufferList","unmap","mapWriteAsync","then","mappedArray","MapWriteCallback","BufferManager","Array","_enqueuedBufferList","_bufferPoolSize","BUFFER_POOL_MAX_SIZE","destroyBufferPool","_find","oldSize","_usedSize","index","destroy","splice","indexOf","flush","offset","BUFFER_MAX_COUNT","BUFFER_PER_ALLOCATE_SIZE","BufferManagerWebGPU","sync","createCommandEncoder","cur_offset","availableSize","shift","waitABit","allocate","copy","finish","queue","submit","dispose","reMap","glslang","undefined","worldPosition","kWorldPosition","nextPosition","kNextPosition","fishPers","arr","concat","getAsArray","scale","time","attributeName","padding","kPadding","uniforms","kUniforms","slice","lightColor","kLightColor","specular","kSpecular","ambient","kAmbient","lightWorldPos","kLightWorldPos","viewProjection","kViewProjection","viewInverse","kViewInverse","world","kWorld","worldInverseTranspose","kWorldInverseTranspose","worldViewProjection","kWorldViewProjection","worldUniforms","byteSize","colorAttachmentInfo","depthStencil","_colorAttachmentCount","cColorAttachments","kMaxColorAttachments","attachment","storeOp","loadValue","g","cDepthStencilAttachmentInfo","depthLoadValue","depthStoreOp","stencilLoadValue","stencilStoreOp","colorAttachmentIndex","colorAttachment","colorAttachments","depthStencilAttachment","device","_colorStateCount","primitiveTopology","sampleCount","vertexStage","entryPoint","fragmentStage","cRasterizationState","frontFace","cullMode","depthBias","depthBiasSlopeScale","depthBiasClamp","rasterizationState","blend","srcFactor","dstFactor","cColorStates","format","alphaBlend","colorBlend","writeMask","GPUColorWrite","ALL","colorStateCount","stencilFace","compare","failOp","depthFailOp","passOp","cDepthStencilState","depthWriteEnabled","depthCompare","stencilBack","stencilFront","stencilReadMask","stencilWriteMask","depthStencilState","colorStates","_vertexBufferCount","cVertexBuffers","kMaxVertexBuffers","cAttributes","kMaxVertexAttributes","indexFormat","shaderLocation","arrayStride","stepMode","attributes","vertexBuffers","type","worldmatrices","textureMap","bufferMap","_program","_blend","_name","MODELNAME","MODELMAX","k","program","aquarium","_preInstance","_curInstance","_fishPerOffset","_aquarium","x","y","z","nextX","nextY","nextZ","MODELSMALLFISHA","fishInfo","fishTable","fishCount","modelName","SeaweedModel","diffuseTexture","normalTexture","reflectionTexture","skyboxTexture","positionBuffer","normalBuffer","texCoordBuffer","tangentBuffer","biNormalBuffer","indicesBuffer","lightFactorUniforms","worldUniformPer","_vertexStateDescriptor","_contextWebGPU","_programWebGPU","_instance","shininess","specularFactor","_pipeline","_groupLayoutModel","_groupLayoutPer","_pipelineLayout","_bindGroupModel","_bindGroupPer","_lightFactorBuffer","_worldBuffer","MODELGLOBEBASE","dataSize","vertexBufferCount","makeBindGroupLayout","entries","binding","visibility","GPUShaderStage","FRAGMENT","hasDynamicOffset","multisampled","viewDimension","textureComponentType","makeBasicPipelineLayout","bindGroupLayouts","groupLayoutGeneral","groupLayoutWorld","createRenderPipeline","createBufferFromData","UNIFORM","makeBindGroup","layout","resource","sampler","textureView","updateBufferData","pass","renderPass","setPipeline","setBindGroup","bindGroupGeneral","bindGroupWorld","setVertexBuffer","setIndexBuffer","drawIndexed","_viewBuffer","calcConstantBufferByteSize","innerUniforms","eta","tankColorFudge","refractionFudge","_innerBuffer","fishVertexUniforms","_enableDynamicBufferOffset","toggleBitset","TOGGLE","ENABLEDYNAMICBUFFEROFFSET","fishLength","fishBendAmount","fishWaveLength","_fishVertexBuffer","groupLayoutFishPer","bindGroupFishPers","MODELSMALLFISHAINSTANCEDDRAWS","_fishPersBuffer","offsetof","toArray","seaweedPer","_timeBuffer","mclock","IO","url","error","xhr","window","XMLHttpRequest","overrideMimeType","open","send","readyState","responseText","callback","onreadystatechange","text","success","status","arrayBuffer","response","responseType","json","JSON","parse","e","vertexShaderCodePath","fragmentShaderCodePath","_vertexShaderCodePath","_fragmentShaderCodePath","_vertexShaderCode","_fragmentShaderCode","enableAlphaBlending","alpha","promises","loadshader","shaderPath","stage","Promise","resolve","reject","LoadTextFile","result","exception","console","SingleShaderStage","Vertex","Fragment","all","catch","_context","_vertexShaderModule","_fragmentShaderModule","enableBlending","loadProgram","replace","createShaderModule","skyBoxUrls","ResourceHelper","path","_path","_imagePath","_programPath","_propPlacementPath","_fishBehaviorPath","skyUrls","Texture","urls","flip","_width","_height","_urls","isArray","_flip","image","imageCanvas","document","createElement","width","height","imageCanvasContext","getContext","translate","drawImage","src","toDataURL","flipY","images","img","Image","decode","imageFlipY","getImageData","pixelVec","imageData","bytesPerRow","Math","ceil","Uint8ClampedArray","imagePixelIndex","_gpuTextureHelper","_textureDimension","_textureViewDimension","_format","WebGPUTextureHelper","destroyImageData","_pixelVec","_resizedVec","_textureView","_texture","_sampler","_images","loadImage","_onImageLoaded","descriptor","dimension","depth","mipLevelCount","usage","GPUTextureUsage","SAMPLED","createTexture","getImagePixels","Uint8Array","bufferCopyView","createBufferCopyView","textureCopyView","createTextureCopyView","copySize","commandBuffers","copyBufferToTexture","viewDescriptor","baseMipLevel","baseArrayLayer","arrayLayerCount","createView","samplerDesc","addressModeU","addressModeV","addressModeW","minFilter","magFilter","mipmapFilter","createSampler","generateMipmappedTexture","imageBitmapSize","trunc","floor","log2","min","isPowerOf2","_device","mipmapSampler","mipmapBindGroupLayout","mipmapPipeline","createPipelineLayout","code","compileGLSL","imageBitmap","createImageBitmap","textureSize","max","srcTexture","OUTPUT_ATTACHMENT","defaultQueue","copyImageBitmapToTexture","texture","mipmappedTexture","commandEncoder","beginRenderPass","endPass","bindGroup","createBindGroup","passEncoder","draw","copyTextureToTexture","mipLevel","_resourceHelper","_availableToggleBitset","TOGGLEMAX","_clientWidth","_clientHeight","canvas","vsId","fsId","fpsTimer","preTotalInstance","curTotalInstance","enableDynamicBufferOffset","windowWidth","windowHeight","_isSwapchainOutOfDate","_renderPassDescriptor","_preferredSwapChainFormat","_enableMSAA","_enableFullScreenMode","_bufferManager","location","_initAvailableToggleBitset","_glslang","_sceneRenderTargetView","_sceneDepthStencilView","_backbufferView","_bindGroup","_lightWorldPositionBuffer","_lightBuffer","_fogBuffer","_commandEncoder","_renderPass","_destroyFishResource","_swapChain","_canvas","ENABLEMSAAx4","_disableControlPanel","DISABLECONTROLPANEL","ENABLEFULLSCREENMODE","_syncClientSize","adapter","navigator","gpu","requestAdapter","powerPreference","requestDevice","addEventListener","event","glslangModule","import","default","_gpuCanvasContext","getSwapChainPreferredFormat","configureSwapChain","createMultisampledRenderTargetView","createDepthStencilView","_framebufferResizeCallback","BUFFERMAPPINGASYNC","ENABLEINSTANCEDDRAWS","DISCRETEGPU","INTEGRATEDGPU","TURNOFFVSYNC","DISABLED3D12RENDERPASS","DISABLEWEBGPUVALIDATION","SIMULATINGFISHCOMEANDGO","defaultWidth","offsetWidth","devicePixelRatio","defaultHeight","offsetHeight","innerWidth","innerHeight","setWindowSize","loadTexture","rowsPerImage","level","origin","ext3D","srcBuffer","srcOffset","destOffset","shaderSourceGLSL","shaderType","source","transform","bindGroupLayoutdescriptor","createBindGroupLayout","pipelineLayoutDescriptor","pipelineLayout","programWebGPU","vertexStateDescriptor","enableBlend","vsModule","vertexShaderModule","fsModule","fragmentShaderModule","blendDescriptor","operation","colorStateDescriptor","vertexState","bit","start","command","bindGroupDescriptor","lightUniforms","fogUniforms","lightWorldPositionUniform","reallocResource","preFishCount","curFishCount","buf","cmd","getCurrentTexture","resolveTarget","colorAttachmentCount","model","MODELGROUP","FISH","FISHINSTANCEDDRAW","GENERIC","INNER","SEAWEED","OUTSIDE","_preTotalInstance","_curTotalInstance","from","fishPersBuffer","byteLength","fishPersData","pixel","kSwapchainBackBufferUsage","_totalTime","NUM_FRAMES_TO_AVERAGE","_timeTable","_timeTableCursor","_historyFPS","NUM_HISTORY_DATA","_historyFrameTime","_logFPS","_averageFPS","elapsedTime","renderingTime","testTime","avg","variance","pow","FPS_VALID_THRESHOLD","Matrix","dst","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","a30","a31","a32","a33","b00","b01","b02","b03","b10","b11","b12","b13","b20","b21","b22","b23","b30","b31","b32","b33","m00","m01","m02","m03","m10","m11","m12","m13","m20","m21","m22","m23","m30","m31","m32","m33","tmp_0","tmp_1","tmp_2","tmp_3","tmp_4","tmp_5","tmp_6","tmp_7","tmp_8","tmp_9","tmp_10","tmp_11","tmp_12","tmp_13","tmp_14","tmp_15","tmp_16","tmp_17","tmp_18","tmp_19","tmp_20","tmp_21","tmp_22","tmp_23","t0","t1","t2","t3","left","right","bottom","top","near_","far_","dx","dy","dz","axis","off","v","sqrt","eye","target","up","subVector","normalize","cross","_randomSeed","_RANDOM_RANGE","v0","v1","v2","degrees","PI","FISHENUM","g_sceneInfo","namestr","fog","MODELMEDIUMFISHA","MODELMEDIUMFISHB","MODELBIGFISHA","MODELBIGFISHB","MODELMEDIUMFISHAINSTANCEDDRAWS","MODELMEDIUMFISHBINSTANCEDDRAWS","MODELBIGFISHAINSTANCEDDRAWS","MODELBIGFISHBINSTANCEDDRAWS","MODELARCH","MODELCORAL","MODELCORALSTONEA","MODELCORALSTONEB","MODELENVIRONMENTBOX","MODELFLOORBASE_BAKED","MODELROCKA","MODELROCKB","MODELROCKC","MODELRUINCOlOMN","MODELSTONE","MODELSUNKNSHIPBOXES","MODELSUNKNSHIPDECK","MODELSUNKNSHIPHULL","MODELSUNKNSUB","MODELSEAWEEDA","MODELSEAWEEDB","MODELSKYBOX","MODELSUPPORTBEAMS","MODELTREASURECHEST","SMALL","speed","speedRange","radius","radiusRange","tailSpeed","heightOffset","heightRange","MEDIUM","BIG","lasers","laserRot","laserOff","laserScale","g_net_offset","projection","view","worldInverse","viewProjectionInverse","skyView","skyViewProjection","skyViewProjectionInverse","eyePosition","v3t0","v3t1","m4t0","m4t1","m4t2","m4t3","colorMult","_modelEnumMap","_textureMap","_programMap","_fpsTimer","_curFishCount","_preFishCount","eyeClock","fogColor","fogPower","fogMult","fogOffset","_aquariumModels","options","availableToggleBitset","UPATEANDDRAWFOREACHMODEL","ENABLEALPHABLENDING","_processOptions","initialize","_calculateFishCount","log","_getElapsedTime","resourceHelper","getSkyBoxUrls","createTextureWebGPU","initGeneralResources","_setupModelEnumMap","loadResource","_resetFpsTime","num_fish","enable_msaa","disable_dynamic_buffer_offset","integrated_gpu","discrete_gpu","enable_full_screen_mode","print_log","PRINTLOG","buffer_mapping_async","turn_off_vsync","test_time","_testTime","AUTOSTOP","disable_webgpu_validation","enable_alpha_blending","simulating_fish_come_and_go","disable_control_panel","performance","now","shouldQuit","keyBoardQuit","_render","doFlush","terminate","_printAvgFps","requestAnimationFrame","display","_loadModels","_loadPlacement","_loadFishScenario","info","proppath","propPlacementPath","LoadJSON","objects","worldMatrix","matrix","j","modelname","MODELFIRST","enableInstanceddraw","_loadModel","fishBehaviorPath","behaviors","behave","_fishBehavior","imagePath","programPath","modelPath","getModelPath","models","createModel","textures","textureName","arrays","fields","arrayName","vec","createBufferWebGPU","programId","createProgram","compileProgram","init","numLeft","MAX","numfloat","temp","update","sin","cos","aspect","clientWidth","clientHeight","tan","degToRad","g_fieldOfView","abs","xOff","yOff","frustum","cameraLookAt","inverse4","mulMatrixMatrix4","getAxis","mulScalarVector","addVector","updateWorldlUniforms","resetPseudoRandom","preFrame","_updateGlobalUniforms","_updateAndDrawBackground","_updateAndDrawFishes","updateFPS","_updateBackground","_updateFishes","_drawBackground","_drawFishes","showFPS","_updateWorldMatrixAndDraw","begin","end","numFish","prepareForDraw","fishBaseClock","fishRadius","fishRadiusRange","fishSpeed","fishSpeedRange","fishTailSpeed","fishOffset","fishHeight","fishHeightRange","fishXClock","fishYClock","fishZClock","ii","fishClock","pseudoRandom","xRadius","yRadius","zRadius","fishSpeedClock","xClock","yClock","zClock","updateFishPerUniforms","updatePerInstanceUniforms","_updateWorldMatrix","updateAllFishData","w","transpose4","_updateWorldProjections","getElementById","runWebGPUAquarium"],"mappings":"aACE,IAAIA,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUC,QAGnC,IAAIC,EAASJ,EAAiBE,GAAY,CACzCG,EAAGH,EACHI,GAAG,EACHH,QAAS,IAUV,OANAI,EAAQL,GAAUM,KAAKJ,EAAOD,QAASC,EAAQA,EAAOD,QAASF,GAG/DG,EAAOE,GAAI,EAGJF,EAAOD,QAKfF,EAAoBQ,EAAIF,EAGxBN,EAAoBS,EAAIV,EAGxBC,EAAoBU,EAAI,SAASR,EAASS,EAAMC,GAC3CZ,EAAoBa,EAAEX,EAASS,IAClCG,OAAOC,eAAeb,EAASS,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEZ,EAAoBkB,EAAI,SAAShB,GACX,oBAAXiB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAeb,EAASiB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAeb,EAAS,aAAc,CAAEmB,OAAO,KAQvDrB,EAAoBsB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQrB,EAAoBqB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFA1B,EAAoBkB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOrB,EAAoBU,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRzB,EAAoB6B,EAAI,SAAS1B,GAChC,IAAIS,EAAST,GAAUA,EAAOqB,WAC7B,WAAwB,OAAOrB,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAH,EAAoBU,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRZ,EAAoBa,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG/B,EAAoBkC,EAAI,GAIjBlC,EAAoBA,EAAoBmC,EAAI,G,+BCO9C,SAASC,EAAcC,EAAcC,GAC1C,MAAMC,EAAS,GACf,IAAK,IAAInC,EAAI,EAAGA,EAAIiC,IAAQjC,EACxBmC,EAAEC,KAAKF,KAEX,OAAOC,EAQF,SAASE,EAAOC,EAAoBC,GACzC,IAAKD,EAAW,CAEZ,GADAC,EAAUA,GAAW,mBACA,oBAAVC,MACP,MAAM,IAAIA,MAAMD,GAEpB,MAAMA,G,OCvGL,MAAME,EAMT,YAAYC,EAAYC,EAAYC,GAChCC,KAAKC,OAASJ,EACdG,KAAKE,IAASJ,EACdE,KAAKG,OAASJ,EAGlB,YACI,OAAOC,KAAKC,OAGhB,UAAiBJ,GACbG,KAAKC,OAASJ,EAGlB,SACI,OAAOG,KAAKE,IAGhB,YACI,OAAOF,KAAKG,QCbb,MAAM,EAST,YAAYC,EACAC,EACAC,EACAC,EACAC,GAIR,GAZI,KAAAC,QAAkB,EAClB,KAAAC,QAAe,EACf,KAAAC,MAAgB,EAOpBX,KAAKY,OAASJ,EAAUK,eAAeC,MAAQD,eAAeE,OAC9Df,KAAKgB,iBAAmBX,EAEpBE,aAAkBU,aAAc,CAChC,MAAMC,EAAsBX,EAAOY,kBACnCnB,KAAKW,MAAQL,EAAgBY,EAE7B,MAAME,EAAuBF,EAAcX,EAAOc,OAClDrB,KAAKsB,KAAwBlB,EAAQmB,aAAaH,EAAYpB,KAAKY,OAASC,eAAeW,UAE3FpB,EAAQqB,cAAczB,KAAKsB,KAAM,EAAGF,EAAYb,QAE/C,GAAIA,aAAkBmB,YAAa,CACpC,MAAMC,EAAuBpB,EAAOY,kBAIpC,GAHAnB,KAAKW,MAAQL,EAAgBqB,EAGzB3B,KAAKgB,iBAAmB,GAAM,EAClC,CAEIT,EFWT,SAA0BjB,EAAQsC,GAEvC,IAAItC,IAAMsC,EAAG,KAAM,yDAKnB,IAAIA,GAAkB,IAAbA,EAAEP,OAAc,OAAO/B,EAChC,IAAIA,GAAkB,IAAbA,EAAE+B,OAAc,OAAOO,EAGhC,GAAG/D,OAAOkB,UAAU8C,SAASvE,KAAKgC,KAAOzB,OAAOkB,UAAU8C,SAASvE,KAAKsE,GACpE,KAAM,6EAEV,IAAIpE,EAAI,IAAI8B,EAAEwC,YAAYxC,EAAE+B,OAASO,EAAEP,QAIvC,OAHA7D,EAAEuE,IAAIzC,GACN9B,EAAEuE,IAAIH,EAAGtC,EAAE+B,QAEJ7D,EE7BgBwE,CAAiBzB,EADQ,IAAImB,YAAY,CAAC,KAIvD,MAAMN,EAAuBO,EAAepB,EAAOc,OACnDrB,KAAKsB,KAAwBlB,EAAQmB,aAAaH,EAAYpB,KAAKY,OAASC,eAAeW,UAE3FpB,EAAQqB,cAAczB,KAAKsB,KAAM,EAAGF,EAAYb,IAIjD,UACHP,KAAKsB,KAAO,KAGhB,aACI,OAAOtB,KAAKsB,KAGhB,sBACI,OAAOtB,KAAKgB,iBAGhB,aACI,OAAOhB,KAAKS,QAGhB,aACI,OAAOT,KAAKU,QAGhB,eACI,OAAOV,KAAKY,OAGhB,eACI,OAAOZ,KAAKW,OC3Cb,MAAM,UArCN,MAMH,YAAYvB,GAJF,KAAA6C,MAAgB,EAChB,KAAAC,MAAgB,EAChB,KAAAvB,MAAgB,EAGtBX,KAAKkC,MAAQ9C,EACbY,KAAKW,MAAQvB,EAGV,WAEP,WACI,OAAOY,KAAKW,MAGhB,oBACI,OAAOX,KAAKW,MAAQX,KAAKkC,MAGtB,MAAM9C,GACT,OAAO,EAGJ,SACA,WAKA,SAASA,GACZ,OAAO,IAYX,YAAY+C,EAA8C/C,GACtDgD,MAAMhD,GAHH,KAAA+C,cAA+C,KAIlDnC,KAAKmC,cAAgBA,EAErBnC,KAAKqC,MAAMjD,GAGf,eAAsBkD,GAClBtC,KAAKuC,0BAA4BD,EAAK,GACtCtC,KAAKwC,QAAUF,EAAK,GAGjB,KAAKG,EACAC,EACAC,EACAC,EACAC,EACAzD,GAMR,OALmByD,aAAkBnB,YAAc,IAAIA,YAAY1B,KAAKwC,SAAW,IAAIvB,aAAajB,KAAKwC,UAC9FT,IAAIc,GAEfJ,EAAQK,mBAAmB9C,KAAKuC,0BAA2BI,EAAYD,EAAYE,EACxDxD,IACpB,EAMJ,MAAMA,GACT,GAAIA,EAAOY,KAAKZ,KACZ,OAAO,EAGXY,KAAKiC,MAAQ,EACbjC,KAAKkC,MAAQ,EAEb,IAAKa,EAAcC,GAAchD,KAAKmC,cAAc/B,QAAQ6C,mBAAmBpC,eAAeqC,UAAYrC,eAAesC,SAAU/D,GAInI,OAHAY,KAAKuC,0BAA4BQ,EACjC/C,KAAKwC,QAAUQ,GAER,EAGJ,wBAAwBV,EAAgCc,GAC3D5D,EAAgB,OAAT8C,EAAe,8CAEtBc,EAAWC,WAAaf,EACxBc,EAAWjB,cAAcmB,iBAAiB/D,KAAK6D,GAG5C,QACHpD,KAAKiC,MAAQ,EACbjC,KAAKkC,MAAQ,EAEblC,KAAKuC,0BAA0BgB,QAG5B,UACHvD,KAAKuC,0BAA4B,KAG9B,QACHvC,KAAKuC,0BAA0BiB,gBAAgBC,KAAMC,IACjD,EAAiBC,iBAAiB,CAAC3D,KAAKuC,0BAA2BmB,GAAc1D,QAIlF,SAASZ,GAIZ,OAHAY,KAAKkC,OAAS9C,EACdI,EAAOQ,KAAKkC,MAAQlC,KAAKW,MAAO,iDAEzBX,KAAKkC,MAAQ9C,GAOrB,MAAMwE,EAaT,cAPO,KAAAN,iBAAgD,IAAIO,MAEjD,KAAAC,oBAAmD,IAAID,MAM7D7D,KAAK+D,gBAAkBH,EAAcI,qBAGlC,UACHhE,KAAKiE,oBAGT,WACI,OAAOjE,KAAK+D,gBAGT,YAAYX,EAAkChE,GAGjD,IAAe,IAFIY,KAAKkE,MAAMd,GAG1B,OAAO,EAGX,MAAMe,EAAkBf,EAAWhE,KAOnC,QALwBgE,EAAWf,MAAMjD,KASrCY,KAAKoE,UAAYpE,KAAKoE,UAAYD,EAAU/E,GAGzC,GAGJ,cAAcgE,GACjB,MAAMiB,EAAarE,KAAKkE,MAAMd,GAE9B,OAAe,IAAXiB,IAIJrE,KAAKoE,WAAahB,EAAWhE,KAC7BgE,EAAWkB,UACXtE,KAAK8D,oBAAoBS,OAAOF,EAAO,IAEhC,GAGH,MAAMjB,GACV,OAAIpD,KAAK8D,oBAAoBzC,OAAS,EAC3BrB,KAAK8D,oBAAoBU,QAAQpB,IAEpC,EAGL,qBAKA,QACH,IAAK,IAAI7C,KAAUP,KAAK8D,oBACpBvD,EAAOkE,QAOR,SAASrF,EAAcsF,GAC1B,OAAO,MAnFY,EAAAV,qBAAkC,OAClC,EAAAW,iBAAkC,GAClC,EAAAC,yBAAmChB,EAAcI,qBAAuBJ,EAAce,iBAsF1G,MAAME,UAA4BjB,EAMrC,YAAYxD,EAAkC0E,GAC1C1C,QAJG,KAAAhC,QAAmC,KAKtCJ,KAAKI,QAAUA,EACfJ,KAAK8E,KAAOA,EAEZ9E,KAAKyC,QAAUrC,EAAQ2E,uBAGpB,UACH/E,KAAKyC,QAAU,KAMZ,SAASrD,EAAcsF,GAQ1B,IAAItB,EAAyC,KACzC4B,EAAmC,EACvC,GAAIhF,KAAK8E,KAAM,CAEX,GAAI9E,KAAKoE,UAAYhF,EAAOY,KAAK+D,gBAC7B,MAAO,CACHxD,OAAQ6C,EACRsB,OAAQA,GAIhBtB,EAAa,IAAI,EAAiBpD,KAAMZ,GACxCY,KAAK8D,oBAAoBvE,KAAK6D,OAE7B,CACD,KAAOpD,KAAKsD,iBAAiBjC,OAAS,IAClC+B,EAAapD,KAAKsD,iBAAiB,GAC/BF,EAAW6B,cAAgB7F,IAC3BY,KAAKsD,iBAAiB4B,QACtB9B,EAAa,KAOrB,GAAkB,MAAdA,EACA,GAAIpD,KAAKG,OAASyD,EAAce,iBAC5B3E,KAAKoE,WAAahF,EAClBgE,EAAa,IAAI,EAAiBpD,KAAM4D,EAAcgB,0BACtD5E,KAAKsD,iBAAiB/D,KAAK6D,GAC3BpD,KAAKG,aAEJ,MAAIH,KAAKsD,iBAAiBjC,OAASrB,KAAK8D,oBAAoBzC,OAASrB,KAAKG,QAa3E,OAAO,KAXP,KAAwC,IAAjCH,KAAKsD,iBAAiBjC,QACzBrB,KAAKI,QAAQ+E,WAGjB/B,EAAapD,KAAKsD,iBAAiB,GAC/BF,EAAW6B,cAAgB7F,IAC3BY,KAAKsD,iBAAiB4B,QACtB9B,EAAa,MAQe,IAApCpD,KAAK8D,oBAAoBzC,QACtBrB,KAAK8D,oBAAoB9D,KAAK8D,oBAAoBzC,OAAO,IAAM+B,GAClEpD,KAAK8D,oBAAoBvE,KAAK6D,GAIlC4B,EAAa5B,EAAWgC,SAAShG,GACjCsF,EAASM,EAGb,MAAO,CACHzE,OAAQ6C,EACRsB,OAAQA,GAIT,QAGC1E,KAAKsD,iBAAiBjC,OAAS,GAC5BrB,KAAK8D,oBAAoB9D,KAAK8D,oBAAoBzC,OAAO,KAAOrB,KAAKsD,iBAAiB,IACzFtD,KAAKsD,iBAAiB4B,QAG1B,IAAK,IAAI3E,KAAUP,KAAK8D,oBACpBvD,EAAOkE,QAGX,MAAMY,EAAyBrF,KAAKyC,QAAQ6C,SAI5C,GAHAtF,KAAKI,QAAQmF,MAAMC,OAAO,CAACH,IAGtBrF,KAAK8E,KAML,CAED,IAAK,IAAIT,EAAgB,EAAGA,EAAQrE,KAAK8D,oBAAoBzC,SAAUgD,EAAO,CAC3BrE,KAAK8D,oBAAoBO,GAC7DoB,UAEfzF,KAAKoE,UAAY,OAXjB,IAAK,IAAIC,EAAgB,EAAGA,EAAQrE,KAAK8D,oBAAoBzC,SAAUgD,EAAO,CAC3BrE,KAAK8D,oBAAoBO,GAC7DqB,QAYnB1F,KAAK8D,oBAAoBzC,OAAS,EAClCrB,KAAKyC,QAAUzC,KAAKI,QAAQ2E,uBAGzB,oBACH,GAAK/E,KAAK8E,KAAV,CAIA,IAAK,IAAI1B,KAAcpD,KAAK8D,oBACxBV,EAAWkB,UAEftE,KAAK8D,oBAAoBzC,OAAS,I,0SCrW1C,IAAIsE,OAAUC,ECGP,MAAM,EAUT,cACI5F,KAAK6F,cAAgB1G,EAAW,EAAQ2G,eAAgB,IAAM,GAC9D9F,KAAK+F,aAAgB5G,EAAW,EAAQ6G,cAAe,IAAM,GAG1D,eAAeC,GAClB,IAAIC,EAAoB,GACxB,IAAK,IAAI/I,EAAI,EAAGA,EAAI8I,EAAS5E,SAAUlE,EACnC+I,EAAMA,EAAIC,OAAOF,EAAS9I,GAAGiJ,cAEjC,OAAOF,EAGJ,aACH,OAAOlG,KAAK6F,cAAcM,OAAOnG,KAAKqG,MAAOrG,KAAK+F,aAAc/F,KAAKsG,MAGlE,gBAAgBC,GACnB,IAAI7B,EAAiB,EACrB,OAAO6B,GACH,IAAK,gBACD7B,EAAS,EACT,MACJ,IAAK,QACDA,EAAS,EAAQoB,eACjB,MACJ,IAAK,eACDpB,EAAS,EAAQoB,eAAiB,EAClC,MACJ,IAAK,OACDpB,EAAS,EAAQoB,eAAiB,EAAI,EAAQE,cAGtD,OAAgB,EAATtB,EAGX,WACI,OAAO,IAAIzD,aAAajB,KAAKoG,cAG1B,sBACH,OAAkE,GAA1D,EAAQN,eAAiB,EAAI,EAAQE,cAAgB,IAjD1C,EAAAF,eAAyB,EACzB,EAAAE,cAAwB,EAoD5C,MAAM,EAYT,cACIhG,KAAK6F,cAAgB1G,EAAW,EAAmB2G,eAAgB,IAAM,GACzE9F,KAAK+F,aAAgB5G,EAAW,EAAmB6G,cAAe,IAAM,GACxEhG,KAAKwG,QAAWrH,EAAW,EAAmBsH,SAAU,IAAM,GAG3D,aACH,OAAOzG,KAAK6F,cAAcM,OAAOnG,KAAKqG,MAAOrG,KAAK+F,aAAc/F,KAAKsG,KAAMtG,KAAKwG,SAGpF,WACI,OAAO,IAAIvF,aAAajB,KAAKoG,cAG1B,sBACH,OAAgG,GAAxF,EAAQN,eAAiB,EAAI,EAAQE,cAAgB,EAAI,EAAmBS,WAzBjE,EAAAX,eAAyB,EACzB,EAAAE,cAAwB,EACxB,EAAAS,SAAmB,GA8BvC,MAAM,EAOT,cACIzG,KAAK0G,SAAWvH,EAAW,EAAmBwH,UAAW,IAAM,GAGnE,iBACI,OAAO3G,KAAK0G,SAAS,GAGzB,eAAsBtI,GAClB4B,KAAK0G,SAAS,GAAKtI,EAGvB,qBACI,OAAO4B,KAAK0G,SAAS,GAGzB,mBAA0BtI,GACtB4B,KAAK0G,SAAS,GAAKtI,EAGvB,qBACI,OAAO4B,KAAK0G,SAAS,GAGzB,mBAA0BtI,GACtB4B,KAAK0G,SAAS,GAAKtI,EAGvB,WACI,OAAO,IAAI6C,aAAajB,KAAK0G,UAG1B,sBACH,OAAsC,EAA/B,EAAmBC,WAtCP,EAAAA,UAAoB,EA0CxC,MAAM,EAOT,cACI3G,KAAK0G,SAAWvH,EAAW,EAAYwH,UAAW,IAAM,GAG5D,eACI,OAAO3G,KAAK0G,SAAS,GAGzB,aAAoBtI,GAChB4B,KAAK0G,SAAS,GAAKtI,EAGvB,cACI,OAAO4B,KAAK0G,SAAS,GAGzB,YAAmBtI,GACf4B,KAAK0G,SAAS,GAAKtI,EAGvB,gBACI,OAAO4B,KAAK0G,SAAS,GAGzB,cAAqBtI,GACjB4B,KAAK0G,SAAS,GAAKtI,EAGvB,cACI,OAAO4B,KAAK0G,SAAS,GAGzB,YAAmBtI,GACf4B,KAAK0G,SAAS,GAAKtI,EAGvB,eACI,OAAO4B,KAAK0G,SAASE,MAAM,GAG/B,aAAoBxI,GAChB4B,KAAK0G,SAAS,GAAKtI,EAAM,GACzB4B,KAAK0G,SAAS,GAAKtI,EAAM,GACzB4B,KAAK0G,SAAS,GAAKtI,EAAM,GACzB4B,KAAK0G,SAAS,GAAKtI,EAAM,GAG7B,WACI,OAAO,IAAI6C,aAAajB,KAAK0G,UAG1B,sBACH,OAA+B,EAAxB,EAAYC,WAzDA,EAAAA,UAAoB,EAgExC,MAAM,EAOT,cACI3G,KAAK0G,SAAWvH,EAAW,EAAcwH,UAAW,IAAM,GAG9D,UACI,OAAO3G,KAAK0G,SAAS,GAGzB,QAAetI,GACX4B,KAAK0G,SAAS,GAAKtI,EAGvB,qBACI,OAAO4B,KAAK0G,SAAS,GAGzB,mBAA0BtI,GACtB4B,KAAK0G,SAAS,GAAKtI,EAGvB,sBACI,OAAO4B,KAAK0G,SAAS,GAGzB,oBAA2BtI,GACvB4B,KAAK0G,SAAS,GAAKtI,EAGvB,cACI,OAAO4B,KAAK0G,SAAS,GAGzB,YAAmBtI,GACf4B,KAAK0G,SAAS,GAAKtI,EAGvB,WACI,OAAO,IAAI6C,aAAajB,KAAK0G,UAG1B,sBACH,OAAiC,EAA1B,EAAcC,WA9CF,EAAAA,UAAoB,EAqDxC,MAAM,EAOT,cACI3G,KAAK0G,SAAWvH,EAAW,EAAoBwH,UAAW,IAAM,GAGpE,gBACI,OAAO3G,KAAK0G,SAAS,GAGzB,cAAqBtI,GACjB4B,KAAK0G,SAAS,GAAKtI,EAGvB,qBACI,OAAO4B,KAAK0G,SAAS,GAGzB,mBAA0BtI,GACtB4B,KAAK0G,SAAS,GAAKtI,EAGvB,WACI,OAAO,IAAI6C,aAAajB,KAAK0G,UAG1B,sBACH,OAAuC,EAAhC,EAAoBC,WA9BR,EAAAA,UAAoB,EAkCxC,MAAM,EAUT,cACI3G,KAAK6G,WAAa1H,EAAW,EAAc2H,YAAa,IAAM,GAC9D9G,KAAK+G,SAAW5H,EAAW,EAAc6H,UAAW,IAAM,GAC1DhH,KAAKiH,QAAU9H,EAAW,EAAc+H,SAAU,IAAM,GAGrD,aACH,OAAOlH,KAAK6G,WAAWV,OAAOnG,KAAK+G,SAAU/G,KAAKiH,SAGtD,WACI,OAAO,IAAIhG,aAAajB,KAAKoG,cAG1B,sBACH,OAAwF,GAAhF,EAAcU,YAAc,EAAcE,UAAY,EAAcE,WAvBzD,EAAAJ,YAAsB,EACtB,EAAAE,UAAoB,EACpB,EAAAE,SAAmB,EAyBvC,MAAM,EAWT,cACIlH,KAAKmH,cAAgBhI,EAAW,EAA0BiI,eAAgB,IAAM,GAChFpH,KAAKwG,QAAU,EACfxG,KAAKqH,eAAkBlI,EAAW,EAA0BmI,gBAAiB,IAAM,GACnFtH,KAAKuH,YAAepI,EAAW,EAA0BqI,aAAc,IAAM,GAG1E,aACH,OAAOxH,KAAKmH,cAAchB,OAAOnG,KAAKwG,QAASxG,KAAKqH,eAAgBrH,KAAKuH,aAG7E,WACI,OAAO,IAAItG,aAAajB,KAAKoG,cAG1B,sBACH,OAA6I,GAArI,EAA0BgB,eAAiB,EAAI,EAA0BE,gBAAkB,EAA0BE,eAzB1G,EAAAJ,eAAyB,EACzB,EAAAE,gBAA0B,GAC1B,EAAAE,aAAuB,GA2B3C,MAAM,EAKT,cACIxH,KAAK0G,SAAWvH,EACZ,GAAI,IAAM,GAIlB,WACI,OAAOa,KAAK0G,SAGhB,SAAgBtI,GACZ4B,KAAK0G,SAAWtI,EAGpB,WACI,OAAO,IAAI6C,aAAajB,KAAK0G,UAGjC,eACI,OAA8B,EAAvB1G,KAAK0G,SAASrF,QAItB,MAAM,EAUT,cACIrB,KAAKyH,MAAQtI,EAAW,EAAcuI,OAAQ,IAAM,GACpD1H,KAAK2H,sBAAwBxI,EAAW,EAAcyI,uBAAwB,IAAM,GACpF5H,KAAK6H,oBAAsB1I,EAAW,EAAc2I,qBAAsB,IAAM,GAG7E,aACH,OAAO9H,KAAKyH,MAAMtB,OAAOnG,KAAK2H,sBAAuB3H,KAAK6H,qBAG9D,WACI,OAAO,IAAI5G,aAAajB,KAAKoG,cAG1B,sBACH,OAA4G,GAApG,EAAcsB,OAAS,EAAcE,uBAAyB,EAAcE,uBAvBjE,EAAAJ,OAAiB,GACjB,EAAAE,uBAAiC,GACjC,EAAAE,qBAA+B,GAyBnD,MAAM,EAKT,cACI9H,KAAK+H,cAAgB5I,EACjB,GAAI,IAAM,IAAI,GAItB,WACI,IAAI+G,EAAoB,GACxB,IAAK,IAAI/I,EAAY,EAAGA,EAAI6C,KAAK+H,cAAc1G,SAAUlE,EACrD+I,EAAMA,EAAIC,OAAOnG,KAAK+H,cAAc5K,GAAGiJ,cAE3C,OAAO,IAAInF,aAAaiF,GAG5B,eACI,OAAO,EAAc8B,SAAWhI,KAAK+H,cAAc1G,QC1apD,MAAM,EAYT,YAAY4G,EAA4CC,GAFjD,KAAAC,sBAAkC,EAGrCnI,KAAKoI,kBAAoBjJ,EACrB,EAA0BkJ,qBAC1B,KAAM,KAGV,IAAK,IAAIlL,EAAc,EAAGA,EAAI,EAA0BkL,uBAAwBlL,EAC5E6C,KAAKoI,kBAAkBjL,GAAGmL,gBAAa1C,EACvC5F,KAAKoI,kBAAkBjL,GAAGoL,QAAU,QACpCvI,KAAKoI,kBAAkBjL,GAAGqL,UAA0B,CAChDvK,EAAG,EACHwK,EAAG,EACH7G,EAAG,EACHtC,EAAG,GAIXU,KAAK0I,4BAA8E,CAC/EC,eAAgB,EAChBC,aAAc,QACdC,iBAAkB,EAClBC,eAAgB,SAGpB9I,KAAKmI,sBAAwBF,EAAoB5G,OACjD,IAAI0H,EAAiC,EACrC,IAAK,IAAIC,KAAmBf,EACpBe,IACAhJ,KAAKoI,kBAAkBW,GAAsBT,WAAaU,KAE5DD,EAEN/I,KAAKiJ,iBAAmBjJ,KAAKoI,kBAEzBF,GACAlI,KAAK0I,4BAA4BJ,WAAaJ,EAC9ClI,KAAKkJ,uBAAyBlJ,KAAK0I,6BAGnC1I,KAAKkJ,4BAAyBtD,EAItC,yBAAgCxH,GAC5B4B,KAAKmI,sBAAwB/J,EAC7B4B,KAAKiJ,iBAAmBjJ,KAAKoI,kBAAkBxB,MAAM,EAAG5G,KAAKmI,wBAvD1C,EAAAE,qBAA+B,EA4DnD,MAAM,EA0BT,YAAYc,GAFJ,KAAAC,iBAA6B,EAGdpJ,KAERqJ,kBAAoB,gBAFZrJ,KAGRsJ,YAAc,EAHNtJ,KAMRuJ,YAA+C,CACtDC,WAAY,QAPGxJ,KAWRyJ,cAAiD,CACxDD,WAAY,QAIhBxJ,KAAK0J,oBAAwD,CACzDC,UAAW,MACXC,SAAU,OACVC,UAAW,EACXC,oBAAqB,EACrBC,eAAgB,GArBD/J,KAuBRgK,mBAAqBhK,KAAK0J,oBAGrC,MAAMO,EAA4B,CAC9BC,UAAW,YACXC,UAAW,uBAEfnK,KAAKoK,aAAejL,EAChB,EAA8BkJ,qBAC9B,KAAM,CACFgC,OAAQ,aACRC,WAAYL,EACZM,WAAYN,EACZO,UAAWC,cAAcC,OApCd1K,KAuCR2K,gBAAkB,EAG7B,MAAMC,EAA6C,CAC/CC,QAAS,SACTC,OAAQ,OACRC,YAAa,OACbC,OAAQ,QAGZhL,KAAKiL,mBAAsD,CACvDZ,OAAQ,uBACRa,mBAAmB,EACnBC,aAAc,SACdC,YAAaR,EACbS,aAAcT,EACdU,gBAAiB,IACjBC,iBAAkB,KAxDHvL,KA0DRwL,uBAAoB5F,EAGnC,oBAA2BxH,GACvB4B,KAAKoJ,iBAAmBhL,EACxB4B,KAAKyL,YAAczL,KAAKoK,aAAaxD,MAAM,EAAG5G,KAAKoJ,mBAxFhC,EAAAf,qBAA+B,EA6FnD,MAAM,EAaT,cAFQ,KAAAqD,mBAA6B,EAKjC1L,KAAK2L,eAAiBxM,EAClB,EAA2ByM,kBAAmB,KAAM,KAGxD5L,KAAK6L,YAAc1M,EACf,EAA2B2M,qBAAsB,KAAM,KAPxC9L,KAUR+L,YAAc,SAVN/L,KAWR0L,mBAAqB,EAGhC,IAAK,IAAIvO,EAAc,EAAGA,EAAI6C,KAAK6L,YAAYxK,SAAUlE,EACrD6C,KAAK6L,YAAY1O,GAAoC,CACjD6O,eAAgB,EAChBtH,OAAQ,EACR2F,OAAQ,SAGhB,IAAK,IAAIlN,EAAI,EAAGA,EAAI6C,KAAK2L,eAAetK,SAAUlE,EAC9C6C,KAAK2L,eAAexO,GAAG8O,YAAc,EACrCjM,KAAK2L,eAAexO,GAAG+O,SAAW,SAClClM,KAAK2L,eAAexO,GAAGgP,WAAa,GAOxCnM,KAAK2L,eAAe,GAAGQ,WAAanM,KAAK6L,YA/BtB7L,KAgCRoM,cAAgBpM,KAAK2L,eAGpC,sBAA6BvN,GACzB4B,KAAK0L,mBAAqBtN,EAC1B4B,KAAKoM,cAAgBpM,KAAK2L,eAAe/E,MAAM,EAAG5G,KAAK0L,qBAjDpC,EAAAI,qBAA+B,GAC/B,EAAAF,kBAA+B,GCnJnD,MAAM,EAUT,YAAYS,EAAmB3O,EAAkBuM,GAR1C,KAAAqC,cAAmC,IAAIzI,MACvC,KAAA0I,WAAgD,GAChD,KAAAC,UAA8C,GAE3C,KAAAC,SAA8B,KAKpCzM,KAAK0M,OAASzC,IAAS,EACvBjK,KAAK2M,MAAQjP,GAAQkP,EAAUC,SAG5B,UACH,IAAK,IAAIC,KAAK9M,KAAKwM,UACW,OAAtBxM,KAAKwM,UAAUM,WACR9M,KAAKwM,UAAUM,GAG9B9M,KAAKwM,UAAY,GAGrB,YAAmBO,GACf/M,KAAKyM,SAAWM,EAGb,kBACA,0BAA0BhF,IAC1B,QACA,SAMJ,MAAM,UAAkB,EAQ3B,YAAYsE,EAAkB3O,EAAiBuM,EAAgB+C,GAC3D5K,MAAMiK,EAAM3O,EAAMuM,GAPZ,KAAAgD,aAAoB,EACpB,KAAAC,aAAoB,EACpB,KAAAC,eAAsB,EAEtB,KAAAC,UAAgC,KAItCpN,KAAKoN,UAAYJ,EAGd,sBAAsBK,EAAUC,EAAUC,EACpBC,EAAcC,EAAcC,EAC5BrH,EAAcC,EAAajC,IAGjD,iBACHrE,KAAKmN,eAAiB,EACtB,IAAK,IAAIhQ,EAAI,EAAGA,EAAI6C,KAAK2M,MAAQC,EAAUe,kBAAmBxQ,EAAG,CAC7D,MAAMyQ,EAAiBC,GAAU1Q,GACjC6C,KAAKmN,gBAAkBnN,KAAKoN,UAAUU,UAAUF,EAASG,UAAYnB,EAAUe,iBAGnF,MAAMC,EAAiBC,GAAU7N,KAAK2M,MAAQC,EAAUe,iBACxD3N,KAAKkN,aAAkBlN,KAAKoN,UAAUU,UAAUF,EAASG,UAAYnB,EAAUe,kBAQhF,MAAMK,UAAqB,EAE9B,YAAY3B,EAAkB3O,EAAiBuM,GAC3C7H,MAAMiK,EAAM3O,EAAMuM,GAGf,uBAAuB3D,KAO3B,MAAM,UAA2B,EAoCpC,YAAYlG,EAA4B4M,EAA8BX,EAAkB3O,EAAiBuM,GACrG7H,MAAMiK,EAAM3O,EAAMuM,GAnCf,KAAAgE,eAA6C,KAC7C,KAAAC,cAA6C,KAC7C,KAAAC,kBAA6C,KAC7C,KAAAC,cAA6C,KAE7C,KAAAC,eAAyC,KACzC,KAAAC,aAAyC,KACzC,KAAAC,eAAyC,KACzC,KAAAC,cAAyC,KACzC,KAAAC,eAAyC,KAEzC,KAAAC,cAAyC,KAEzC,KAAAC,oBAAqD,IAAI,EACzD,KAAAC,gBAA6C,IAAI,EAE9C,KAAAC,uBAA+D,KAa/D,KAAAC,eAA0C,KAC1C,KAAAC,eAA0C,KAE1C,KAAAC,UAAiB,EAKvBhP,KAAK8O,eAAiB1O,EACtBJ,KAAK6O,uBAAyB,IAAI,EAElC7O,KAAK2O,oBAAoBM,UAAiB,GAC1CjP,KAAK2O,oBAAoBO,eAAiB,EAGvC,UACHlP,KAAKmP,UAAqB,KAC1BnP,KAAKoP,kBAAqB,KAC1BpP,KAAKqP,gBAAqB,KAC1BrP,KAAKsP,gBAAqB,KAC1BtP,KAAKuP,gBAAqB,KAC1BvP,KAAKwP,cAAqB,KAC1BxP,KAAKyP,mBAAqB,KAC1BzP,KAAK0P,aAAqB,KAGvB,OACH1P,KAAK+O,eAAiB/O,KAAKyM,SAE3BzM,KAAKiO,eAAoBjO,KAAKuM,WAAoB,QAClDvM,KAAKkO,cAAoBlO,KAAKuM,WAAsB,UACpDvM,KAAKmO,kBAAoBnO,KAAKuM,WAA0B,cACxDvM,KAAKoO,cAAoBpO,KAAKuM,WAAmB,OAEjDvM,KAAKqO,eAAiBrO,KAAKwM,UAAoB,SAC/CxM,KAAKsO,aAAiBtO,KAAKwM,UAAkB,OAC7CxM,KAAKuO,eAAiBvO,KAAKwM,UAAoB,SAC/CxM,KAAKwO,cAAiBxO,KAAKwM,UAAmB,QAC9CxM,KAAKyO,eAAiBzO,KAAKwM,UAAoB,SAC/CxM,KAAK0O,cAAiB1O,KAAKwM,UAAmB,QAK1CxM,KAAKkO,eAAiBlO,KAAK2M,QAAUC,EAAU+C,gBAC/C3P,KAAK6O,uBAAuBlD,eAAe,GAAGM,YAAcjM,KAAKqO,eAAeuB,SAChF5P,KAAK6O,uBAAuBhD,YAAY,GAAGxB,OAAiB,SAC5DrK,KAAK6O,uBAAuBhD,YAAY,GAAGG,eAAiB,EAC5DhM,KAAK6O,uBAAuBhD,YAAY,GAAGnH,OAAiB,EAC5D1E,KAAK6O,uBAAuBlD,eAAe,GAAGQ,WAAc,CAACnM,KAAK6O,uBAAuBhD,YAAY,IAErG7L,KAAK6O,uBAAuBlD,eAAe,GAAGM,YAAcjM,KAAKsO,aAAasB,SAC9E5P,KAAK6O,uBAAuBhD,YAAY,GAAGxB,OAAiB,SAC5DrK,KAAK6O,uBAAuBhD,YAAY,GAAGG,eAAiB,EAC5DhM,KAAK6O,uBAAuBhD,YAAY,GAAGnH,OAAiB,EAC5D1E,KAAK6O,uBAAuBlD,eAAe,GAAGQ,WAAc,CAACnM,KAAK6O,uBAAuBhD,YAAY,IAErG7L,KAAK6O,uBAAuBlD,eAAe,GAAGM,YAAcjM,KAAKuO,eAAeqB,SAChF5P,KAAK6O,uBAAuBhD,YAAY,GAAGxB,OAAiB,SAC5DrK,KAAK6O,uBAAuBhD,YAAY,GAAGG,eAAiB,EAC5DhM,KAAK6O,uBAAuBhD,YAAY,GAAGnH,OAAiB,EAC5D1E,KAAK6O,uBAAuBlD,eAAe,GAAGQ,WAAc,CAACnM,KAAK6O,uBAAuBhD,YAAY,IAErG7L,KAAK6O,uBAAuBlD,eAAe,GAAGM,YAAcjM,KAAKwO,cAAcoB,SAC/E5P,KAAK6O,uBAAuBhD,YAAY,GAAGxB,OAAiB,SAC5DrK,KAAK6O,uBAAuBhD,YAAY,GAAGG,eAAiB,EAC5DhM,KAAK6O,uBAAuBhD,YAAY,GAAGnH,OAAiB,EAC5D1E,KAAK6O,uBAAuBlD,eAAe,GAAGQ,WAAc,CAACnM,KAAK6O,uBAAuBhD,YAAY,IAErG7L,KAAK6O,uBAAuBlD,eAAe,GAAGM,YAAcjM,KAAKyO,eAAemB,SAChF5P,KAAK6O,uBAAuBhD,YAAY,GAAGxB,OAAiB,SAC5DrK,KAAK6O,uBAAuBhD,YAAY,GAAGG,eAAiB,EAC5DhM,KAAK6O,uBAAuBhD,YAAY,GAAGnH,OAAiB,EAC5D1E,KAAK6O,uBAAuBlD,eAAe,GAAGQ,WAAc,CAACnM,KAAK6O,uBAAuBhD,YAAY,IAErG7L,KAAK6O,uBAAuBgB,kBAAgC,EAC5D7P,KAAK6O,uBAAuB9C,YAAgC,WAG5D/L,KAAK6O,uBAAuBlD,eAAe,GAAGM,YAAcjM,KAAKqO,eAAeuB,SAChF5P,KAAK6O,uBAAuBhD,YAAY,GAAGxB,OAAiB,SAC5DrK,KAAK6O,uBAAuBhD,YAAY,GAAGG,eAAiB,EAC5DhM,KAAK6O,uBAAuBhD,YAAY,GAAGnH,OAAiB,EAC5D1E,KAAK6O,uBAAuBlD,eAAe,GAAGQ,WAAc,CAACnM,KAAK6O,uBAAuBhD,YAAY,IAErG7L,KAAK6O,uBAAuBlD,eAAe,GAAGM,YAAcjM,KAAKsO,aAAasB,SAC9E5P,KAAK6O,uBAAuBhD,YAAY,GAAGxB,OAAiB,SAC5DrK,KAAK6O,uBAAuBhD,YAAY,GAAGG,eAAiB,EAC5DhM,KAAK6O,uBAAuBhD,YAAY,GAAGnH,OAAiB,EAC5D1E,KAAK6O,uBAAuBlD,eAAe,GAAGQ,WAAc,CAACnM,KAAK6O,uBAAuBhD,YAAY,IAErG7L,KAAK6O,uBAAuBlD,eAAe,GAAGM,YAAcjM,KAAKuO,eAAeqB,SAChF5P,KAAK6O,uBAAuBhD,YAAY,GAAGxB,OAAiB,SAC5DrK,KAAK6O,uBAAuBhD,YAAY,GAAGG,eAAiB,EAC5DhM,KAAK6O,uBAAuBhD,YAAY,GAAGnH,OAAiB,EAC5D1E,KAAK6O,uBAAuBlD,eAAe,GAAGQ,WAAc,CAACnM,KAAK6O,uBAAuBhD,YAAY,IAErG7L,KAAK6O,uBAAuBgB,kBAAgC,EAC5D7P,KAAK6O,uBAAuB9C,YAAgC,UAG5D/L,KAAKoO,eAAiBpO,KAAKmO,mBAAqBnO,KAAK2M,QAAUC,EAAU+C,eACzE3P,KAAKoP,kBAAoBpP,KAAK8O,eAAegB,oBACV,CAC3BC,QAAqC,CACjC,CACIC,QAAS,EACTC,WAAYC,eAAeC,SAC3B9D,KAAM,kBAEV,CACI2D,QAAS,EACTC,WAAYC,eAAeC,SAC3B9D,KAAM,WAEV,CACI2D,QAAS,EACTC,WAAYC,eAAeC,SAC3B9D,KAAM,WAEV,CACI2D,QAAS,EACTC,WAAYC,eAAeC,SAC3B9D,KAAM,kBACN+D,kBAAkB,EAClBC,cAAc,EACdC,cAAe,KACfC,qBAAsB,SAE1B,CACIP,QAAS,EACTC,WAAYC,eAAeC,SAC3B9D,KAAM,kBACN+D,kBAAkB,EAClBC,cAAc,EACdC,cAAc,KACdC,qBAAsB,SAE1B,CACIP,QAAS,EACTC,WAAYC,eAAeC,SAC3B9D,KAAM,kBACN+D,kBAAkB,EAClBC,cAAc,EACdC,cAAc,KACdC,qBAAsB,SAE1B,CACIP,QAAS,EACTC,WAAYC,eAAeC,SAC3B9D,KAAM,kBACN+D,kBAAkB,EAClBC,cAAc,EACdC,cAAe,OACfC,qBAAsB,YAMjCvQ,KAAKkO,eAAiBlO,KAAK2M,OAASC,EAAU+C,eACnD3P,KAAKoP,kBAAoBpP,KAAK8O,eAAegB,oBACV,CAC3BC,QAAqC,CACjC,CACIC,QAAS,EACTC,WAAYC,eAAeC,SAC3B9D,KAAM,kBAEV,CACI2D,QAAS,EACTC,WAAYC,eAAeC,SAC3B9D,KAAM,WAEV,CACI2D,QAAS,EACTC,WAAYC,eAAeC,SAC3B9D,KAAM,kBACN+D,kBAAkB,EAClBC,cAAc,EACdC,cAAc,KACdC,qBAAsB,SAE1B,CACIP,QAAS,EACTC,WAAYC,eAAeC,SAC3B9D,KAAM,kBACN+D,kBAAkB,EAClBC,cAAc,EACdC,cAAc,KACdC,qBAAsB,YAOtCvQ,KAAKoP,kBAAoBpP,KAAK8O,eAAegB,oBACV,CAC3BC,QAAqC,CACjC,CACIC,QAAS,EACTC,WAAYC,eAAeC,SAC3B9D,KAAM,kBAEV,CACI2D,QAAS,EACTC,WAAYC,eAAeC,SAC3B9D,KAAM,WAEV,CACI2D,QAAS,EACTC,WAAYC,eAAeC,SAC3B9D,KAAM,kBACN+D,kBAAkB,EAClBC,cAAc,EACdC,cAAc,KACdC,qBAAsB,YAO1CvQ,KAAKqP,gBAAkBrP,KAAK8O,eAAegB,oBACR,CAC3BC,QAAqC,CACjC,CACIC,QAAS,EACTC,WAAYC,eAAenP,OAC3BsL,KAAM,qBAMtBrM,KAAKsP,gBAAkBtP,KAAK8O,eAAe0B,wBACT,CAC1BC,iBAAyC,CACrCzQ,KAAK8O,eAAe4B,mBACpB1Q,KAAK8O,eAAe6B,iBACpB3Q,KAAKoP,kBACLpP,KAAKqP,mBAKjBrP,KAAKmP,UAAYnP,KAAK8O,eAAe8B,qBACjC5Q,KAAKsP,gBACLtP,KAAK+O,eACL/O,KAAK6O,uBACL7O,KAAK0M,QAGT1M,KAAKyP,mBACDzP,KAAK8O,eAAe+B,qBAAqB7Q,KAAK2O,oBAAoBrM,KACzB,EAAoB0F,SACpBnH,eAAeW,SAAWX,eAAeiQ,SAEtF9Q,KAAK0P,aACD1P,KAAK8O,eAAe+B,qBAAqB7Q,KAAK4O,gBAAgBtM,KACrBtC,KAAK4O,gBAAgB5G,SACrBnH,eAAeW,SAAWX,eAAeiQ,SAMlF9Q,KAAKoO,eAAiBpO,KAAKmO,mBAAqBnO,KAAK2M,QAAUC,EAAU+C,eACzE3P,KAAKuP,gBAAkBvP,KAAK8O,eAAeiC,cACd,CACrBC,OAAQhR,KAAKoP,kBACbW,QAA+B,CAC3B,CACIC,QAAS,EACTiB,SAA6B,CACzB1Q,OAAQP,KAAKyP,mBACb/K,OAAQ,IAGhB,CACIsL,QAAS,EACTiB,SAAUjR,KAAKmO,kBAAkB+C,SAErC,CACIlB,QAAS,EACTiB,SAAUjR,KAAKoO,cAAc8C,SAEjC,CACIlB,QAAS,EACTiB,SAAUjR,KAAKiO,eAAekD,aAElC,CACInB,QAAS,EACTiB,SAAUjR,KAAKkO,cAAciD,aAEjC,CACInB,QAAS,EACTiB,SAAUjR,KAAKmO,kBAAkBgD,aAErC,CACInB,QAAS,EACTiB,SAAUjR,KAAKoO,cAAc+C,gBAMxCnR,KAAKkO,eAAiBlO,KAAK2M,QAAUC,EAAU+C,eACpD3P,KAAKuP,gBAAkBvP,KAAK8O,eAAeiC,cACd,CACrBC,OAAQhR,KAAKoP,kBACbW,QAA+B,CAC3B,CACIC,QAAS,EACTiB,SAA6B,CACzB1Q,OAAQP,KAAKyP,mBACb/K,OAAQ,IAGhB,CACIsL,QAAS,EACTiB,SAAUjR,KAAKiO,eAAeiD,SAElC,CACIlB,QAAS,EACTiB,SAAUjR,KAAKiO,eAAekD,aAElC,CACInB,QAAS,EACTiB,SAAUjR,KAAKkO,cAAciD,gBAO7CnR,KAAKuP,gBAAkBvP,KAAK8O,eAAeiC,cACd,CACrBC,OAAQhR,KAAKoP,kBACbW,QAA+B,CAC3B,CACIC,QAAS,EACTiB,SAA6B,CACzB1Q,OAAQP,KAAKyP,mBACb/K,OAAQ,IAGhB,CACIsL,QAAS,EACTiB,SAAUjR,KAAKiO,eAAeiD,SAElC,CACIlB,QAAS,EACTiB,SAAUjR,KAAKiO,eAAekD,gBAOlDnR,KAAKwP,cAAgBxP,KAAK8O,eAAeiC,cACZ,CACrBC,OAAQhR,KAAKqP,gBACbU,QAA+B,CAC3B,CACIC,QAAS,EACTiB,SAA6B,CACzB1Q,OAAQP,KAAK0P,aACbhL,OAAQ,OAO5B1E,KAAK8O,eAAerN,cAAczB,KAAKyP,mBAAoB,EAAG,EAAoBzH,SAChDhI,KAAK2O,oBAAoBrM,MAGxD,iBACHtC,KAAK8O,eAAesC,iBAAiBpR,KAAK0P,aAAc1P,KAAK4O,gBAAgBtM,KAAMtC,KAAK4O,gBAAgB5G,UAGrG,OACH,MAAMqJ,EAAOrR,KAAK8O,eAAewC,WACjCD,EAAKE,YAAYvR,KAAKmP,WACtBkC,EAAKG,aAAa,EAAGxR,KAAK8O,eAAe2C,kBACzCJ,EAAKG,aAAa,EAAGxR,KAAK8O,eAAe4C,gBACzCL,EAAKG,aAAa,EAAGxR,KAAKuP,iBAC1B8B,EAAKG,aAAa,EAAGxR,KAAKwP,eAC1B6B,EAAKM,gBAAgB,EAAG3R,KAAKqO,eAAe9N,QAC5C8Q,EAAKM,gBAAgB,EAAG3R,KAAKsO,aAAa/N,QAC1C8Q,EAAKM,gBAAgB,EAAG3R,KAAKuO,eAAehO,QAExCP,KAAKwO,eAAiBxO,KAAKyO,gBAAkBzO,KAAK2M,QAAUC,EAAU+C,iBAEtE0B,EAAKM,gBAAgB,EAAG3R,KAAKwO,cAAcjO,QAC3C8Q,EAAKM,gBAAgB,EAAG3R,KAAKyO,eAAelO,SAEhD8Q,EAAKO,eAAe5R,KAAK0O,cAAcnO,OAAQ,GAC/C8Q,EAAKQ,YAAY7R,KAAK0O,cAAcrO,gBAAiBL,KAAKgP,UAAW,EAAG,EAAG,GAC3EhP,KAAKgP,UAAY,EAGd,0BAA0BjH,GAC7B/H,KAAK4O,gBAAgB7G,cAAc/H,KAAKgP,WAAajH,EAErD/H,KAAKgP,aAQN,MAAM,UAA2B,EAIpC,YAAY5O,EAA4B4M,EAA8BX,EAAkB3O,EAAiBuM,GACrG7H,MAAMhC,EAAS4M,EAAUX,EAAM3O,EAAMuM,GAErCjK,KAAK2O,oBAAoBM,UAAiB,GAC1CjP,KAAK2O,oBAAoBO,eAAiB,EAGvC,UACH9M,MAAMqD,UACNzF,KAAK8R,YAAc,KAGhB,OACH9R,KAAK+O,eAAiB/O,KAAKyM,SAE3BzM,KAAKiO,eAAoBjO,KAAKuM,WAAoB,QAClDvM,KAAKkO,cAAoBlO,KAAKuM,WAAsB,UACpDvM,KAAKmO,kBAAoBnO,KAAKuM,WAA0B,cACxDvM,KAAKoO,cAAoBpO,KAAKuM,WAAmB,OAEjDvM,KAAKqO,eAAiBrO,KAAKwM,UAAoB,SAC/CxM,KAAKsO,aAAiBtO,KAAKwM,UAAkB,OAC7CxM,KAAKuO,eAAiBvO,KAAKwM,UAAoB,SAC/CxM,KAAKwO,cAAiBxO,KAAKwM,UAAmB,QAC9CxM,KAAKyO,eAAiBzO,KAAKwM,UAAoB,SAC/CxM,KAAK0O,cAAiB1O,KAAKwM,UAAmB,QAE9CxM,KAAK6O,uBAAuBlD,eAAe,GAAGM,YAAcjM,KAAKqO,eAAeuB,SAChF5P,KAAK6O,uBAAuBhD,YAAY,GAAGxB,OAAiB,SAC5DrK,KAAK6O,uBAAuBhD,YAAY,GAAGG,eAAiB,EAC5DhM,KAAK6O,uBAAuBhD,YAAY,GAAGnH,OAAiB,EAC5D1E,KAAK6O,uBAAuBlD,eAAe,GAAGQ,WAAc,CAACnM,KAAK6O,uBAAuBhD,YAAY,IAErG7L,KAAK6O,uBAAuBlD,eAAe,GAAGM,YAAcjM,KAAKsO,aAAasB,SAC9E5P,KAAK6O,uBAAuBhD,YAAY,GAAGxB,OAAiB,SAC5DrK,KAAK6O,uBAAuBhD,YAAY,GAAGG,eAAiB,EAC5DhM,KAAK6O,uBAAuBhD,YAAY,GAAGnH,OAAiB,EAC5D1E,KAAK6O,uBAAuBlD,eAAe,GAAGQ,WAAc,CAACnM,KAAK6O,uBAAuBhD,YAAY,IAErG7L,KAAK6O,uBAAuBlD,eAAe,GAAGM,YAAcjM,KAAKuO,eAAeqB,SAChF5P,KAAK6O,uBAAuBhD,YAAY,GAAGxB,OAAiB,SAC5DrK,KAAK6O,uBAAuBhD,YAAY,GAAGG,eAAiB,EAC5DhM,KAAK6O,uBAAuBhD,YAAY,GAAGnH,OAAiB,EAC5D1E,KAAK6O,uBAAuBlD,eAAe,GAAGQ,WAAc,CAACnM,KAAK6O,uBAAuBhD,YAAY,IAErG7L,KAAK6O,uBAAuBlD,eAAe,GAAGM,YAAcjM,KAAKwO,cAAcoB,SAC/E5P,KAAK6O,uBAAuBhD,YAAY,GAAGxB,OAAiB,SAC5DrK,KAAK6O,uBAAuBhD,YAAY,GAAGG,eAAiB,EAC5DhM,KAAK6O,uBAAuBhD,YAAY,GAAGnH,OAAiB,EAC5D1E,KAAK6O,uBAAuBlD,eAAe,GAAGQ,WAAc,CAACnM,KAAK6O,uBAAuBhD,YAAY,IAErG7L,KAAK6O,uBAAuBlD,eAAe,GAAGM,YAAcjM,KAAKyO,eAAemB,SAChF5P,KAAK6O,uBAAuBhD,YAAY,GAAGxB,OAAiB,SAC5DrK,KAAK6O,uBAAuBhD,YAAY,GAAGG,eAAiB,EAC5DhM,KAAK6O,uBAAuBhD,YAAY,GAAGnH,OAAiB,EAC5D1E,KAAK6O,uBAAuBlD,eAAe,GAAGQ,WAAc,CAACnM,KAAK6O,uBAAuBhD,YAAY,IAErG7L,KAAK6O,uBAAuBgB,kBAAgC,EAC5D7P,KAAK6O,uBAAuB9C,YAAgC,SAE5D/L,KAAKqP,gBAAkBrP,KAAK8O,eAAegB,oBACR,CAC3BC,QAAqC,CACjC,CACIC,QAAS,EACTC,WAAYC,eAAenP,OAC3BsL,KAAM,qBAOtBrM,KAAKoP,kBAAoBpP,KAAK8O,eAAegB,oBACV,CAC3BC,QAAqC,CACjC,CACIC,QAAS,EACTC,WAAYC,eAAeC,SAC3B9D,KAAM,kBAEV,CACI2D,QAAS,EACTC,WAAYC,eAAeC,SAC3B9D,KAAM,WAEV,CACI2D,QAAS,EACTC,WAAYC,eAAeC,SAC3B9D,KAAM,sBAMtBrM,KAAKsP,gBAAkBtP,KAAK8O,eAAe0B,wBACT,CAC1BC,iBAAyC,CACrCzQ,KAAK8O,eAAe4B,mBACpB1Q,KAAK8O,eAAe6B,iBACpB3Q,KAAKoP,kBACLpP,KAAKqP,mBAKjBrP,KAAKmP,UAAYnP,KAAK8O,eAAe8B,qBACjC5Q,KAAKsP,gBACLtP,KAAK+O,eACL/O,KAAK6O,uBACL7O,KAAK0M,QAGT1M,KAAKyP,mBACDzP,KAAK8O,eAAe+B,qBAAqB7Q,KAAK2O,oBAAoBrM,KACzB,EAAoB0F,SACpBnH,eAAeW,SAAWX,eAAeiQ,SAEtF9Q,KAAK8R,YACD9R,KAAK8O,eAAe+B,qBAAqB7Q,KAAK4O,gBAAgBtM,KACoD,GAAzEtC,KAAK8O,eAAeiD,2BAA2B,EAAc/J,UAC7DnH,eAAeW,SAAWX,eAAeiQ,SAEtF9Q,KAAKuP,gBAAkBvP,KAAK8O,eAAeiC,cACd,CACrBC,OAAQhR,KAAKoP,kBACbW,QAA+B,CAC3B,CACIC,QAAS,EACTiB,SAA6B,CACzB1Q,OAAQP,KAAKyP,mBACb/K,OAAQ,IAGhB,CACIsL,QAAS,EACTiB,SAAUjR,KAAKiO,eAAeiD,SAElC,CACIlB,QAAS,EACTiB,SAAUjR,KAAKiO,eAAekD,gBAM9CnR,KAAKwP,cAAgBxP,KAAK8O,eAAeiC,cACZ,CACrBC,OAAQhR,KAAKqP,gBACbU,QAA+B,CAC3B,CACIC,QAAS,EACTiB,SAA6B,CACzB1Q,OAAQP,KAAK8R,YACbpN,OAAQ,OAO5B1E,KAAK8O,eAAerN,cAAczB,KAAKyP,mBAAoB,EAAG,EAAoBzH,SAChDhI,KAAK2O,oBAAoBrM,MAGxD,kBAEA,OACH,MAAM+O,EAA6BrR,KAAK8O,eAAewC,WACvDD,EAAKE,YAAYvR,KAAKmP,WACtBkC,EAAKG,aAAa,EAAGxR,KAAK8O,eAAe2C,kBACzCJ,EAAKG,aAAa,EAAGxR,KAAK8O,eAAe4C,gBACzCL,EAAKG,aAAa,EAAGxR,KAAKuP,iBAC1B8B,EAAKG,aAAa,EAAGxR,KAAKwP,eAC1B6B,EAAKM,gBAAgB,EAAG3R,KAAKqO,eAAe9N,QAC5C8Q,EAAKM,gBAAgB,EAAG3R,KAAKsO,aAAa/N,QAC1C8Q,EAAKM,gBAAgB,EAAG3R,KAAKuO,eAAehO,QAExCP,KAAKwO,eAAiBxO,KAAKyO,iBAC3B4C,EAAKM,gBAAgB,EAAG3R,KAAKwO,cAAcjO,QAC3C8Q,EAAKM,gBAAgB,EAAG3R,KAAKyO,eAAelO,SAEhD8Q,EAAKO,eAAe5R,KAAK0O,cAAcnO,OAAQ,GAC/C8Q,EAAKQ,YAAY7R,KAAK0O,cAAcrO,gBAAiB,EAAG,EAAG,EAAG,GAG3D,0BAA0B0H,GAC7B/H,KAAK4O,gBAAgB7G,cAAc,GAAKA,EAExC/H,KAAK8O,eAAesC,iBAAiBpR,KAAK8R,YAAa/J,EAAczF,KAChCtC,KAAK8O,eAAeiD,2BAA2B,EAAc/J,YAQnG,MAAM,UAAyB,EAOlC,YAAY5H,EAA4B4M,EAA8BX,EAAkB3O,EAAiBuM,GACrG7H,MAAMhC,EAAS4M,EAAUX,EAAM3O,EAAMuM,GANlC,KAAA+H,cAAyC,IAAI,EAQhDhS,KAAKgS,cAAcC,IAAkB,EACrCjS,KAAKgS,cAAcE,eAAkB,KACrClS,KAAKgS,cAAcG,gBAAkB,EAGlC,UACH/P,MAAMqD,UACNzF,KAAKoS,aAAe,KACpBpS,KAAK8R,YAAc,KAGhB,OACH9R,KAAK+O,eAAiB/O,KAAKyM,SAE3BzM,KAAKiO,eAAoBjO,KAAKuM,WAAoB,QAClDvM,KAAKkO,cAAoBlO,KAAKuM,WAAsB,UACpDvM,KAAKmO,kBAAoBnO,KAAKuM,WAA0B,cACxDvM,KAAKoO,cAAoBpO,KAAKuM,WAAmB,OAEjDvM,KAAKqO,eAAiBrO,KAAKwM,UAAoB,SAC/CxM,KAAKsO,aAAiBtO,KAAKwM,UAAkB,OAC7CxM,KAAKuO,eAAiBvO,KAAKwM,UAAoB,SAC/CxM,KAAKwO,cAAiBxO,KAAKwM,UAAmB,QAC9CxM,KAAKyO,eAAiBzO,KAAKwM,UAAoB,SAC/CxM,KAAK0O,cAAiB1O,KAAKwM,UAAmB,QAE9CxM,KAAK6O,uBAAuBlD,eAAe,GAAGM,YAAcjM,KAAKqO,eAAeuB,SAChF5P,KAAK6O,uBAAuBhD,YAAY,GAAGxB,OAAiB,SAC5DrK,KAAK6O,uBAAuBhD,YAAY,GAAGG,eAAiB,EAC5DhM,KAAK6O,uBAAuBhD,YAAY,GAAGnH,OAAiB,EAC5D1E,KAAK6O,uBAAuBlD,eAAe,GAAGQ,WAAc,CAACnM,KAAK6O,uBAAuBhD,YAAY,IAErG7L,KAAK6O,uBAAuBlD,eAAe,GAAGM,YAAcjM,KAAKsO,aAAasB,SAC9E5P,KAAK6O,uBAAuBhD,YAAY,GAAGxB,OAAiB,SAC5DrK,KAAK6O,uBAAuBhD,YAAY,GAAGG,eAAiB,EAC5DhM,KAAK6O,uBAAuBhD,YAAY,GAAGnH,OAAiB,EAC5D1E,KAAK6O,uBAAuBlD,eAAe,GAAGQ,WAAc,CAACnM,KAAK6O,uBAAuBhD,YAAY,IAErG7L,KAAK6O,uBAAuBlD,eAAe,GAAGM,YAAcjM,KAAKuO,eAAeqB,SAChF5P,KAAK6O,uBAAuBhD,YAAY,GAAGxB,OAAiB,SAC5DrK,KAAK6O,uBAAuBhD,YAAY,GAAGG,eAAiB,EAC5DhM,KAAK6O,uBAAuBhD,YAAY,GAAGnH,OAAiB,EAC5D1E,KAAK6O,uBAAuBlD,eAAe,GAAGQ,WAAc,CAACnM,KAAK6O,uBAAuBhD,YAAY,IAErG7L,KAAK6O,uBAAuBlD,eAAe,GAAGM,YAAcjM,KAAKwO,cAAcoB,SAC/E5P,KAAK6O,uBAAuBhD,YAAY,GAAGxB,OAAiB,SAC5DrK,KAAK6O,uBAAuBhD,YAAY,GAAGG,eAAiB,EAC5DhM,KAAK6O,uBAAuBhD,YAAY,GAAGnH,OAAiB,EAC5D1E,KAAK6O,uBAAuBlD,eAAe,GAAGQ,WAAc,CAACnM,KAAK6O,uBAAuBhD,YAAY,IAErG7L,KAAK6O,uBAAuBlD,eAAe,GAAGM,YAAcjM,KAAKyO,eAAemB,SAChF5P,KAAK6O,uBAAuBhD,YAAY,GAAGxB,OAAiB,SAC5DrK,KAAK6O,uBAAuBhD,YAAY,GAAGG,eAAiB,EAC5DhM,KAAK6O,uBAAuBhD,YAAY,GAAGnH,OAAiB,EAC5D1E,KAAK6O,uBAAuBlD,eAAe,GAAGQ,WAAc,CAACnM,KAAK6O,uBAAuBhD,YAAY,IAErG7L,KAAK6O,uBAAuBgB,kBAAgC,EAC5D7P,KAAK6O,uBAAuB9C,YAAgC,SAE5D/L,KAAKoP,kBAAoBpP,KAAK8O,eAAegB,oBACV,CAC3BC,QAAqC,CACjC,CACIC,QAAS,EACTC,WAAYC,eAAeC,SAC3B9D,KAAM,kBAEV,CACI2D,QAAS,EACTC,WAAYC,eAAeC,SAC3B9D,KAAM,WAEV,CACI2D,QAAS,EACTC,WAAYC,eAAeC,SAC3B9D,KAAM,WAEV,CACI2D,QAAS,EACTC,WAAYC,eAAeC,SAC3B9D,KAAM,kBACN+D,kBAAkB,EAClBC,cAAc,EACdC,cAAe,KACfC,qBAAsB,SAE1B,CACIP,QAAS,EACTC,WAAYC,eAAeC,SAC3B9D,KAAM,kBACN+D,kBAAkB,EAClBC,cAAc,EACdC,cAAc,KACdC,qBAAsB,SAE1B,CACIP,QAAS,EACTC,WAAYC,eAAeC,SAC3B9D,KAAM,kBACN+D,kBAAkB,EAClBC,cAAc,EACdC,cAAc,KACdC,qBAAsB,SAE1B,CACIP,QAAS,EACTC,WAAYC,eAAeC,SAC3B9D,KAAM,kBACN+D,kBAAkB,EAClBC,cAAc,EACdC,cAAe,OACfC,qBAAsB,YAMtCvQ,KAAKqP,gBAAkBrP,KAAK8O,eAAegB,oBACR,CAC3BC,QAAqC,CACjC,CACIC,QAAS,EACTC,WAAYC,eAAenP,OAC3BsL,KAAM,qBAMtBrM,KAAKsP,gBAAkBtP,KAAK8O,eAAe0B,wBACT,CAC1BC,iBAAyC,CACrCzQ,KAAK8O,eAAe4B,mBACpB1Q,KAAK8O,eAAe6B,iBACpB3Q,KAAKoP,kBACLpP,KAAKqP,mBAKjBrP,KAAKmP,UAAYnP,KAAK8O,eAAe8B,qBACjC5Q,KAAKsP,gBACLtP,KAAK+O,eACL/O,KAAK6O,uBACL7O,KAAK0M,QAGT1M,KAAKoS,aACDpS,KAAK8O,eAAe+B,qBAAqB7Q,KAAKgS,cAAc1P,KACnB,EAAc0F,SACdnH,eAAeW,SAAWX,eAAeiQ,SAEtF9Q,KAAK8R,YACD9R,KAAK8O,eAAe+B,qBAAqB7Q,KAAK4O,gBAAgBtM,KACrBtC,KAAK8O,eAAeiD,2BAA2B/R,KAAK4O,gBAAgB5G,UACpEnH,eAAeW,SAAWX,eAAeiQ,SAEtF9Q,KAAKuP,gBAAkBvP,KAAK8O,eAAeiC,cACd,CACrBC,OAAQhR,KAAKoP,kBACbW,QAA+B,CAC3B,CACIC,QAAS,EACTiB,SAA6B,CACzB1Q,OAAQP,KAAKoS,aACb1N,OAAQ,IAGhB,CACIsL,QAAS,EACTiB,SAAUjR,KAAKmO,kBAAkB+C,SAErC,CACIlB,QAAS,EACTiB,SAAUjR,KAAKoO,cAAc8C,SAEjC,CACIlB,QAAS,EACTiB,SAAUjR,KAAKiO,eAAekD,aAElC,CACInB,QAAS,EACTiB,SAAUjR,KAAKkO,cAAciD,aAEjC,CACInB,QAAS,EACTiB,SAAUjR,KAAKmO,kBAAkBgD,aAErC,CACInB,QAAS,EACTiB,SAAUjR,KAAKoO,cAAc+C,gBAM7CnR,KAAKwP,cAAgBxP,KAAK8O,eAAeiC,cACZ,CACrBC,OAAQhR,KAAKqP,gBACbU,QAA+B,CAC3B,CACIC,QAAS,EACTiB,SAA6B,CACzB1Q,OAAQP,KAAK8R,YACbpN,OAAQ,OAO5B1E,KAAK8O,eAAerN,cAAczB,KAAKoS,aAAc,EAAG,EAAcpK,SACpChI,KAAKgS,cAAc1P,MAGlD,kBAEA,OACH,MAAM+O,EAA6BrR,KAAK8O,eAAewC,WACvDD,EAAKE,YAAYvR,KAAKmP,WACtBkC,EAAKG,aAAa,EAAGxR,KAAK8O,eAAe2C,kBACzCJ,EAAKG,aAAa,EAAGxR,KAAK8O,eAAe4C,gBACzCL,EAAKG,aAAa,EAAGxR,KAAKuP,iBAC1B8B,EAAKG,aAAa,EAAGxR,KAAKwP,eAC1B6B,EAAKM,gBAAgB,EAAG3R,KAAKqO,eAAe9N,QAC5C8Q,EAAKM,gBAAgB,EAAG3R,KAAKsO,aAAa/N,QAC1C8Q,EAAKM,gBAAgB,EAAG3R,KAAKuO,eAAehO,QAC5C8Q,EAAKM,gBAAgB,EAAG3R,KAAKwO,cAAcjO,QAC3C8Q,EAAKM,gBAAgB,EAAG3R,KAAKyO,eAAelO,QAC5C8Q,EAAKO,eAAe5R,KAAK0O,cAAcnO,OAAQ,GAC/C8Q,EAAKQ,YAAY7R,KAAK0O,cAAcrO,gBAAiB,EAAG,EAAG,EAAG,GAG3D,0BAA0B0H,GAC7B/H,KAAK4O,gBAAgB7G,cAAc,GAAKA,EAExC/H,KAAK8O,eAAesC,iBAAiBpR,KAAK8R,YAAa/J,EAAczF,KAChCtC,KAAK8O,eAAeiD,2BAA2B,EAAc/J,YAQnG,MAAM,UAAwB,EAkCjC,YAAY5H,EAA4B4M,EAA8BX,EAAkB3O,EAAiBuM,GACrG7H,MAAMiK,EAAM3O,EAAMuM,EAAO+C,GAjCtB,KAAAqF,mBAAmD,IAAI,EACvD,KAAA1D,oBAAqD,IAAI,EAEzD,KAAAV,eAA0C,KAC1C,KAAAC,cAAyC,KACzC,KAAAC,kBAA6C,KAC7C,KAAAC,cAAyC,KAEzC,KAAAC,eAAyC,KACzC,KAAAC,aAAuC,KACvC,KAAAC,eAAyC,KACzC,KAAAC,cAAwC,KACxC,KAAAC,eAAyC,KAEzC,KAAAC,cAAwC,KAEvC,KAAAG,uBAA+D,KAmBnE7O,KAAK8O,eAAiB1O,EACtBJ,KAAK6O,uBAAyB,IAAI,EAElC7O,KAAKsS,2BAA6BtF,EAASuF,aAAaC,EAAOC,2BAE/DzS,KAAK2O,oBAAoBM,UAAiB,EAC1CjP,KAAK2O,oBAAoBO,eAAiB,GAE1C,MAAMtB,EAAmCC,GAAUnQ,EAAOkP,EAAUe,iBACpE3N,KAAKqS,mBAAmBK,WAAiB9E,EAAS8E,WAClD1S,KAAKqS,mBAAmBM,eAAiB/E,EAAS+E,eAClD3S,KAAKqS,mBAAmBO,eAAiBhF,EAASgF,eAElD5S,KAAKkN,aAAelN,KAAKoN,UAAUU,UAAUF,EAASG,UAAYnB,EAAUe,iBAC5E3N,KAAKiN,aAAejN,KAAKkN,aAGtB,UACHlN,KAAKmP,UAAqB,KAC1BnP,KAAKoP,kBAAqB,KAC1BpP,KAAKsP,gBAAqB,KAC1BtP,KAAKuP,gBAAqB,KAC1BvP,KAAK6S,kBAAqB,KAC1B7S,KAAKyP,mBAAqB,KAGvB,OACHzP,KAAK+O,eAAiB/O,KAAKyM,SAE3BzM,KAAKiO,eAAoBjO,KAAKuM,WAAoB,QAClDvM,KAAKkO,cAAoBlO,KAAKuM,WAAsB,UACpDvM,KAAKmO,kBAAoBnO,KAAKuM,WAA0B,cACxDvM,KAAKoO,cAAoBpO,KAAKuM,WAAmB,OAEjDvM,KAAKqO,eAAiBrO,KAAKwM,UAAoB,SAC/CxM,KAAKsO,aAAiBtO,KAAKwM,UAAkB,OAC7CxM,KAAKuO,eAAiBvO,KAAKwM,UAAoB,SAC/CxM,KAAKwO,cAAiBxO,KAAKwM,UAAmB,QAC9CxM,KAAKyO,eAAiBzO,KAAKwM,UAAoB,SAC/CxM,KAAK0O,cAAiB1O,KAAKwM,UAAmB,QAE9CxM,KAAK6O,uBAAuBlD,eAAe,GAAGM,YAAcjM,KAAKqO,eAAeuB,SAChF5P,KAAK6O,uBAAuBhD,YAAY,GAAGxB,OAAiB,SAC5DrK,KAAK6O,uBAAuBhD,YAAY,GAAGG,eAAiB,EAC5DhM,KAAK6O,uBAAuBhD,YAAY,GAAGnH,OAAiB,EAC5D1E,KAAK6O,uBAAuBlD,eAAe,GAAGQ,WAAc,CAACnM,KAAK6O,uBAAuBhD,YAAY,IAErG7L,KAAK6O,uBAAuBlD,eAAe,GAAGM,YAAcjM,KAAKsO,aAAasB,SAC9E5P,KAAK6O,uBAAuBhD,YAAY,GAAGxB,OAAiB,SAC5DrK,KAAK6O,uBAAuBhD,YAAY,GAAGG,eAAiB,EAC5DhM,KAAK6O,uBAAuBhD,YAAY,GAAGnH,OAAiB,EAC5D1E,KAAK6O,uBAAuBlD,eAAe,GAAGQ,WAAc,CAACnM,KAAK6O,uBAAuBhD,YAAY,IAErG7L,KAAK6O,uBAAuBlD,eAAe,GAAGM,YAAcjM,KAAKuO,eAAeqB,SAChF5P,KAAK6O,uBAAuBhD,YAAY,GAAGxB,OAAiB,SAC5DrK,KAAK6O,uBAAuBhD,YAAY,GAAGG,eAAiB,EAC5DhM,KAAK6O,uBAAuBhD,YAAY,GAAGnH,OAAiB,EAC5D1E,KAAK6O,uBAAuBlD,eAAe,GAAGQ,WAAc,CAACnM,KAAK6O,uBAAuBhD,YAAY,IAErG7L,KAAK6O,uBAAuBlD,eAAe,GAAGM,YAAcjM,KAAKwO,cAAcoB,SAC/E5P,KAAK6O,uBAAuBhD,YAAY,GAAGxB,OAAiB,SAC5DrK,KAAK6O,uBAAuBhD,YAAY,GAAGG,eAAiB,EAC5DhM,KAAK6O,uBAAuBhD,YAAY,GAAGnH,OAAiB,EAC5D1E,KAAK6O,uBAAuBlD,eAAe,GAAGQ,WAAc,CAACnM,KAAK6O,uBAAuBhD,YAAY,IAErG7L,KAAK6O,uBAAuBlD,eAAe,GAAGM,YAAcjM,KAAKyO,eAAemB,SAChF5P,KAAK6O,uBAAuBhD,YAAY,GAAGxB,OAAiB,SAC5DrK,KAAK6O,uBAAuBhD,YAAY,GAAGG,eAAiB,EAC5DhM,KAAK6O,uBAAuBhD,YAAY,GAAGnH,OAAiB,EAC5D1E,KAAK6O,uBAAuBlD,eAAe,GAAGQ,WAAc,CAACnM,KAAK6O,uBAAuBhD,YAAY,IAErG7L,KAAK6O,uBAAuBgB,kBAAgC,EAC5D7P,KAAK6O,uBAAuB9C,YAAgC,SAExD/L,KAAKoO,eAAiBpO,KAAKmO,kBAC3BnO,KAAKoP,kBAAoBpP,KAAK8O,eAAegB,oBACV,CAC3BC,QAAqC,CACjC,CACIC,QAAS,EACTC,WAAYC,eAAenP,OAC3BsL,KAAM,kBAEV,CACI2D,QAAS,EACTC,WAAYC,eAAeC,SAC3B9D,KAAM,kBAEV,CACI2D,QAAS,EACTC,WAAYC,eAAeC,SAC3B9D,KAAM,WAEV,CACI2D,QAAS,EACTC,WAAYC,eAAeC,SAC3B9D,KAAM,WAEV,CACI2D,QAAS,EACTC,WAAYC,eAAeC,SAC3B9D,KAAM,kBACN+D,kBAAkB,EAClBC,cAAc,EACdC,cAAe,KACfC,qBAAsB,SAE1B,CACIP,QAAS,EACTC,WAAYC,eAAeC,SAC3B9D,KAAM,kBACN+D,kBAAkB,EAClBC,cAAc,EACdC,cAAc,KACdC,qBAAsB,SAE1B,CACIP,QAAS,EACTC,WAAYC,eAAeC,SAC3B9D,KAAM,kBACN+D,kBAAkB,EAClBC,cAAc,EACdC,cAAc,KACdC,qBAAsB,SAE1B,CACIP,QAAS,EACTC,WAAYC,eAAeC,SAC3B9D,KAAM,kBACN+D,kBAAkB,EAClBC,cAAc,EACdC,cAAe,OACfC,qBAAsB,YAOtCvQ,KAAKoP,kBAAoBpP,KAAK8O,eAAegB,oBACV,CAC3BC,QAAqC,CACjC,CACIC,QAAS,EACTC,WAAYC,eAAenP,OAC3BsL,KAAM,kBAEV,CACI2D,QAAS,EACTC,WAAYC,eAAeC,SAC3B9D,KAAM,kBAEV,CACI2D,QAAS,EACTC,WAAYC,eAAeC,SAC3B9D,KAAM,WAEV,CACI2D,QAAS,EACTC,WAAYC,eAAeC,SAC3B9D,KAAM,kBACN+D,kBAAkB,EAClBC,cAAc,EACdC,cAAe,KACfC,qBAAsB,SAE1B,CACIP,QAAS,EACTC,WAAYC,eAAeC,SAC3B9D,KAAM,kBACN+D,kBAAkB,EAClBC,cAAc,EACdC,cAAe,KACfC,qBAAsB,YAO1CvQ,KAAKsP,gBAAkBtP,KAAK8O,eAAe0B,wBACT,CAC1BC,iBAAyC,CACrCzQ,KAAK8O,eAAe4B,mBACpB1Q,KAAK8O,eAAe6B,iBACpB3Q,KAAKoP,kBACLpP,KAAK8O,eAAegE,sBAKhC9S,KAAKmP,UAAYnP,KAAK8O,eAAe8B,qBAAqB5Q,KAAKsP,gBAAiBtP,KAAK+O,eAC3B/O,KAAK6O,uBAAwB7O,KAAK0M,QAE5F1M,KAAK6S,kBACD7S,KAAK8O,eAAe+B,qBAAqB7Q,KAAKqS,mBAAmB/P,KAAM,EAAmB0F,SACjDnH,eAAeW,SAAWX,eAAeiQ,SACtF9Q,KAAKyP,mBACDzP,KAAK8O,eAAe+B,qBAAqB7Q,KAAK2O,oBAAoBrM,KAAM,EAAoB0F,SACnDnH,eAAeW,SAAWX,eAAeiQ,SAIlF9Q,KAAKoO,eAAiBpO,KAAKmO,kBAC3BnO,KAAKuP,gBAAkBvP,KAAK8O,eAAeiC,cACd,CACrBC,OAAQhR,KAAKoP,kBACbW,QAA+B,CAC3B,CACIC,QAAS,EACTiB,SAA6B,CACzB1Q,OAAQP,KAAK6S,kBACbnO,OAAQ,IAGhB,CACIsL,QAAS,EACTiB,SAA6B,CACzB1Q,OAAQP,KAAKyP,mBACb/K,OAAQ,IAGhB,CACIsL,QAAS,EACTiB,SAAUjR,KAAKmO,kBAAkB+C,SAErC,CACIlB,QAAS,EACTiB,SAAUjR,KAAKoO,cAAc8C,SAEjC,CACIlB,QAAS,EACTiB,SAAUjR,KAAKiO,eAAekD,aAElC,CACInB,QAAS,EACTiB,SAAUjR,KAAKkO,cAAciD,aAEjC,CACInB,QAAS,EACTiB,SAAUjR,KAAKmO,kBAAkBgD,aAErC,CACInB,QAAS,EACTiB,SAAUjR,KAAKoO,cAAc+C,gBAM7CnR,KAAKuP,gBAAkBvP,KAAK8O,eAAeiC,cACd,CACrBC,OAAQhR,KAAKoP,kBACbW,QAA+B,CAC3B,CACIC,QAAS,EACTiB,SAA6B,CACzB1Q,OAAQP,KAAK6S,kBACbnO,OAAQ,IAGhB,CACIsL,QAAS,EACTiB,SAA6B,CACzB1Q,OAAQP,KAAKyP,mBACb/K,OAAQ,IAGhB,CACIsL,QAAS,EACTiB,SAAUjR,KAAKiO,eAAeiD,SAElC,CACIlB,QAAS,EACTiB,SAAUjR,KAAKiO,eAAekD,aAElC,CACInB,QAAS,EACTiB,SAAUjR,KAAKkO,cAAciD,gBAOjDnR,KAAK8O,eAAerN,cAAczB,KAAKyP,mBAAoB,EAAG,EAAoBzH,SAChDhI,KAAK2O,oBAAoBrM,MAC3DtC,KAAK8O,eAAerN,cAAczB,KAAK6S,kBAAmB,EAAG,EAAmB7K,SAC9ChI,KAAKqS,mBAAmB/P,MAGvD,OACH,GAAyB,GAArBtC,KAAKkN,aACL,OAGJ,MAAMmE,EAAOrR,KAAK8O,eAAewC,WAYjC,GAXAD,EAAKE,YAAYvR,KAAKmP,WACtBkC,EAAKG,aAAa,EAAGxR,KAAK8O,eAAe2C,kBACzCJ,EAAKG,aAAa,EAAGxR,KAAK8O,eAAe4C,gBACzCL,EAAKG,aAAa,EAAGxR,KAAKuP,iBAC1B8B,EAAKM,gBAAgB,EAAG3R,KAAKqO,eAAe9N,QAC5C8Q,EAAKM,gBAAgB,EAAG3R,KAAKsO,aAAa/N,QAC1C8Q,EAAKM,gBAAgB,EAAG3R,KAAKuO,eAAehO,QAC5C8Q,EAAKM,gBAAgB,EAAG3R,KAAKwO,cAAcjO,QAC3C8Q,EAAKM,gBAAgB,EAAG3R,KAAKyO,eAAelO,QAC5C8Q,EAAKO,eAAe5R,KAAK0O,cAAcnO,OAAQ,GAE3CP,KAAKsS,2BACL,IAAK,IAAInV,EAAc,EAAGA,EAAI6C,KAAKkN,eAAgB/P,EAAG,CAClD,MAAMuH,EAAmB,KAAOvH,EAAI6C,KAAKmN,gBACzCkE,EAAKG,aAAa,EAAGxR,KAAK8O,eAAeiE,kBAAkB,GAAI,CAACrO,IAChE2M,EAAKQ,YAAY7R,KAAK0O,cAAcrO,gBAAiB,EAAG,EAAG,EAAG,QAIlE,IAAK,IAAIlD,EAAc,EAAGA,EAAI6C,KAAKkN,eAAgB/P,EAC/CkU,EAAKG,aAAa,EAAGxR,KAAK8O,eAAeiE,kBAAkB5V,EAAI6C,KAAKmN,iBACpEkE,EAAKQ,YAAY7R,KAAK0O,cAAcrO,gBAAiB,EAAG,EAAG,EAAG,GAKnE,0BAA0B0H,IAE1B,sBAAsBsF,EAAUC,EAAUC,EACpBC,EAAcC,EAAcC,EAC5BrH,EAAcC,EAAajC,GACpDA,GAASrE,KAAKmN,eACdnN,KAAK8O,eAAe7I,SAAS5B,GAAOwB,cAAc,GAAKwH,EACvDrN,KAAK8O,eAAe7I,SAAS5B,GAAOwB,cAAc,GAAKyH,EACvDtN,KAAK8O,eAAe7I,SAAS5B,GAAOwB,cAAc,GAAK0H,EACvDvN,KAAK8O,eAAe7I,SAAS5B,GAAO0B,aAAa,GAAMyH,EACvDxN,KAAK8O,eAAe7I,SAAS5B,GAAO0B,aAAa,GAAM0H,EACvDzN,KAAK8O,eAAe7I,SAAS5B,GAAO0B,aAAa,GAAM2H,EACvD1N,KAAK8O,eAAe7I,SAAS5B,GAAOgC,MAAmBA,EACvDrG,KAAK8O,eAAe7I,SAAS5B,GAAOiC,KAAmBA,GAQxD,MAAM,UAAqC,EAuC9C,YAAYlG,EAA4B4M,EAA8BX,EAAkB3O,EAAiBuM,GACrG7H,MAAMiK,EAAM3O,EAAMuM,EAAO+C,GAtCtB,KAAAqF,mBAAmD,IAAI,EACvD,KAAA1D,oBAAqD,IAAI,EACzD,KAAA1I,SAA2B,IAAIpC,MAE/B,KAAAoK,eAA0C,KAC1C,KAAAC,cAAyC,KACzC,KAAAC,kBAA6C,KAC7C,KAAAC,cAAyC,KAEzC,KAAAC,eAAyC,KACzC,KAAAC,aAAuC,KACvC,KAAAC,eAAyC,KACzC,KAAAC,cAAwC,KACxC,KAAAC,eAAyC,KAEzC,KAAAC,cAAwC,KAEvC,KAAAG,uBAA+D,KAiB/D,KAAAE,eAA0C,KAC1C,KAAAD,eAA0C,KAI9C9O,KAAKgP,UAAY,EAEjBhP,KAAK8O,eAAiB1O,EACtBJ,KAAK6O,uBAAyB,IAAI,EAElC7O,KAAK2O,oBAAoBM,UAAiB,EAC1CjP,KAAK2O,oBAAoBO,eAAiB,GAE1C,MAAMtB,EAAmCC,GAAUnQ,EAAOkP,EAAUoG,+BACpEhT,KAAKqS,mBAAmBK,WAAiB9E,EAAS8E,WAClD1S,KAAKqS,mBAAmBM,eAAiB/E,EAAS+E,eAClD3S,KAAKqS,mBAAmBO,eAAiBhF,EAASgF,eAElD5S,KAAKgP,UAAYhC,EAASc,UAAUF,EAASG,UAAYnB,EAAUe,iBACnE3N,KAAKiG,SAAW9G,EAAWa,KAAKgP,UAAW,IAAM,IAAI,GAGlD,OACmB,GAAlBhP,KAAKgP,YAIThP,KAAK+O,eAAiB/O,KAAKyM,SAE3BzM,KAAKiO,eAAoBjO,KAAKuM,WAAoB,QAClDvM,KAAKkO,cAAoBlO,KAAKuM,WAAsB,UACpDvM,KAAKmO,kBAAoBnO,KAAKuM,WAA0B,cACxDvM,KAAKoO,cAAoBpO,KAAKuM,WAAmB,OAEjDvM,KAAKqO,eAAiBrO,KAAKwM,UAAoB,SAC/CxM,KAAKsO,aAAiBtO,KAAKwM,UAAkB,OAC7CxM,KAAKuO,eAAiBvO,KAAKwM,UAAoB,SAC/CxM,KAAKwO,cAAiBxO,KAAKwM,UAAmB,QAC9CxM,KAAKyO,eAAiBzO,KAAKwM,UAAoB,SAC/CxM,KAAK0O,cAAiB1O,KAAKwM,UAAmB,QAE9CxM,KAAKiT,gBACDjT,KAAK8O,eAAevN,aAAa,EAAQyG,SAAWhI,KAAKgP,UACxBnO,eAAeE,OAASF,eAAeW,UAE5ExB,KAAK6O,uBAAuBlD,eAAe,GAAGM,YAAcjM,KAAKqO,eAAeuB,SAChF5P,KAAK6O,uBAAuBhD,YAAY,GAAGxB,OAAiB,SAC5DrK,KAAK6O,uBAAuBhD,YAAY,GAAGG,eAAiB,EAC5DhM,KAAK6O,uBAAuBhD,YAAY,GAAGnH,OAAiB,EAC5D1E,KAAK6O,uBAAuBlD,eAAe,GAAGQ,WAAc,CAACnM,KAAK6O,uBAAuBhD,YAAY,IAErG7L,KAAK6O,uBAAuBlD,eAAe,GAAGM,YAAcjM,KAAKsO,aAAasB,SAC9E5P,KAAK6O,uBAAuBhD,YAAY,GAAGxB,OAAiB,SAC5DrK,KAAK6O,uBAAuBhD,YAAY,GAAGG,eAAiB,EAC5DhM,KAAK6O,uBAAuBhD,YAAY,GAAGnH,OAAiB,EAC5D1E,KAAK6O,uBAAuBlD,eAAe,GAAGQ,WAAc,CAACnM,KAAK6O,uBAAuBhD,YAAY,IAErG7L,KAAK6O,uBAAuBlD,eAAe,GAAGM,YAAcjM,KAAKuO,eAAeqB,SAChF5P,KAAK6O,uBAAuBhD,YAAY,GAAGxB,OAAiB,SAC5DrK,KAAK6O,uBAAuBhD,YAAY,GAAGG,eAAiB,EAC5DhM,KAAK6O,uBAAuBhD,YAAY,GAAGnH,OAAiB,EAC5D1E,KAAK6O,uBAAuBlD,eAAe,GAAGQ,WAAc,CAACnM,KAAK6O,uBAAuBhD,YAAY,IAErG7L,KAAK6O,uBAAuBlD,eAAe,GAAGM,YAAcjM,KAAKwO,cAAcoB,SAC/E5P,KAAK6O,uBAAuBhD,YAAY,GAAGxB,OAAiB,SAC5DrK,KAAK6O,uBAAuBhD,YAAY,GAAGG,eAAiB,EAC5DhM,KAAK6O,uBAAuBhD,YAAY,GAAGnH,OAAiB,EAC5D1E,KAAK6O,uBAAuBlD,eAAe,GAAGQ,WAAc,CAACnM,KAAK6O,uBAAuBhD,YAAY,IAErG7L,KAAK6O,uBAAuBlD,eAAe,GAAGM,YAAcjM,KAAKyO,eAAemB,SAChF5P,KAAK6O,uBAAuBhD,YAAY,GAAGxB,OAAiB,SAC5DrK,KAAK6O,uBAAuBhD,YAAY,GAAGG,eAAiB,EAC5DhM,KAAK6O,uBAAuBhD,YAAY,GAAGnH,OAAiB,EAAQwO,SAAS,iBAC7ElT,KAAK6O,uBAAuBlD,eAAe,GAAGQ,WAAc,CAACnM,KAAK6O,uBAAuBhD,YAAY,IAErG7L,KAAK6O,uBAAuBlD,eAAe,GAAGM,YAAc,EAAQjE,SACpEhI,KAAK6O,uBAAuBhD,YAAY,GAAGxB,OAAiB,SAC5DrK,KAAK6O,uBAAuBhD,YAAY,GAAGG,eAAiB,EAC5DhM,KAAK6O,uBAAuBhD,YAAY,GAAGnH,OAAiB,EAE5D1E,KAAK6O,uBAAuBhD,YAAY,GAAGxB,OAAiB,QAC5DrK,KAAK6O,uBAAuBhD,YAAY,GAAGG,eAAiB,EAC5DhM,KAAK6O,uBAAuBhD,YAAY,GAAGnH,OAAiB,EAAQwO,SAAS,SAE7ElT,KAAK6O,uBAAuBhD,YAAY,GAAGxB,OAAiB,SAC5DrK,KAAK6O,uBAAuBhD,YAAY,GAAGG,eAAiB,EAC5DhM,KAAK6O,uBAAuBhD,YAAY,GAAGnH,OAAiB,EAAQwO,SAAS,gBAE7ElT,KAAK6O,uBAAuBhD,YAAY,GAAGxB,OAAiB,QAC5DrK,KAAK6O,uBAAuBhD,YAAY,GAAGG,eAAiB,EAC5DhM,KAAK6O,uBAAuBhD,YAAY,GAAGnH,OAAiB,EAAQwO,SAAS,QAE7ElT,KAAK6O,uBAAuBlD,eAAe,GAAGQ,WAAcnM,KAAK6O,uBAAuBhD,YAAYjF,MAAM,EAAG,GAC7G5G,KAAK6O,uBAAuBlD,eAAe,GAAGO,SAAc,WAE5DlM,KAAK6O,uBAAuBgB,kBAAgC,EAC5D7P,KAAK6O,uBAAuB9C,YAAgC,SAExD/L,KAAKoO,eAAiBpO,KAAKmO,kBAC3BnO,KAAKoP,kBAAoBpP,KAAK8O,eAAegB,oBACV,CAC3BC,QAAqC,CACjC,CACIC,QAAS,EACTC,WAAYC,eAAenP,OAC3BsL,KAAM,kBAEV,CACI2D,QAAS,EACTC,WAAYC,eAAeC,SAC3B9D,KAAM,kBAEV,CACI2D,QAAS,EACTC,WAAYC,eAAeC,SAC3B9D,KAAM,WAEV,CACI2D,QAAS,EACTC,WAAYC,eAAeC,SAC3B9D,KAAM,WAEV,CACI2D,QAAS,EACTC,WAAYC,eAAeC,SAC3B9D,KAAM,kBACN+D,kBAAkB,EAClBC,cAAc,EACdC,cAAe,KACfC,qBAAsB,SAE1B,CACIP,QAAS,EACTC,WAAYC,eAAeC,SAC3B9D,KAAM,kBACN+D,kBAAkB,EAClBC,cAAc,EACdC,cAAc,KACdC,qBAAsB,SAE1B,CACIP,QAAS,EACTC,WAAYC,eAAeC,SAC3B9D,KAAM,kBACN+D,kBAAkB,EAClBC,cAAc,EACdC,cAAc,KACdC,qBAAsB,SAE1B,CACIP,QAAS,EACTC,WAAYC,eAAeC,SAC3B9D,KAAM,kBACN+D,kBAAkB,EAClBC,cAAc,EACdC,cAAe,OACfC,qBAAsB,YAOtCvQ,KAAKoP,kBAAoBpP,KAAK8O,eAAegB,oBACV,CAC3BC,QAAqC,CACjC,CACIC,QAAS,EACTC,WAAYC,eAAenP,OAC3BsL,KAAM,kBAEV,CACI2D,QAAS,EACTC,WAAYC,eAAeC,SAC3B9D,KAAM,kBAEV,CACI2D,QAAS,EACTC,WAAYC,eAAeC,SAC3B9D,KAAM,WAEV,CACI2D,QAAS,EACTC,WAAYC,eAAeC,SAC3B9D,KAAM,kBACN+D,kBAAkB,EAClBC,cAAc,EACdC,cAAc,KACdC,qBAAsB,SAE1B,CACIP,QAAS,EACTC,WAAYC,eAAeC,SAC3B9D,KAAM,kBACN+D,kBAAkB,EAClBC,cAAc,EACdC,cAAc,KACdC,qBAAsB,YAO1CvQ,KAAKqP,gBAAkBrP,KAAK8O,eAAegB,oBACR,CAC3BC,QAAqC,CACjC,CACIC,QAAS,EACTC,WAAYC,eAAenP,OAC3BsL,KAAM,qBAMtBrM,KAAKsP,gBAAkBtP,KAAK8O,eAAe0B,wBACT,CAC1BC,iBAAyC,CACrCzQ,KAAK8O,eAAe4B,mBACpB1Q,KAAK8O,eAAe6B,iBACpB3Q,KAAKoP,kBACLpP,KAAKqP,mBAKjBrP,KAAKmP,UAAYnP,KAAK8O,eAAe8B,qBACjC5Q,KAAKsP,gBACLtP,KAAK+O,eACL/O,KAAK6O,uBACL7O,KAAK0M,QAGT1M,KAAK6S,kBACD7S,KAAK8O,eAAe+B,qBAAqB7Q,KAAKqS,mBAAmB/P,KAAM,EAAmB0F,SACjDnH,eAAeW,SAAWX,eAAeiQ,SACtF9Q,KAAKyP,mBACDzP,KAAK8O,eAAe+B,qBAAqB7Q,KAAK2O,oBAAoBrM,KAAM,EAAoB0F,SACnDnH,eAAeW,SAAWX,eAAeiQ,SAIlF9Q,KAAKoO,eAAiBpO,KAAKmO,kBAC3BnO,KAAKuP,gBAAkBvP,KAAK8O,eAAeiC,cACd,CACrBC,OAAQhR,KAAKoP,kBACbW,QAA+B,CAC3B,CACIC,QAAS,EACTiB,SAA6B,CACzB1Q,OAAQP,KAAK6S,kBACbnO,OAAQ,IAGhB,CACIsL,QAAS,EACTiB,SAA6B,CACzB1Q,OAAQP,KAAKyP,mBACb/K,OAAQ,IAGhB,CACIsL,QAAS,EACTiB,SAAUjR,KAAKmO,kBAAkB+C,SAErC,CACIlB,QAAS,EACTiB,SAAUjR,KAAKoO,cAAc8C,SAEjC,CACIlB,QAAS,EACTiB,SAAUjR,KAAKiO,eAAekD,aAElC,CACInB,QAAS,EACTiB,SAAUjR,KAAKkO,cAAciD,aAEjC,CACInB,QAAS,EACTiB,SAAUjR,KAAKmO,kBAAkBgD,aAErC,CACInB,QAAS,EACTiB,SAAUjR,KAAKoO,cAAc+C,gBAM7CnR,KAAKuP,gBAAkBvP,KAAK8O,eAAeiC,cACd,CACrBC,OAAQhR,KAAKoP,kBACbW,QAA+B,CAC3B,CACIC,QAAS,EACTiB,SAA6B,CACzB1Q,OAAQP,KAAK6S,kBACbnO,OAAQ,IAGhB,CACIsL,QAAS,EACTiB,SAA6B,CACzB1Q,OAAQP,KAAKyP,mBACb/K,OAAQ,IAGhB,CACIsL,QAAS,EACTiB,SAAUjR,KAAKiO,eAAeiD,SAElC,CACIlB,QAAS,EACTiB,SAAUjR,KAAKiO,eAAekD,aAElC,CACInB,QAAS,EACTiB,SAAUjR,KAAKkO,cAAciD,gBAOjDnR,KAAK8O,eAAerN,cAAczB,KAAKyP,mBAAoB,EAAG,EAAoBzH,SAChDhI,KAAK2O,oBAAoBrM,MAC3DtC,KAAK8O,eAAerN,cAAczB,KAAK6S,kBAAmB,EAAG,EAAmB7K,SAC9ChI,KAAKqS,mBAAmB/P,OAGvD,kBAEA,OACH,GAAsB,GAAlBtC,KAAKgP,UACL,OAGJhP,KAAK8O,eAAerN,cAAczB,KAAKiT,gBAAiB,EAAG,EAAQjL,SAAWhI,KAAKgP,UACjD,IAAI/N,aAAa,EAAQkS,QAAQnT,KAAKiG,YAExE,MAAMoL,EAAOrR,KAAK8O,eAAewC,WACjCD,EAAKE,YAAYvR,KAAKmP,WACtBkC,EAAKG,aAAa,EAAGxR,KAAK8O,eAAe2C,kBACzCJ,EAAKG,aAAa,EAAGxR,KAAK8O,eAAe4C,gBACzCL,EAAKG,aAAa,EAAGxR,KAAKuP,iBAC1B8B,EAAKM,gBAAgB,EAAG3R,KAAKqO,eAAe9N,QAC5C8Q,EAAKM,gBAAgB,EAAG3R,KAAKsO,aAAa/N,QAC1C8Q,EAAKM,gBAAgB,EAAG3R,KAAKuO,eAAehO,QAC5C8Q,EAAKM,gBAAgB,EAAG3R,KAAKwO,cAAcjO,QAC3C8Q,EAAKM,gBAAgB,EAAG3R,KAAKyO,eAAelO,QAC5C8Q,EAAKM,gBAAgB,EAAG3R,KAAKiT,iBAC7B5B,EAAKO,eAAe5R,KAAK0O,cAAcnO,OAAQ,GAC/C8Q,EAAKQ,YAAY7R,KAAK0O,cAAcrO,gBAAiBL,KAAKgP,UAAW,EAAG,EAAG,GAGxE,0BAA0BjH,IAE1B,sBAAsBsF,EAAUC,EAAUC,EACpBC,EAAcC,EAAcC,EAC5BrH,EAAcC,EAAajC,GACpDrE,KAAKiG,SAAS5B,GAAOwB,cAAc,GAAKwH,EACxCrN,KAAKiG,SAAS5B,GAAOwB,cAAc,GAAKyH,EACxCtN,KAAKiG,SAAS5B,GAAOwB,cAAc,GAAK0H,EACxCvN,KAAKiG,SAAS5B,GAAO0B,aAAa,GAAMyH,EACxCxN,KAAKiG,SAAS5B,GAAO0B,aAAa,GAAM0H,EACxCzN,KAAKiG,SAAS5B,GAAO0B,aAAa,GAAM2H,EACxC1N,KAAKiG,SAAS5B,GAAOgC,MAAmBA,EACxCrG,KAAKiG,SAAS5B,GAAOiC,KAAmBA,EAGrC,UACHtG,KAAKmP,UAAqB,KAC1BnP,KAAKoP,kBAAqB,KAC1BpP,KAAKqP,gBAAqB,KAC1BrP,KAAKsP,gBAAqB,KAC1BtP,KAAKuP,gBAAqB,KAC1BvP,KAAKwP,cAAqB,KAC1BxP,KAAK6S,kBAAqB,KAC1B7S,KAAKyP,mBAAqB,KAC1BzP,KAAKiT,gBAAqB,KAC1BjT,KAAKiG,SAAS5E,OAAY,GAO3B,MAAM,UAA2B2M,EAqCpC,YAAY5N,EAA4B4M,EAA8BX,EAAkB3O,EAAiBuM,GACrG7H,MAAMiK,EAAM3O,EAAMuM,GApCf,KAAAgE,eAA0C,KAC1C,KAAAC,cAAyC,KACzC,KAAAC,kBAA6C,KAC7C,KAAAC,cAAyC,KAEzC,KAAAC,eAAyC,KACzC,KAAAC,aAAuC,KACvC,KAAAC,eAAyC,KAEzC,KAAAG,cAAwC,KAExC,KAAAC,oBAAqD,IAAI,EACzD,KAAAyE,WAAmC,IAAI,EACvC,KAAAxE,gBAA6C,IAAI,EAEhD,KAAAC,uBAA+D,KAc/D,KAAAC,eAA0C,KAC1C,KAAAC,eAA0C,KAC1C,KAAA3B,UAAgC,KAMpCpN,KAAKgP,UAAY,EAEjBhP,KAAK8O,eAAiB1O,EACtBJ,KAAKoN,UAAiBJ,EAEtBhN,KAAK6O,uBAAyB,IAAI,EAElC7O,KAAK2O,oBAAoBM,UAAiB,GAC1CjP,KAAK2O,oBAAoBO,eAAiB,EAGvC,UACHlP,KAAKmP,UAAqB,KAC1BnP,KAAKoP,kBAAqB,KAC1BpP,KAAKqP,gBAAqB,KAC1BrP,KAAKsP,gBAAqB,KAC1BtP,KAAKuP,gBAAqB,KAC1BvP,KAAKwP,cAAqB,KAC1BxP,KAAKyP,mBAAqB,KAC1BzP,KAAK8R,YAAqB,KAC1B9R,KAAKqT,YAAqB,KAGvB,OACHrT,KAAK+O,eAAiB/O,KAAKyM,SAE3BzM,KAAKiO,eAAoBjO,KAAKuM,WAAoB,QAClDvM,KAAKkO,cAAoBlO,KAAKuM,WAAsB,UACpDvM,KAAKmO,kBAAoBnO,KAAKuM,WAA0B,cACxDvM,KAAKoO,cAAoBpO,KAAKuM,WAAmB,OAEjDvM,KAAKqO,eAAiBrO,KAAKwM,UAAoB,SAC/CxM,KAAKsO,aAAiBtO,KAAKwM,UAAkB,OAC7CxM,KAAKuO,eAAiBvO,KAAKwM,UAAoB,SAC/CxM,KAAK0O,cAAiB1O,KAAKwM,UAAmB,QAE9CxM,KAAK6O,uBAAuBlD,eAAe,GAAGM,YAAcjM,KAAKqO,eAAeuB,SAChF5P,KAAK6O,uBAAuBhD,YAAY,GAAGxB,OAAiB,SAC5DrK,KAAK6O,uBAAuBhD,YAAY,GAAGG,eAAiB,EAC5DhM,KAAK6O,uBAAuBhD,YAAY,GAAGnH,OAAiB,EAC5D1E,KAAK6O,uBAAuBlD,eAAe,GAAGQ,WAAc,CAACnM,KAAK6O,uBAAuBhD,YAAY,IAErG7L,KAAK6O,uBAAuBlD,eAAe,GAAGM,YAAcjM,KAAKsO,aAAasB,SAC9E5P,KAAK6O,uBAAuBhD,YAAY,GAAGxB,OAAiB,SAC5DrK,KAAK6O,uBAAuBhD,YAAY,GAAGG,eAAiB,EAC5DhM,KAAK6O,uBAAuBhD,YAAY,GAAGnH,OAAiB,EAC5D1E,KAAK6O,uBAAuBlD,eAAe,GAAGQ,WAAc,CAACnM,KAAK6O,uBAAuBhD,YAAY,IAErG7L,KAAK6O,uBAAuBlD,eAAe,GAAGM,YAAcjM,KAAKuO,eAAeqB,SAChF5P,KAAK6O,uBAAuBhD,YAAY,GAAGxB,OAAiB,SAC5DrK,KAAK6O,uBAAuBhD,YAAY,GAAGG,eAAiB,EAC5DhM,KAAK6O,uBAAuBhD,YAAY,GAAGnH,OAAiB,EAC5D1E,KAAK6O,uBAAuBlD,eAAe,GAAGQ,WAAc,CAACnM,KAAK6O,uBAAuBhD,YAAY,IAErG7L,KAAK6O,uBAAuBgB,kBAAgC,EAC5D7P,KAAK6O,uBAAuB9C,YAAgC,SAE5D/L,KAAKoP,kBAAoBpP,KAAK8O,eAAegB,oBACV,CAC3BC,QAAqC,CACjC,CACIC,QAAS,EACTC,WAAYC,eAAeC,SAC3B9D,KAAM,kBAEV,CACI2D,QAAS,EACTC,WAAYC,eAAeC,SAC3B9D,KAAM,WAEV,CACI2D,QAAS,EACTC,WAAYC,eAAeC,SAC3B9D,KAAM,kBACN+D,kBAAkB,EAClBC,cAAc,EACdC,cAAc,KACdC,qBAAsB,YAMtCvQ,KAAKqP,gBAAkBrP,KAAK8O,eAAegB,oBACR,CAC3BC,QAAqC,CACjC,CACIC,QAAS,EACTC,WAAYC,eAAenP,OAC3BsL,KAAM,kBAEV,CACI2D,QAAS,EACTC,WAAYC,eAAenP,OAC3BsL,KAAM,qBAMtBrM,KAAKsP,gBAAkBtP,KAAK8O,eAAe0B,wBACT,CAC1BC,iBAAyC,CACrCzQ,KAAK8O,eAAe4B,mBACpB1Q,KAAK8O,eAAe6B,iBACpB3Q,KAAKoP,kBACLpP,KAAKqP,mBAKjBrP,KAAKmP,UAAYnP,KAAK8O,eAAe8B,qBACjC5Q,KAAKsP,gBACLtP,KAAK+O,eACL/O,KAAK6O,uBACL7O,KAAK0M,QAGT1M,KAAKyP,mBACDzP,KAAK8O,eAAe+B,qBAAqB7Q,KAAK2O,oBAAoBrM,KACzB,EAAoB0F,SACpBnH,eAAeW,SAAWX,eAAeiQ,SAEtF9Q,KAAKqT,YACDrT,KAAK8O,eAAe+B,qBAAqB7Q,KAAKoT,WAAW9Q,KAC2D,EAA3EtC,KAAK8O,eAAeiD,2BAA2B/R,KAAKoT,WAAWpL,UAC/DnH,eAAeW,SAAWX,eAAeiQ,SAEtF9Q,KAAK8R,YACD9R,KAAK8O,eAAe+B,qBAAqB7Q,KAAK4O,gBAAgBtM,KACrBtC,KAAK8O,eAAeiD,2BAA2B/R,KAAK4O,gBAAgB5G,UACpEnH,eAAeW,SAAWX,eAAeiQ,SAEtF9Q,KAAKuP,gBAAkBvP,KAAK8O,eAAeiC,cACd,CACrBC,OAAQhR,KAAKoP,kBACbW,QAA+B,CAC3B,CACIC,QAAS,EACTiB,SAA6B,CACzB1Q,OAAQP,KAAKyP,mBACb/K,OAAQ,IAGhB,CACIsL,QAAS,EACTiB,SAAUjR,KAAKiO,eAAeiD,SAElC,CACIlB,QAAS,EACTiB,SAAUjR,KAAKiO,eAAekD,gBAM9CnR,KAAKwP,cAAgBxP,KAAK8O,eAAeiC,cACZ,CACrBC,OAAQhR,KAAKqP,gBACbU,QAA+B,CAC3B,CACIC,QAAS,EACTiB,SAA6B,CACzB1Q,OAAQP,KAAK8R,YACbpN,OAAQ,IAGhB,CACIsL,QAAS,EACTiB,SAA6B,CACzB1Q,OAAQP,KAAKqT,YACb3O,OAAQ,OAO5B1E,KAAK8O,eAAerN,cAAczB,KAAKyP,mBAAoB,EAAG,EAAoBzH,SAChDhI,KAAK2O,oBAAoBrM,MAGxD,iBACHtC,KAAK8O,eAAesC,iBAAiBpR,KAAK8R,YAAa9R,KAAK4O,gBAAgBtM,KACxEtC,KAAK8O,eAAeiD,2BAA2B/R,KAAK4O,gBAAgB5G,WACxEhI,KAAK8O,eAAesC,iBAAiBpR,KAAKqT,YAAarT,KAAKoT,WAAW9Q,KACnEtC,KAAK8O,eAAeiD,2BAA2B/R,KAAKoT,WAAWpL,WAGhE,OACH,MAAMqJ,EAAOrR,KAAK8O,eAAewC,WACjCD,EAAKE,YAAYvR,KAAKmP,WACtBkC,EAAKG,aAAa,EAAGxR,KAAK8O,eAAe2C,kBACzCJ,EAAKG,aAAa,EAAGxR,KAAK8O,eAAe4C,gBACzCL,EAAKG,aAAa,EAAGxR,KAAKuP,iBAC1B8B,EAAKG,aAAa,EAAGxR,KAAKwP,eAC1B6B,EAAKM,gBAAgB,EAAG3R,KAAKqO,eAAe9N,QAC5C8Q,EAAKM,gBAAgB,EAAG3R,KAAKsO,aAAa/N,QAC1C8Q,EAAKM,gBAAgB,EAAG3R,KAAKuO,eAAehO,QAC5C8Q,EAAKO,eAAe5R,KAAK0O,cAAcnO,OAAQ,GAC/C8Q,EAAKQ,YAAY7R,KAAK0O,cAAcrO,gBAAiBL,KAAKgP,UAAW,EAAG,EAAG,GAC3EhP,KAAKgP,UAAY,EAGd,0BAA0BjH,GAC7B/H,KAAK4O,gBAAgB7G,cAAc/H,KAAKgP,WAAajH,EACrD/H,KAAKoT,WAAW9M,KAAKtG,KAAKgP,WAA2BhP,KAAKoN,UAAU3E,EAAE6K,OAAStT,KAAKgP,UAEpFhP,KAAKgP,YAGF,uBAAuB1I,KCxgE3B,MAAMiN,EAOF,+BAA+BC,GAClC,MAAMC,EAAgB,+CAAiDD,EAAM,IAC7E,IAAIE,EAAsB,KAC1B,IAAIC,OAAOC,eAMP,KAAM,6BAIV,GATIF,EAAM,IAAIE,eACNF,EAAIG,kBACJH,EAAIG,iBAAiB,cAK7BH,EAAII,KAAK,MAAON,GAAK,GACrBE,EAAIK,KAAK,MACa,GAAlBL,EAAIM,WACJ,MAAMP,EAEV,OAAOC,EAAIO,aASR,oBAAoBT,EAAaU,GAEpC,IAAIR,EAAsB,KAC1B,IAAIC,OAAOC,eAMP,KAAM,6BALNF,EAAM,IAAIE,eACNF,EAAIG,kBACJH,EAAIG,iBAAiB,6BAK7BH,EAAII,KAAK,MAAON,GAAK,GACrBE,EAAIS,mBAAqB,WACrB,GAAsB,GAAlBT,EAAIM,WAAiB,CACrB,IAAII,EAAO,GAKPC,EAAwB,KAAdX,EAAIY,QAA+B,GAAdZ,EAAIY,OACnCD,IACAD,EAAOV,EAAIO,cAEfC,EAASE,EAAMC,EAAU,KAAO,mBAAqBb,KAG7DE,EAAIK,KAAK,MASN,uBAAuBP,EAAaU,GAEvC,IAAIR,EAAsB,KAC1B,IAAIC,OAAOC,eAGP,KAAM,6BAaV,GAfIF,EAAM,IAAIE,eAIdF,EAAII,KAAK,MAAON,GAAK,GACrBE,EAAIS,mBAAqB,WACrB,GAAsB,GAAlBT,EAAIM,WAAiB,CACrB,IAAIO,OAA2B3O,EAC3ByO,EAAwB,KAAdX,EAAIY,QAA+B,GAAdZ,EAAIY,OACnCD,IACAE,EAAcb,EAAIc,UAEtBN,EAASK,EAAaF,EAAU,KAAO,mBAAqBb,UAG3C5N,IAArB8N,EAAIe,aACJ,KAAM,8BAEVf,EAAIe,aAAe,cACnBf,EAAIK,KAAK,MASN,gBAAgBP,EAAaU,GAEhC,IAAIR,EAAsB,KAC1B,IAAIC,OAAOC,eAMP,KAAM,6BALNF,EAAM,IAAIE,eACNF,EAAIG,kBACJH,EAAIG,iBAAiB,6BAK7BH,EAAII,KAAK,MAAON,GAAK,GACrBE,EAAIS,mBAAqB,WACrB,GAAsB,GAAlBT,EAAIM,WAAiB,CACrB,IAAIU,OAAa9O,EACbyO,EAAwB,KAAdX,EAAIY,QAA+B,GAAdZ,EAAIY,OACvC,GAAID,EACA,IACIK,EAAOC,KAAKC,MAAMlB,EAAIO,cACxB,MAAOY,GACLR,GAAU,EAGlBH,EAASQ,EAAML,EAAU,KAAO,mBAAqBb,KAG7DE,EAAIK,KAAK,O,0SCvCV,MAAM,UAjFN,MAQH,YAAYe,EAA+BC,GACnCD,IACA9U,KAAKgV,sBAAwBF,GAG7BC,IACA/U,KAAKiV,wBAA0BF,GAIvC,uBACI,OAAO/U,KAAKkV,kBAGhB,qBAA4B9W,GACxB4B,KAAKkV,kBAAoB9W,EAG7B,yBACI,OAAO4B,KAAKmV,oBAGhB,uBAA8B/W,GAC1B4B,KAAKmV,oBAAsB/W,EAGxB,WACA,cACM,eAAegX,EAA+BC,G,6CAE3C,c,yCACZ,MAAMC,EAAW,IAAIzR,MAGf0R,EAAa,CAACC,EAAoBC,KACpCH,EAAS/V,KAAK,IAAImW,QAAQ,CAACC,EAASC,KAChCrC,EAAGsC,aAAaL,EAAY,CAACM,EAAgBC,KAKzC,OAJIA,IACAC,QAAQvC,MAAM,0BAA4BsC,GAC1CH,EAAOG,IAEJN,GACH,KAAKQ,EAAkBC,OACnBlW,KAAKkV,kBAAoBY,EACzBH,IACA,MACJ,KAAKM,EAAkBE,SACnBnW,KAAKmV,oBAAsBW,EAC3BH,IACA,MACJ,QACIC,EAAO,sBAAwBH,UAUnD,OAHAF,EAAWvV,KAAKgV,sBAAuBiB,EAAkBC,QACzDX,EAAWvV,KAAKiV,wBAAyBgB,EAAkBE,UAEpDT,QAAQU,IAAId,GACV7R,KAAK,KAAc,GACnB4S,MAAM,KACHL,QAAQvC,MAAM,4BACP,SAevB,YAAYrT,EAAkC0U,EAA+BC,GACzE3S,MAAM0S,EAAsBC,GAHxB,KAAAuB,SAAoC,KAIxCtW,KAAKsW,SAAWlW,EAGb,UACHJ,KAAKuW,oBAAsB,KAC3BvW,KAAKwW,sBAAwB,KAE7BpU,MAAMqD,UAGG,eAAegR,EAA0BpB,G,yCAClD,OAAO,IAAIK,QAAc,CAACC,EAASC,KAC/B5V,KAAK0W,cAAcjT,KAAM4Q,IACjBA,GACArU,KAAKmV,oBAAsBnV,KAAKmV,oBAAoBwB,QAAQ,4BAA6B,IACzF3W,KAAKmV,oBAAsBnV,KAAKmV,oBAAoBwB,QAAQ,2BAA4B,IAEpFF,IACAzW,KAAKmV,oBAAsBnV,KAAKmV,oBAAoBwB,QAAQ,mBAAoBtB,IAGpFrV,KAAKuW,oBAAsBvW,KAAKsW,SAASM,mBAAmBX,EAAkBC,OAAQlW,KAAKkV,mBAC3FlV,KAAKwW,sBAAwBxW,KAAKsW,SAASM,mBAAmBX,EAAkBE,SAAUnW,KAAKmV,qBAC/FQ,MAGAK,QAAQvC,MAAM,kCACdmC,YAMhB,yBACI,OAAO5V,KAAKuW,oBAGhB,2BACI,OAAOvW,KAAKwW,uBCvIpB,MAGMK,EAAyB,CAC3B,+BAAgC,+BAChC,+BAAgC,+BAChC,+BAAgC,gCAG7B,MAAMC,EAQT,YAAYC,GACR/W,KAAKgX,MAAQD,EACb/W,KAAKiX,WAAajX,KAAKgX,MAALhX,aAClBA,KAAKkX,aAAelX,KAAKgX,MAALhX,cACpBA,KAAKmX,mBAAqBnX,KAAKgX,MAALhX,6BAC1BA,KAAKoX,kBAAoBpX,KAAKgX,MAAQ,oBAG1C,gBACI,OAAOhX,KAAKiX,WAGhB,kBACI,OAAOjX,KAAKkX,aAGhB,wBACI,OAAOlX,KAAKmX,mBAGhB,uBACI,OAAOnX,KAAKoX,kBAGT,gBACH,IAAIC,EAAoB,GACxB,IAAK,IAAIla,EAAY,EAAGA,EAAI0Z,EAAWxV,SAAUlE,EAAG,CAChD,MAAMqW,EAAMxT,KAAKgX,MAALhX,aAAsC6W,EAAW1Z,GAC7Dka,EAAQ9X,KAAKiU,GAEjB,OAAO6D,EAGJ,aAAatJ,GAChB,OAAO/N,KAAKiX,WAAalJ,EAAY,O,0SC5CtC,MAAMuJ,EAQT,YAAY5Z,EAAc6Z,EAAyBC,GALzC,KAAAC,OAAc,EACd,KAAAC,QAAe,EAKrB1X,KAAK2M,MAAQjP,EACbsC,KAAK2X,MAAQ9T,MAAM+T,QAAQL,GAAQA,EAAO,CAACA,GAC3CvX,KAAK6X,MAAQL,EAGV,WAEP,WACI,OAAOxX,KAAK2M,MAGT,kBAAkBmL,GACrB,MAAMC,EAAcC,SAASC,cAAc,UAC3CF,EAAYG,MAAQJ,EAAMI,MAC1BH,EAAYI,OAASL,EAAMK,OAE3B,MAAMC,EAAqBL,EAAYM,WAAW,MAClDD,EAAmBE,UAAU,EAAGR,EAAMK,QACtCC,EAAmB/R,MAAM,GAAI,GAC7B+R,EAAmBG,UAAUT,EAAO,EAAG,EAAGA,EAAMI,MAAOJ,EAAMK,QAC7DL,EAAMU,IAAMT,EAAYU,YAGrB,iBAAuBlB,EAAqBmB,G,yCAC/C,OAAO,IAAIhD,QAAQ,CAAOC,EAASC,IAAW,kCAC1C,IAAI+C,EAAkC,GACtC,IAAK,IAAIxb,EAAY,EAAGA,EAAIoa,EAAKlW,SAAUlE,EAAG,CAC1C,MAAMyb,EAAwB,IAAIC,MAClC,IACID,EAAIJ,IAAMjB,EAAKpa,SACTyb,EAAIE,SACNJ,GACApB,EAAQyB,WAAWH,GAEzB,MAAO/D,GACLmB,QAAQvC,MAAM,kCAAoC8D,EAAKpa,IACvDyY,EAAO+C,GAEXA,EAAOpZ,KAAKqZ,GAEhBjD,EAAQgD,UAIN,YAAYC,EAAuBV,EAAiBC,GAC1D,MAAMJ,EAAiCC,SAASC,cAAc,UAC9DF,EAAYG,MAAQU,EAAIV,MACxBH,EAAYI,OAASS,EAAIT,OAEzB,MAAMC,EAA+CL,EAAYM,WAAW,MAC5ED,EAAmBG,UAAUK,EAAK,EAAG,EAAGV,EAAOC,GAE/C,OAD6BC,EAAmBY,aAAa,EAAG,EAAGd,EAAOC,GAIpE,WAAW/Z,GACjB,OAAgC,IAAxBA,EAASA,EAAQ,GAMnB,iBAAiB6a,GACvBA,EAAS5X,OAAS,EAGf,eAEA,eAAeyW,GAClB,MAAMC,EAAcC,SAASC,cAAc,UAC3CF,EAAYG,MAAQJ,EAAMI,MAC1BH,EAAYI,OAASL,EAAMK,OAE3B,MAAMC,EAAqBL,EAAYM,WAAW,MAC9CrY,KAAK6X,QACLO,EAAmBE,UAAU,EAAGR,EAAMK,QACtCC,EAAmB/R,MAAM,GAAI,IAEjC+R,EAAmBG,UAAUT,EAAO,EAAG,EAAGA,EAAMI,MAAOJ,EAAMK,QAC7D,MAAMe,EAAuBd,EAAmBY,aAAa,EAAG,EAAGlB,EAAMI,MAAOJ,EAAMK,QAEtF,IAAI7V,EAA0B,KAE9B,MAAM6W,EAAiD,IAAnCC,KAAKC,KAAmB,EAAdvB,EAAMI,MAAY,KAChD,GAAIiB,GAA6B,EAAdrB,EAAMI,MACrB5V,EAAO4W,EAAU5W,SACd,CACHA,EAAO,IAAIgX,kBAAkBH,EAAcrB,EAAMK,QACjD,IAAIoB,EAAkB,EACtB,IAAK,IAAIjM,EAAI,EAAGA,EAAIwK,EAAMK,SAAU7K,EAChC,IAAK,IAAID,EAAI,EAAGA,EAAIyK,EAAMI,QAAS7K,EAAG,CAClC,IAAIlQ,EAAQ,EAAJkQ,EAAQC,EAAI6L,EACpB7W,EAAKnF,GAAK+b,EAAU5W,KAAKiX,GACzBjX,EAAKnF,EAAI,GAAK+b,EAAU5W,KAAKiX,EAAkB,GAC/CjX,EAAKnF,EAAI,GAAK+b,EAAU5W,KAAKiX,EAAkB,GAC/CjX,EAAKnF,EAAI,GAAK+b,EAAU5W,KAAKiX,EAAkB,GAC/CA,GAAmB,GAK/B,OAAOjX,GAKR,MAAM,UAAsBgV,EAc/B,YAAYlX,EAAkC1C,EAAc6Z,GACxDnV,MAAM1E,EAAMmG,MAAM+T,QAAQL,GAAQA,EAAO,CAACA,IAAO1T,MAAM+T,QAAQL,IAJ3D,KAAAjB,SAAoC,KACpC,KAAAkD,kBAAyC,KAI7CxZ,KAAKyZ,kBAAoB,KACzBzZ,KAAK0Z,sBAAwB7V,MAAM+T,QAAQL,GAAQ,OAAS,KAC5DvX,KAAK2Z,QAAU,aACf3Z,KAAKsW,SAAWlW,EAChBJ,KAAKwZ,kBAAoB,IAAII,EAAoBxZ,GAG9C,UACHJ,KAAK6Z,iBAAiB7Z,KAAK8Z,WAC3B9Z,KAAK6Z,iBAAiB7Z,KAAK+Z,aAC3B/Z,KAAKga,aAAe,KACpBha,KAAKia,SAAe,KACpBja,KAAKka,SAAe,KAGxB,uBACI,OAAOla,KAAKyZ,kBAGhB,2BACI,OAAOzZ,KAAK0Z,sBAGhB,gBACI,OAAO1Z,KAAKia,SAGhB,cACI,OAAOja,KAAKka,SAGhB,kBACI,OAAOla,KAAKga,aAGR,iBACAha,KAAKma,QAAQ9Y,OAAS,IACtBrB,KAAKyX,OAASzX,KAAKma,QAAQ,GAAGjC,MAC9BlY,KAAK0X,QAAU1X,KAAKma,QAAQ,GAAGhC,OAC/BnY,KAAK8Z,UAAY3a,EAAWa,KAAKma,QAAQ9Y,OAAQ,IAAM,OAIlD,c,yCACT,OAAOqU,QAAQC,UAAUlS,KAAK,IAAY,kCAKtC,GAHAzD,KAAKma,cAAgB7C,EAAQ8C,UAAUpa,KAAK2X,MAAO3X,KAAK6X,OACxD7X,KAAKqa,iBAE8B,SAA/Bra,KAAK0Z,sBAAkC,CACvC,MAAMY,EAAmC,CACrCC,UAAWva,KAAKyZ,kBAChBra,KAAwB,CACpB8Y,MAAOlY,KAAKyX,OACZU,OAAQnY,KAAK0X,QACb8C,MAAO,GAEXlR,YAAa,EACbe,OAAQrK,KAAK2Z,QACbc,cAAe,EACfC,MAAOC,gBAAgBnZ,SAAWmZ,gBAAgBC,SAEtD5a,KAAKia,SAAWja,KAAKsW,SAASuE,cAAcP,GAE5C,IAAK,IAAInd,EAAc,EAAGA,EAAI,IAAKA,EAAG,CAClC,IAAK4F,EAAcC,GAAchD,KAAKsW,SAASrT,mBAC3CpC,eAAesC,SAAWtC,eAAeqC,UACzClD,KAAKyX,OAASzX,KAAK0X,QAAU,GAEjC1X,KAAK8Z,UAAU3c,GAAK6C,KAAK8a,eAAe9a,KAAKma,QAAQhd,IACrD,IAAI4d,WAAW/X,GAAYjB,IAAI/B,KAAK8Z,UAAU3c,IAC9C4F,EAAaQ,QAEb,MAAMyX,EAAoChb,KAAKsW,SAAS2E,qBAAqBlY,EAAc,EAAiB,EAAd/C,KAAKyX,OAAYzX,KAAK0X,SAC9GwD,EAAsClb,KAAKsW,SAAS6E,sBACtDnb,KAAKia,SAAU,EACG,CACd5M,EAAG,EACHC,EAAG,EACHC,EAAGpQ,IAGLie,EAA4B,CAC9BlD,MAAOlY,KAAKyX,OACZU,OAAQnY,KAAK0X,QACb8C,MAAO,GAEXxa,KAAKsW,SAAS+E,eAAe9b,KACzBS,KAAKsW,SAASgF,oBAAoBN,EAAgBE,EAAiBE,IAI3E,MAAMG,EAA2C,CAC7ChB,UAAW,OACXlQ,OAAQrK,KAAK2Z,QACb6B,aAAc,EACdf,cAAe,EACfgB,eAAgB,EAChBC,gBAAiB,GAGrB1b,KAAKga,aAAeha,KAAKia,SAAS0B,WAAWJ,GAE7C,IAAIK,EAAoC,CACpCC,aAAc,gBACdC,aAAc,gBACdC,aAAc,gBACdC,UAAW,SACXC,UAAW,SACXC,aAAc,WAGlBlc,KAAKka,SAAWla,KAAKsW,SAAS6F,cAAcP,OAE3C,CACD5b,KAAKia,eAAiBja,KAAKwZ,kBAAkB4C,yBAAyBpc,KAAKma,QAAQ,IACnFna,KAAKyX,OAASzX,KAAKwZ,kBAAkB6C,gBAAgBnE,MACrDlY,KAAK0X,QAAU1X,KAAKwZ,kBAAkB6C,gBAAgBlE,OAEtD,MAAMoD,EAA2C,CAC7ChB,UAAW,KACXlQ,OAAQrK,KAAK2Z,QACb6B,aAAc,EACdf,cAAerB,KAAKkD,MAAMlD,KAAKmD,MAAMnD,KAAKoD,KAAKpD,KAAKqD,IAAIzc,KAAKyX,OAAQzX,KAAK0X,YAAc,EACxF+D,eAAgB,EAChBC,gBAAiB,GAGrB1b,KAAKga,aAAeha,KAAKia,SAAS0B,WAAWJ,GAE7C,IAAIK,EAAoC,CACpCC,aAAc,gBACdC,aAAc,gBACdC,aAAc,gBACdC,UAAW,SACXC,UAAW,SACXC,aAAelc,KAAK0c,WAAW1c,KAAKyX,SAAWzX,KAAK0c,WAAW1c,KAAK0X,SAAY,SAAW,WAG/F1X,KAAKka,SAAWla,KAAKsW,SAAS6F,cAAcP,YAUrD,MAAMhC,EAUT,YAAYxZ,GARJ,KAAAkW,SAAoC,KACpC,KAAAqG,QAAqB,KAQzB3c,KAAKsW,SAAWlW,EAChBJ,KAAK2c,QAAU3c,KAAKsW,SAASnN,OAsB7BnJ,KAAK4c,cAAgB5c,KAAKsW,SAAS6F,cACR,CACnBH,UAAW,WAInBhc,KAAK6c,sBAAwB7c,KAAKsW,SAASxG,oBACR,CAC3BC,QAAqC,CACjC,CACIC,QAAS,EACTC,WAAYC,eAAeC,SAC3B9D,KAAM,WAEV,CACI2D,QAAS,EACTC,WAAYC,eAAeC,SAC3B9D,KAAM,sBAMtBrM,KAAK8c,eAAiB9c,KAAK2c,QAAQ/L,qBAAmD,CAClFI,OAAQhR,KAAK2c,QAAQI,qBACa,CAC1BtM,iBAAyC,CACrCzQ,KAAK6c,yBAIjBtT,YAA8C,CAC1CrM,OAAQ8C,KAAK2c,QAAQ/F,mBACW,CACxBoG,KAAMhd,KAAKsW,SAAS3Q,QAAQsX,YAtDX,qcAsDiD,YAG1EzT,WAAY,QAEhBC,cAAgD,CAC5CvM,OAAQ8C,KAAK2c,QAAQ/F,mBACW,CACxBoG,KAAMhd,KAAKsW,SAAS3Q,QAAQsX,YApDT,kXAoDiD,cAG5EzT,WAAY,QAEhBH,kBAAmB,iBACnBoC,YAAyC,CACX,CACtBpB,OAAQ,iBAMlB,yBAAyByN,G,yCAC3B,OAAO,IAAIpC,QAAQ,CAAOC,EAASC,IAAW,kCAC1C,IAAIsH,QAAiCC,kBAAkBrF,EAAQ,EAAI,EAAGA,EAAMI,MAAOJ,EAAMK,QAEzFnY,KAAKqc,gBAAoC,CACrCnE,MAAOgF,EAAYhF,MACnBC,OAAQ+E,EAAY/E,OACpBqC,MAAO,GAGX,MAAM4C,EAAiD,CACnDlF,MAAOgF,EAAYhF,MACnBC,OAAQ+E,EAAY/E,OACpBqC,MAAO,GAELC,EAA0BrB,KAAKmD,MAAMnD,KAAKoD,KAAKpD,KAAKiE,IAAIH,EAAYhF,MAAOgF,EAAY/E,UAAY,EAGnGmF,EAAyBtd,KAAK2c,QAAQ9B,cAAqC,CAC7Ezb,KAAMge,EACN/S,OAAQ,aACRqQ,MAAOC,gBAAgBnZ,SAAWmZ,gBAAgBC,QAAUD,gBAAgB4C,kBAC5E9C,kBAEJza,KAAK2c,QAAQa,aAAaC,yBAAyB,CAAEP,eAAe,CAAEQ,QAASJ,GAAcF,GAK7F,MAAMO,EAA+B3d,KAAK2c,QAAQ9B,cAAqC,CACnFzb,KAAMge,EACN/S,OAAQ,aACRqQ,MAAOC,gBAAgBxX,SAAWwX,gBAAgBC,QAAUD,gBAAgB4C,kBAC5E9C,kBAGEmD,EAAoC5d,KAAK2c,QAAQ5X,qBAAqB,IAO5E,IAAK,IAAI5H,EAAc,EAAGA,EAAIsd,IAAiBtd,EAAG,CACJygB,EAAeC,gBAA0C,CAC/F5U,iBAAkB,CAC2B,CACrCX,WAAYgV,EAAW3B,WAAsC,CACzDH,aAAcre,EACdsd,cAAe,IAEnBjS,UAAW,CAAEvK,EAAG,EAAKwK,EAAG,EAAK7G,EAAG,EAAKtC,EAAG,OAIxCwe,UAGhB,IAAK,IAAI3gB,EAAI,EAAGA,EAAIsd,IAAiBtd,EAAG,CACpC,MAAM4gB,EAA0B/d,KAAK2c,QAAQqB,gBAAyC,CAClFhN,OAAQhR,KAAK6c,sBACb9M,QAA+B,CAC3B,CACIC,QAAS,EACTiB,SAAUjR,KAAK4c,eAEnB,CACI5M,QAAS,EACTiB,SAAUqM,EAAW3B,WAAsC,CACvDH,aAAcpC,KAAKiE,IAAI,EAAGlgB,EAAE,GAC5Bsd,cAAe,QAMzBwD,EAAoCL,EAAeC,gBAC3B,CACtB5U,iBAA6D,CACzD,CACIX,WAAYqV,EAAiBhC,WACE,CACvBH,aAAcre,EACdsd,cAAe,IAGvBjS,UAAW,WAK3ByV,EAAY1M,YAAYvR,KAAK8c,gBAC7BmB,EAAYzM,aAAa,EAAGuM,GAC5BE,EAAYC,KAAK,EAAG,EAAG,EAAG,GAC1BD,EAAYH,UAEZF,EAAeO,qBACX,CACIT,QAASC,EACTS,SAAUjhB,GAEd,CACIugB,QAASJ,EACTc,SAAUjhB,GAEdigB,GAGJA,EAAYlF,MAAQkB,KAAKC,KAAK+D,EAAYlF,MAAQ,GAClDkF,EAAYjF,OAASiB,KAAKC,KAAK+D,EAAYjF,OAAS,GAExDnY,KAAK2c,QAAQa,aAAahY,OAAO,CAACoY,EAAetY,WAEjDgY,EAAWhZ,UAEXqR,EAAQgI,W,IC9dR1H,E,uSAAZ,SAAYA,GAAoB,uBAAQ,2BAAU,yBAAlD,CAAYA,MAAiB,KAiGtB,MAAM,UA5FN,MAcH,cAPU,KAAAoI,gBAA4C,KAQlDre,KAAKse,uBAAyBnf,EAAWqT,EAAO+L,UAAW,KAAM,GAGrE,kBACI,OAAOve,KAAKwe,aAGhB,mBACI,OAAOxe,KAAKye,cAGhB,4BACI,OAAOze,KAAKse,uBAGhB,qBACI,OAAOte,KAAKqe,gBAGT,WAAW9L,EAA8BmM,GAC5C,OAAOhJ,QAAQC,UAAUlS,KAAK,KACnB,GAIR,oBAAoB/F,EAAc6Z,GACrC,OAAO7B,QAAQC,UAAUlS,KAAK,IACnB,MAIR,aACH,OAAO,EAGJ,eACH,OAAO,EAGJ,mBAAmBnD,EAAoBC,EAAoCC,GAC9E,OAAO,KAGJ,cAAcme,EAAcC,GAC/B,OAAO,KAGJ,QAAQrM,IACR,aACA,SACA,YACA,UAAUsM,EAAoB/Q,EAAgByE,IAC9C,WACA,gBAAgBuM,EAAuBC,EAAuBC,IAC9D,qBACA,mBAEA,YAAYhS,EAA8BX,EAAkB3O,EAAiBuM,GAChF,OAAO,KAGJ,qBAAqB+C,IACrB,qBAAqBA,IAElB,cAAciS,EAAkBC,GAClB,IAAhBD,IACAjf,KAAKwe,aAAeS,GAEH,IAAjBC,IACAlf,KAAKye,cAAgBS,GAInB,gCAqDV,cACI9c,QA3BI,KAAA+c,uBAAwB,EAOxB,KAAAC,sBAA6D,KAO7D,KAAAC,0BAA8C,aAM9C,KAAAC,aAAuB,EACvB,KAAAhN,4BAAsC,EACtC,KAAAiN,uBAAiC,EAEjC,KAAAC,eAAgD,KAIpDxf,KAAKqb,eAAiB,IAAIxX,MAC1B7D,KAAK+S,kBAAoB,IAAIlP,MAC7B7D,KAAKiG,SAAW,IAAIpC,MACpB7D,KAAKqe,gBAAkB,IAAIvH,EAAekB,SAASyH,SAAS5d,YAC5D7B,KAAK0f,6BAGT,cACI,OAAO1f,KAAK2f,SAGT,UACH3f,KAAK4f,uBAA4B,KACjC5f,KAAK6f,uBAA4B,KACjC7f,KAAK8f,gBAA4B,KACjC9f,KAAKmP,UAA4B,KACjCnP,KAAK+f,WAA4B,KACjC/f,KAAKggB,0BAA4B,KACjChgB,KAAKigB,aAA4B,KACjCjgB,KAAKkgB,WAA4B,KACjClgB,KAAKmgB,gBAA4B,KACjCngB,KAAKqb,eAAeha,OAAa,EACjCrB,KAAKogB,YAA4B,KACjCpgB,KAAKof,sBAA4B,KACjCpf,KAAK0Q,mBAA4B,KACjC1Q,KAAKyR,iBAA4B,KACjCzR,KAAK2Q,iBAA4B,KACjC3Q,KAAK0R,eAA4B,KAEjC1R,KAAK8S,mBAA4B,KACjC9S,KAAKqgB,uBAELrgB,KAAKsgB,WAA4B,KACjCtgB,KAAKuF,MAA4B,KACjCvF,KAAKmJ,OAA4B,KAGxB,WAAWoJ,EAA8BmM,G,yCAUlD,OATA1e,KAAKugB,QAAU7B,EAEf1e,KAAKsf,YAAc/M,EAAaC,EAAOgO,cACvCxgB,KAAKygB,qBAAuBlO,EAAaC,EAAOkO,qBAChD1gB,KAAKuf,sBAAwBhN,EAAaC,EAAOmO,sBAGjD3gB,KAAK4gB,kBAEE,IAAIlL,QAAiB,CAAOC,EAASC,IAAW,kCACnD,IAEI5V,KAAK6gB,cAAgBC,UAAUC,IAAIC,eAAe,CAC9CC,gBAAiB,qBAIrBjhB,KAAKmJ,aAAenJ,KAAK6gB,QAAQK,gBACW,mBAAjClhB,KAAKmJ,OAAOgY,kBACnBnhB,KAAKmJ,OAAOgY,iBAAiB,kBAAoBC,IAC7CpL,QAAQvC,MAAM2N,KAKtBphB,KAAK2f,eRlON,W,yCACb,QAAgB/Z,IAAZD,EAAuB,OAAOA,EAElC,MAAM0b,QAAsBC,OAAiC,sEAE7D,OADA3b,QAAgB0b,EAAcE,UACvB5b,KQ6N6B,GAGtB3F,KAAKuF,MAAQvF,KAAKmJ,OAAOqU,aAGzBxd,KAAKwhB,kBAAoB9C,EAAOrG,WAAW,cAG3CrY,KAAKqf,gCAAkCrf,KAAKwhB,kBAAkBC,4BAA4BzhB,KAAKmJ,QAC/FnJ,KAAKsgB,WAAatgB,KAAKwhB,kBAAkBE,mBACZ,CACrBvY,OAAQnJ,KAAKmJ,OACbkB,OAAQrK,KAAKqf,4BAKjBrf,KAAKsf,cACLtf,KAAK4f,uBAAyB5f,KAAK2hB,sCAGvC3hB,KAAK6f,uBAAyB7f,KAAK4hB,yBAGnCjO,OAAOwN,iBAAiB,SAAUnhB,KAAK6hB,4BAGvC7hB,KAAKwf,eAAiB,IAAI3a,EAAoB7E,MAAOuS,EAAaC,EAAOsP,qBAC3E,MAAOjN,GAEL,OADAe,EAAO,wCAA0Cf,IAC1C,EAGXc,GAAQ,UAIN,6BACN3V,KAAKse,uBAAuB9L,EAAOgO,eAA6B,EAChExgB,KAAKse,uBAAuB9L,EAAOuP,uBAA6B,EAChE/hB,KAAKse,uBAAuB9L,EAAOC,4BAA6B,EAChEzS,KAAKse,uBAAuB9L,EAAOwP,cAA6B,EAChEhiB,KAAKse,uBAAuB9L,EAAOyP,gBAA6B,EAChEjiB,KAAKse,uBAAuB9L,EAAOmO,uBAA6B,EAChE3gB,KAAKse,uBAAuB9L,EAAOsP,qBAA6B,EAChE9hB,KAAKse,uBAAuB9L,EAAO0P,eAA6B,EAChEliB,KAAKse,uBAAuB9L,EAAO2P,yBAA6B,EAChEniB,KAAKse,uBAAuB9L,EAAO4P,0BAA6B,EAChEpiB,KAAKse,uBAAuB9L,EAAO6P,0BAA6B,EAG5D,kBACJ,MAAMC,EAAetiB,KAAKugB,QAAQgC,YAAc5O,OAAO6O,iBACjDC,EAAgBziB,KAAKugB,QAAQmC,aAAe/O,OAAO6O,iBAErDxiB,KAAKuf,uBACLvf,KAAKugB,QAAQrI,MAAQvE,OAAOgP,YAAcL,EAC1CtiB,KAAKugB,QAAQpI,OAASxE,OAAOiP,aAAeH,IAG5CziB,KAAKugB,QAAQrI,MAAQoK,EACrBtiB,KAAKugB,QAAQpI,OAASsK,GAE1BziB,KAAK6iB,cAAc7iB,KAAKugB,QAAQrI,MAAOlY,KAAKugB,QAAQpI,QAGhD,6BACJnY,KAAKmf,uBAAwB,EAG1B,oBAAoBzhB,EAAc6Z,GACrC,OAAO7B,QAAQC,UAAUlS,KAAK,IAAY,kCACtC,MAAMia,EAAmB,IAAI,EAAc1d,KAAMtC,EAAM6Z,GAEvD,aADMmG,EAAQoF,cACPpF,MAIR,cAAcpD,GACjB,OAAOta,KAAKmJ,OAAO0R,cAAcP,GAG9B,cAAcA,GACjB,OAAOta,KAAKmJ,OAAOgT,cAAc7B,GAG9B,qBAAqBzX,EAAoCzD,EAAcsb,GAC1E,MAAMna,EAAoBP,KAAKuB,aAAanC,EAAMsb,EAAQ7Z,eAAeW,UAGzE,OADAxB,KAAKyB,cAAclB,EAAQ,EAAGnB,EAAMyD,GAC7BtC,EAGJ,qBAAqBA,EAAmBmE,EAAkByU,EAAuB4J,GAQpF,MAP0C,CACtCxiB,OAAQA,EACRmE,OAAQA,EACRyU,YAAaA,EACb4J,aAAcA,GAMf,sBAAsBrF,EAAqBsF,EAAiBC,GAO/D,MAN4C,CACxCvF,QAASA,EACTU,SAAU4E,EACVC,OAAQA,GAMT,oBAAoBjI,EAAmCE,EAAqCgI,GAC/F,MAAMzgB,EAA6BzC,KAAKmJ,OAAOpE,uBAC/CtC,EAAQ6Y,oBAAoBN,EAAgBE,EAAiBgI,GAG7D,OAF+BzgB,EAAQ6C,SAKpC,mBAAmB6d,EAAsBC,EAAmB1gB,EAAuB2gB,EAAoBjkB,GAC1G,MAAMqD,EAA6BzC,KAAKmJ,OAAOpE,uBAC/CtC,EAAQK,mBAAmBqgB,EAAWC,EAAW1gB,EAAY2gB,EAAYjkB,GAGzE,OAF+BqD,EAAQ6C,SAKpC,mBAAmBmQ,EAA0B6N,GAChD,MAAMC,EAAsB9N,GAASQ,EAAkBC,OAAU,SACrCT,GAASQ,EAAkBE,SAAY,WAAa,UAShF,OARsCnW,KAAKmJ,OAAOyN,mBAClB,CACxBoG,KAAMhd,KAAK2f,SAAS1C,YAAYqG,EAAkBC,GAElDC,OAAQF,EACRG,UAAWD,GAAUxjB,KAAK2f,SAAS1C,YAAYuG,EAAQD,KAM5D,oBAAoBG,GACvB,OAAO1jB,KAAKmJ,OAAOwa,sBAAsBD,GAGtC,wBAAwBE,GAC3B,OAAO5jB,KAAKmJ,OAAO4T,qBAAqB6G,GAGrC,qBAAqBC,EAAmCC,EACnCC,EACAC,GACxB,MAAMC,EAAsCH,EAAcI,mBACpDC,EAAsCL,EAAcM,qBAEpDC,EAAsC,CACxCC,UAAW,MACXpa,UAAW8Z,EAAc,YAAc,MACvC7Z,UAAW6Z,EAAc,sBAAwB,QAG/CO,EAAgD,CAClDla,OAAQrK,KAAKqf,0BACb9U,WAAY8Z,EACZ/Z,WAAY+Z,EACZ7Z,UAAWC,cAAcC,KAYvB4P,EAA4C,IAAI,EAA8Bta,KAAKmJ,QACzFmR,EAAWtJ,OAAuC6S,EAClDvJ,EAAW/Q,YAAYrM,OAA2B+mB,EAClD3J,EAAW7Q,cAAcvM,OAAyBinB,EAClD7J,EAAWkK,YAAuCT,EAClDzJ,EAAW9O,kBAAuC8O,EAAWrP,mBAC7DqP,EAAWrP,mBAAmBZ,OAAoB,uBAClDiQ,EAAW7O,YAAY,GAA2B8Y,EAClDjK,EAAW7O,YAAY,GAAGpB,OAAwBrK,KAAKqf,0BACvD/E,EAAWrP,mBAAmBC,mBAAoB,EAClDoP,EAAWrP,mBAAmBE,aAAoB,OAClDmP,EAAWjR,kBAAuC,gBAClDiR,EAAWhR,YAAuCtJ,KAAKsf,YAAc,EAAI,EACzEhF,EAAWtQ,mBAtBiD,CACxDL,UAAW,MACXC,SAAU,OACVC,UAAW,EACXC,oBAAqB,EACrBC,eAAgB,GAqBpB,OAFoC/J,KAAKmJ,OAAOyH,qBAAqB0J,GAKlE,qCACH,MAAMA,EAAmC,CACrCC,UAAW,KACXnb,KAAwB,CACpB8Y,MAAOlY,KAAKwe,aACZrG,OAAQnY,KAAKye,cACbjE,MAAO,GAEXlR,YAAa,EACbe,OAAQrK,KAAKqf,0BACb5E,cAAe,EACfC,MAAOC,gBAAgB4C,mBAG3B,OADqCvd,KAAKmJ,OAAO0R,cAAcP,GAC3BqB,aAGjC,yBACH,MAAMrB,EAAmC,CACrCC,UAAW,KACXnb,KAAwB,CACpB8Y,MAAOlY,KAAKwe,aACZrG,OAAQnY,KAAKye,cACbjE,MAAO,GAEXlR,YAAatJ,KAAKsf,YAAc,EAAI,EACpCjV,OAAQ,uBACRoQ,cAAe,EACfC,MAAOC,gBAAgB4C,kBAAoB5C,gBAAgBnZ,UAG/D,OAD4BxB,KAAKmJ,OAAO0R,cAAcP,GAC3BqB,aAGxB,aAAavc,EAAgBqlB,GAChC,MAAMnK,EAAkC,CACpClb,KAAMA,EACNsb,MAAO+J,GAGX,OAAOzkB,KAAKmJ,OAAO5H,aAAa+Y,GAG7B,cAAc/Z,EAAmBmkB,EAAiBtlB,EAAgByD,GACrE,IAAKE,EAAcC,GAAchD,KAAKiD,mBAAmBpC,eAAeqC,UAAYrC,eAAesC,SAAU/D,IAE1FyD,aAAkBnB,YAAc,IAAIA,YAAYsB,GAAc,IAAI/B,aAAa+B,IACvFjB,IAAIc,GACfE,EAAaQ,QAEb,MAAMohB,EAA4B3kB,KAAK8C,mBAAmBC,EAAc,EAAGxC,EAAQ,EAAGnB,GACtFY,KAAKqb,eAAe9b,KAAKolB,GAGtB,cAAcC,GACjB,OAAO5kB,KAAKmJ,OAAO6U,gBAAgB4G,GAGhC,qBAAqB5X,GAExBhN,KAAK0Q,mBAAqB1Q,KAAK8P,oBACI,CAC3BC,QAAqC,CACjC,CACIC,QAAS,EACTC,WAAYC,eAAeC,SAC3B9D,KAAM,kBAEV,CACI2D,QAAS,EACTC,WAAYC,eAAeC,SAC3B9D,KAAM,qBAMtBrM,KAAKigB,aAAejgB,KAAK6Q,qBAAqB7D,EAAS6X,cAAcviB,KAAM,EAAc0F,SAC3CnH,eAAeW,SAAWX,eAAeiQ,SACvF9Q,KAAKkgB,WAAalgB,KAAK6Q,qBAAqB7D,EAAS8X,YAAYxiB,KAAM,EAAY0F,SACvCnH,eAAeW,SAAWX,eAAeiQ,SAErF9Q,KAAKyR,iBAAmBzR,KAAK+Q,cACA,CACrBC,OAAQhR,KAAK0Q,mBACbX,QAA+B,CAC3B,CACIC,QAAS,EACTiB,SAA6B,CACzB1Q,OAAQP,KAAKigB,aACbvb,OAAQ,IAGhB,CACIsL,QAAS,EACTiB,SAA6B,CACzB1Q,OAAQP,KAAKkgB,WACbxb,OAAQ,OAO5B1E,KAAKyB,cAAczB,KAAKigB,aAAc,EAAG,EAAcjY,SAAUgF,EAAS6X,cAAcviB,MACxFtC,KAAKyB,cAAczB,KAAKkgB,WAAY,EAAG,EAAYlY,SAAUgF,EAAS8X,YAAYxiB,MAGlFtC,KAAK2Q,iBAAmB3Q,KAAK8P,oBACM,CAC3BC,QAAqC,CACjC,CACIC,QAAS,EACTC,WAAYC,eAAenP,OAC3BsL,KAAM,qBAMtBrM,KAAKggB,0BAA4BhgB,KAAK6Q,qBAClC7D,EAAS+X,0BAA0BziB,KACnCtC,KAAK+R,2BAA2B,EAA0B/J,UAC1DnH,eAAeW,SAAWX,eAAeiQ,SAE7C9Q,KAAK0R,eAAiB1R,KAAK+Q,cACE,CACrBC,OAAQhR,KAAK2Q,iBACbZ,QAA+B,CAC3B,CACIC,QAAS,EACTiB,SAA6B,CACzB1Q,OAAQP,KAAKggB,0BACbtb,OAAQ,OAO5B,MAAMsa,EAAqChS,EAASuF,aAAaC,EAAOC,2BACxEzS,KAAK8S,mBAAqB9S,KAAK8P,oBACI,CAC3BC,QAAqC,CACjC,CACIC,QAAS,EACTC,WAAYC,eAAenP,OAC3BsL,KAAM,iBACN+D,mBAAkB4O,QAAmCpZ,MAMrE5F,KAAKglB,gBAAgBhY,EAASiY,aAAcjY,EAASkY,aAAclG,GAGhE,qBAAqBhS,GACxBhN,KAAKoR,iBAAiBpR,KAAKggB,0BAA2BhT,EAAS+X,0BAA0BziB,KACnEtC,KAAK+R,2BAA2B,EAA0B/J,WAG7E,mBAAmB1H,EAAoB6kB,EAAiC3kB,GAG3E,OAFuB,IAAI,EAAaR,KAAMmlB,EAAI9jB,OAAQf,EAAe6kB,EAAK3kB,GAK3E,cAAcme,EAAcC,GAG/B,OAF+B,IAAI,EAAc5e,KAAM2e,EAAMC,GAQ1D,QAAQrM,GACXvS,KAAKogB,YAAYtC,UAEjB9d,KAAKwf,eAAe/a,QAEpB,MAAM2gB,EAAwBplB,KAAKmgB,gBAAgB7a,SACnDtF,KAAKqb,eAAe9b,KAAK6lB,GAEzBplB,KAAKyE,QAGF,QACHzE,KAAKuF,MAAMC,OAAOxF,KAAKqb,gBACvBrb,KAAKqb,eAAeha,OAAS,EAG1B,WAECrB,KAAKmf,wBACLnf,KAAK4gB,kBACD5gB,KAAKsf,cACLtf,KAAK4f,uBAAyB5f,KAAK2hB,sCAEvC3hB,KAAK6f,uBAAyB7f,KAAK4hB,yBACnC5hB,KAAKmf,uBAAwB,GAGjCnf,KAAKmgB,gBAAkBngB,KAAKmJ,OAAOpE,uBACnC/E,KAAK8f,gBAAkB9f,KAAKsgB,WAAW+E,oBAAoB1J,aAEvD3b,KAAKsf,aAELtf,KAAKof,sBAAwB,IAAI,EAA0B,CAACpf,KAAK4f,wBAAyB5f,KAAK6f,wBAC/F7f,KAAKof,sBAAsBhX,kBAAkB,GAAGkd,cAAgBtlB,KAAK8f,gBACrE9f,KAAKof,sBAAsBhX,kBAAkB,GAAGG,QAAgB,QAChEvI,KAAKof,sBAAsBhX,kBAAkB,GAAGI,UAA+B,CAACvK,EAAG,EAAKwK,EAAG,GAAK7G,EAAG,EAAKtC,EAAG,GAC3GU,KAAKof,sBAAsBmG,qBAAqC,IAIhEvlB,KAAKof,sBAAwB,IAAI,EAA0B,CAACpf,KAAK8f,iBAAkB9f,KAAK6f,wBACxF7f,KAAKof,sBAAsBhX,kBAAkB,GAAGG,QAAY,QAC5DvI,KAAKof,sBAAsBhX,kBAAkB,GAAGI,UAA2B,CAACvK,EAAG,EAAKwK,EAAG,GAAK7G,EAAG,EAAKtC,EAAG,GACvGU,KAAKof,sBAAsBmG,qBAAiC,GAGhEvlB,KAAKogB,YAAcpgB,KAAKmgB,gBAAgBtC,gBAAgB7d,KAAKof,uBAG1D,YAAYpS,EAA8BX,EAAkB3O,EAAiBuM,GAChF,IAAIub,EAAyB,KAC7B,OAAOnZ,GACH,KAAKoZ,EAAWC,KACZF,EAAQ,IAAI,EAAgBxlB,KAAMgN,EAAUX,EAAM3O,EAAMuM,GACxD,MACJ,KAAKwb,EAAWE,kBACZH,EAAQ,IAAI,EAA6BxlB,KAAMgN,EAAUX,EAAM3O,EAAMuM,GACrE,MACJ,KAAKwb,EAAWG,QACZJ,EAAQ,IAAI,EAAmBxlB,KAAMgN,EAAUX,EAAM3O,EAAMuM,GAC3D,MACJ,KAAKwb,EAAWI,MACZL,EAAQ,IAAI,EAAiBxlB,KAAMgN,EAAUX,EAAM3O,EAAMuM,GACzD,MACJ,KAAKwb,EAAWK,QACZN,EAAQ,IAAI,EAAmBxlB,KAAMgN,EAAUX,EAAM3O,EAAMuM,GAC3D,MACJ,KAAKwb,EAAWM,QACZP,EAAQ,IAAI,EAAmBxlB,KAAMgN,EAAUX,EAAM3O,EAAMuM,GAC3D,MACJ,QACIub,EAAQ,KACRxP,QAAQvC,MAAM,8BAAgCpH,GAGtD,OAAOmZ,EAGJ,gBAAgB1G,EAAuBC,EAAuBC,GAKjE,GAJAhf,KAAKgmB,kBAA6BlH,EAClC9e,KAAKimB,kBAA6BlH,EAClC/e,KAAKsS,2BAA6B0M,EAET,IAArBD,EACA,OAKJ,GAAID,GAAoBC,EACpB,OAGJ/e,KAAKqgB,uBAELrgB,KAAKiG,SAAW9G,EAAW4f,EAAkB,IAAM,IAAI,GAGnD/e,KAAK+S,kBADLiM,EACyBnb,MAAMqiB,KAAmB,CAAC,OAG1B/mB,EAAW4f,EAAkB,IAAM,MAGhE,MAAM3f,EAAgBY,KAAK+R,2BAA2B,EAAmB/J,SAAW+W,GAGpF,GAFA/e,KAAKmmB,eAAiBnmB,KAAKuB,aAAanC,EAAMyB,eAAeW,SAAWX,eAAeiQ,SAEnFkO,EACAhf,KAAK+S,kBAAkB,GAAK/S,KAAK+Q,cACJ,CACrBC,OAAQhR,KAAK8S,mBACb/C,QAA+B,CAC3B,CACIC,QAAS,EACTiB,SAA6B,CACzB1Q,OAAQP,KAAKmmB,eACbzhB,OAAQ,YAQ5B,IAAK,IAAIvH,EAAS,EAAGA,EAAI4hB,IAAoB5hB,EACzC6C,KAAK+S,kBAAkB5V,GAAK6C,KAAK+Q,cACJ,CACrBC,OAAQhR,KAAK8S,mBACb/C,QAA+B,CAC3B,CACIC,QAAS,EACTiB,SAA6B,CACzB1Q,OAAQP,KAAKmmB,eACbzhB,OAAQ1E,KAAK+R,2BAA2B,EAAmB/J,SAAW7K,QAU/F,mBAAmBud,EAA4Btb,GAClD,MAAMkb,EAAkC,CACpClb,KAAMA,EACNsb,MAAOA,GAGL5E,EAAmC9V,KAAKmJ,OAAOlG,mBAAmBqX,GAExE,OADA9a,EAAOsW,EAAO,GAAGsQ,aAAehnB,EAAM,wBAC/B0W,EAGX,iBACI,OAAO9V,KAAKogB,YAGT,YAIA,uBACH,OAAOpgB,KAAKmJ,OAAOpE,uBAGhB,oBACH,MAAM3F,EAAeY,KAAK+R,2BAA2B,EAAmB/J,SAAWhI,KAAKimB,mBACxF,IAAII,EAA6B,GACjC,IAAK,IAAIlpB,EAAY,EAAGA,EAAI6C,KAAKimB,oBAAqB9oB,EAClDkpB,EAAeA,EAAalgB,OAAOnG,KAAKiG,SAAS9I,GAAGiJ,cAExDpG,KAAKoR,iBAAiBpR,KAAKmmB,eAAgB,IAAIllB,aAAaolB,GAAejnB,GAGxE,iBAAiBmB,EAAmB+lB,EAAmClnB,GAC1E,IAAIsF,EAAiB,EACrB,MAAMoR,EAAS9V,KAAKwf,eAAepa,SAAShG,EAAMsF,GAE5CtB,EAAyC0S,EAAOvV,OACtDmE,EAA+CoR,EAAOpR,OAEnC,OAAftB,EAKJA,EAAW7D,KAAKS,KAAKwf,eAAe/c,QAASlC,EAAQmE,EAAQ,EAAG4hB,EAAOlnB,GAJnE4W,QAAQvC,MAAM,uBAOd,uBAMJ,GALAzT,KAAKmmB,eAAiB,KAElBnmB,KAAKiG,SAAS5E,OAAS,IACvBrB,KAAKiG,SAAS5E,OAAS,GAEvBrB,KAAKsS,2BAC0B,OAA3BtS,KAAK+S,mBAC6B,OAA9B/S,KAAK+S,kBAAkB,KACvB/S,KAAK+S,kBAAkB,GAAK,WAKpC,GAA+B,OAA3B/S,KAAK+S,kBACL,IAAK,IAAI5V,EAAS,EAAGA,EAAI6C,KAAKgmB,kBAAmB7oB,IACX,OAA9B6C,KAAK+S,kBAAkB5V,KACvB6C,KAAK+S,kBAAkB5V,GAAK,MAM5C6C,KAAK+S,kBAAkB1R,OAAS,EAEhCrB,KAAKwf,eAAevb,oBAGjB,2BAA2B+D,GAC9B,OAAQA,EAAW,KAAO,KAprBN,EAAAue,0BACpB5L,gBAAgB4C,kBAAoB5C,gBAAgBxX,SChIrD,MAAM,EAgBT,cACInD,KAAKwmB,WAA8C,EAAjC,EAASC,sBAC3BzmB,KAAK0mB,WAAavnB,EAAW,EAASsnB,sBAAuB,IAAM,GACnEzmB,KAAK2mB,iBAAmB,EACxB3mB,KAAK4mB,YAAcznB,EAAW,EAAS0nB,iBAAkB,IAAM,GAC/D7mB,KAAK8mB,kBAAoB3nB,EAAW,EAAS0nB,iBAAkB,IAAM,KACrE7mB,KAAK+mB,QAAU,GACf/mB,KAAKgnB,YAAc,EAGvB,iBACI,OAAOhnB,KAAKgnB,YAGhB,iBACI,OAAOhnB,KAAK4mB,YAGhB,uBACI,OAAO5mB,KAAK8mB,kBAGT,OAAOG,EAAqBC,EAAuBC,GACtDnnB,KAAKwmB,YAAcS,EAAcjnB,KAAK0mB,WAAW1mB,KAAK2mB,kBACtD3mB,KAAK0mB,WAAW1mB,KAAK2mB,kBAAoBM,EAEzCjnB,KAAK2mB,mBACD3mB,KAAK2mB,mBAAqB,EAASF,wBACnCzmB,KAAK2mB,iBAAmB,GAG5B3mB,KAAKgnB,YAAc5N,KAAKmD,MAAO,GAAOvc,KAAKwmB,YAA+C,EAAjC,EAASC,wBAAiC,IAEnG,IAAK,IAAItpB,EAAS,EAAGA,EAAI,EAAS0pB,mBAAoB1pB,EAClD6C,KAAK4mB,YAAYzpB,GAAW6C,KAAK4mB,YAAYzpB,EAAI,GACjD6C,KAAK8mB,kBAAkB3pB,GAAK6C,KAAK8mB,kBAAkB3pB,EAAI,GAE3D6C,KAAK4mB,YAAY,EAASC,iBAAmB,GAAW7mB,KAAKgnB,YAC7DhnB,KAAK8mB,kBAAkB,EAASD,iBAAmB,GAAK,IAAS7mB,KAAKgnB,YAElEG,EAAWD,EAAgB,GAAKC,EAAWD,EAAgB,IAC3DlnB,KAAK+mB,QAAQxnB,KAAKS,KAAKgnB,aAIxB,WACH,IAAII,EAAa,EAEjB,IAAK,IAAIjqB,EAAY,EAAGA,EAAI6C,KAAK+mB,QAAQ1lB,SAAUlE,EAC/CiqB,GAAOpnB,KAAK+mB,QAAQ5pB,GAExBiqB,GAAOpnB,KAAK+mB,QAAQ1lB,OAEpB,IAAIgmB,EAAkB,EACtB,IAAK,IAAIlqB,EAAY,EAAGA,EAAI6C,KAAK+mB,QAAQ1lB,OAAQlE,IAC7CkqB,GAAYjO,KAAKkO,IAAItnB,KAAK+mB,QAAQ5pB,GAAKiqB,EAAK,GAIhD,OAFAC,GAAYrnB,KAAK+mB,QAAQ1lB,OAErBgmB,EAAW,EAASE,oBACbnO,KAAKC,KAAK+N,GAGd,GA7EY,EAAAP,iBAA6B,IAC7B,EAAAJ,sBAA6B,IAC7B,EAAAc,oBAA6B,ECHjD,MAAMC,EAuBF,wBAAwBC,EAAiBnoB,EAA8BsC,GAC1E,MAAM8lB,EAAMpoB,EAAE,GACRqoB,EAAMroB,EAAE,GACRsoB,EAAMtoB,EAAE,GACRuoB,EAAMvoB,EAAE,GACRwoB,EAAMxoB,EAAE,GACRyoB,EAAMzoB,EAAE,GACR0oB,EAAM1oB,EAAE,GACR2oB,EAAM3oB,EAAE,GACR4oB,EAAM5oB,EAAE,GACR6oB,EAAM7oB,EAAE,GACR8oB,EAAM9oB,EAAE,IACR+oB,EAAM/oB,EAAE,IACRgpB,EAAMhpB,EAAE,IACRipB,EAAMjpB,EAAE,IACRkpB,EAAMlpB,EAAE,IACRmpB,EAAMnpB,EAAE,IACRopB,EAAM9mB,EAAE,GACR+mB,EAAM/mB,EAAE,GACRgnB,EAAMhnB,EAAE,GACRinB,EAAMjnB,EAAE,GACRknB,EAAMlnB,EAAE,GACRmnB,EAAMnnB,EAAE,GACRonB,EAAMpnB,EAAE,GACRqnB,EAAMrnB,EAAE,GACRsnB,EAAMtnB,EAAE,GACRunB,EAAMvnB,EAAE,GACRwnB,EAAMxnB,EAAE,IACRynB,EAAMznB,EAAE,IACR0nB,EAAM1nB,EAAE,IACR2nB,EAAM3nB,EAAE,IACR4nB,EAAM5nB,EAAE,IACR6nB,EAAM7nB,EAAE,IACd6lB,EAAI,GAAQC,EAAMgB,EAAMf,EAAMmB,EAAMlB,EAAMsB,EAAMrB,EAAMyB,EACtD7B,EAAI,GAAQC,EAAMiB,EAAMhB,EAAMoB,EAAMnB,EAAMuB,EAAMtB,EAAM0B,EACtD9B,EAAI,GAAQC,EAAMkB,EAAMjB,EAAMqB,EAAMpB,EAAMwB,EAAMvB,EAAM2B,EACtD/B,EAAI,GAAQC,EAAMmB,EAAMlB,EAAMsB,EAAMrB,EAAMyB,EAAMxB,EAAM4B,EACtDhC,EAAI,GAAQK,EAAMY,EAAMX,EAAMe,EAAMd,EAAMkB,EAAMjB,EAAMqB,EACtD7B,EAAI,GAAQK,EAAMa,EAAMZ,EAAMgB,EAAMf,EAAMmB,EAAMlB,EAAMsB,EACtD9B,EAAI,GAAQK,EAAMc,EAAMb,EAAMiB,EAAMhB,EAAMoB,EAAMnB,EAAMuB,EACtD/B,EAAI,GAAQK,EAAMe,EAAMd,EAAMkB,EAAMjB,EAAMqB,EAAMpB,EAAMwB,EACtDhC,EAAI,GAAQS,EAAMQ,EAAMP,EAAMW,EAAMV,EAAMc,EAAMb,EAAMiB,EACtD7B,EAAI,GAAQS,EAAMS,EAAMR,EAAMY,EAAMX,EAAMe,EAAMd,EAAMkB,EACtD9B,EAAI,IAAQS,EAAMU,EAAMT,EAAMa,EAAMZ,EAAMgB,EAAMf,EAAMmB,EACtD/B,EAAI,IAAQS,EAAMW,EAAMV,EAAMc,EAAMb,EAAMiB,EAAMhB,EAAMoB,EACtDhC,EAAI,IAAQa,EAAMI,EAAMH,EAAMO,EAAMN,EAAMU,EAAMT,EAAMa,EACtD7B,EAAI,IAAQa,EAAMK,EAAMJ,EAAMQ,EAAMP,EAAMW,EAAMV,EAAMc,EACtD9B,EAAI,IAAQa,EAAMM,EAAML,EAAMS,EAAMR,EAAMY,EAAMX,EAAMe,EACtD/B,EAAI,IAAQa,EAAMO,EAAMN,EAAMU,EAAMT,EAAMa,EAAMZ,EAAMgB,EAQnD,gBAAgBhC,EAAiBlqB,GACpC,MAAMmsB,EAASnsB,EAAE,GACXosB,EAASpsB,EAAE,GACXqsB,EAASrsB,EAAE,GACXssB,EAAStsB,EAAE,GACXusB,EAASvsB,EAAE,GACXwsB,EAASxsB,EAAE,GACXysB,EAASzsB,EAAE,GACX0sB,EAAS1sB,EAAE,GACX2sB,EAAS3sB,EAAE,GACX4sB,EAAS5sB,EAAE,GACX6sB,EAAS7sB,EAAE,IACX8sB,EAAS9sB,EAAE,IACX+sB,EAAS/sB,EAAE,IACXgtB,EAAShtB,EAAE,IACXitB,EAASjtB,EAAE,IACXktB,EAASltB,EAAE,IACXmtB,EAASN,EAAMK,EACfE,EAASH,EAAMH,EACfO,EAASZ,EAAMS,EACfI,EAASL,EAAMP,EACfa,EAASd,EAAMK,EACfU,EAASX,EAAMH,EACfe,EAASpB,EAAMa,EACfQ,EAAST,EAAMX,EACfqB,EAAStB,EAAMS,EACfc,EAASf,EAAMP,EACfuB,EAASxB,EAAMK,EACfoB,EAASrB,EAAMH,EACfyB,EAASpB,EAAMK,EACfgB,EAASjB,EAAMH,EACfqB,EAAS1B,EAAMS,EACfkB,EAASnB,EAAMP,EACf2B,EAAS5B,EAAMK,EACfwB,EAASzB,EAAMH,EACf6B,EAASlC,EAAMa,EACfsB,EAASvB,EAAMX,EACfmC,EAASpC,EAAMS,EACf4B,EAAS7B,EAAMP,EACfqC,EAAStC,EAAMK,EACfkC,EAASnC,EAAMH,EAEfuC,EAAMxB,EAAQX,EAAMc,EAAQV,EAAMW,EAAQP,GAAQI,EAAQZ,EAAMa,EAAQT,EAAMY,EAAQR,GACtF4B,EAAMxB,EAAQhB,EAAMqB,EAAQb,EAAMgB,EAAQZ,GAAQG,EAAQf,EAAMsB,EAAQd,EAAMe,EAAQX,GACtF6B,EAAMxB,EAAQjB,EAAMsB,EAAQlB,EAAMqB,EAASb,GAAQM,EAAQlB,EAAMqB,EAAQjB,EAAMsB,EAASd,GACxF8B,EAAMtB,EAAQpB,EAAMuB,EAAQnB,EAAMsB,EAASlB,GAAQW,EAAQnB,EAAMwB,EAAQpB,EAAMqB,EAASjB,GAExF1sB,EAAI,GAAOisB,EAAMwC,EAAKpC,EAAMqC,EAAKjC,EAAMkC,EAAK9B,EAAM+B,GAExD5E,EAAI,GAAKhqB,EAAIyuB,EACbzE,EAAI,GAAKhqB,EAAI0uB,EACb1E,EAAI,GAAKhqB,EAAI2uB,EACb3E,EAAI,GAAKhqB,EAAI4uB,EACb5E,EAAI,GACAhqB,GAAMktB,EAAQb,EAAMc,EAAQV,EAAMa,EAAQT,GAAQI,EAAQZ,EAAMe,EAAQX,EAAMY,EAAQR,IAC1F7C,EAAI,GACAhqB,GAAMitB,EAAQhB,EAAMuB,EAAQf,EAAMgB,EAAQZ,GAAQK,EAAQjB,EAAMsB,EAAQd,EAAMiB,EAAQb,IAC1F7C,EAAI,GAAMhqB,GAAMotB,EAAQnB,EAAMsB,EAAQlB,EAAMuB,EAASf,GACxCM,EAAQlB,EAAMuB,EAAQnB,EAAMsB,EAASd,IAClD7C,EAAI,GAAMhqB,GAAMqtB,EAAQpB,EAAMyB,EAAQrB,EAAMsB,EAASlB,GACxCa,EAAQrB,EAAMwB,EAAQpB,EAAMuB,EAASnB,IAClDzC,EAAI,GAAMhqB,GAAM6tB,EAASrB,EAAMwB,EAASpB,EAAMqB,EAASjB,GAC1Cc,EAAStB,EAAMuB,EAASnB,EAAMsB,EAASlB,IACpDhD,EAAI,GAAMhqB,GAAM8tB,EAAS1B,EAAM+B,EAASvB,EAAM0B,EAAStB,GAC1Ca,EAASzB,EAAMgC,EAASxB,EAAMyB,EAASrB,IACpDhD,EAAI,IAAMhqB,GAAM+tB,EAAS3B,EAAMgC,EAAS5B,EAAM+B,EAASvB,GAC1CgB,EAAS5B,EAAM+B,EAAS3B,EAAMgC,EAASxB,IACpDhD,EAAI,IAAMhqB,GAAMkuB,EAAS9B,EAAMiC,EAAS7B,EAAMgC,EAAS5B,GAC1CqB,EAAS7B,EAAMkC,EAAS9B,EAAM+B,EAAS3B,IACpD5C,EAAI,IAAMhqB,GAAM+tB,EAASpB,EAAMuB,EAASnB,EAAMe,EAASvB,GAC1C0B,EAASlB,EAAMc,EAAStB,EAAMyB,EAASrB,IACpD3C,EAAI,IAAMhqB,GAAMquB,EAAStB,EAAMc,EAAS1B,EAAMiC,EAASzB,GAC1CwB,EAASxB,EAAM2B,EAASvB,EAAMe,EAAS3B,IACpDnC,EAAI,IAAMhqB,GAAMmuB,EAAS5B,EAAMiC,EAASzB,EAAMiB,EAAS7B,GAC1CoC,EAASxB,EAAMgB,EAAS5B,EAAMiC,EAAS7B,IACpDvC,EAAI,IAAMhqB,GAAMuuB,EAAS5B,EAAMsB,EAAS9B,EAAMmC,EAAS/B,GAC1C8B,EAAS9B,EAAMiC,EAAS7B,EAAMuB,EAAS/B,IAQjD,kBAAkBnC,EAAalqB,GAClC,MAAMmsB,EAAMnsB,EAAE,GACRosB,EAAMpsB,EAAE,GACRqsB,EAAMrsB,EAAE,GACRssB,EAAMtsB,EAAE,GACRusB,EAAMvsB,EAAE,GACRwsB,EAAMxsB,EAAE,GACRysB,EAAMzsB,EAAE,GACR0sB,EAAM1sB,EAAE,GACR2sB,EAAM3sB,EAAE,GACR4sB,EAAM5sB,EAAE,GACR6sB,EAAM7sB,EAAE,IACR8sB,EAAM9sB,EAAE,IACR+sB,EAAM/sB,EAAE,IACRgtB,EAAMhtB,EAAE,IACRitB,EAAMjtB,EAAE,IACRktB,EAAMltB,EAAE,IAEdkqB,EAAI,GAAMiC,EACVjC,EAAI,GAAMqC,EACVrC,EAAI,GAAMyC,EACVzC,EAAI,GAAM6C,EACV7C,EAAI,GAAMkC,EACVlC,EAAI,GAAMsC,EACVtC,EAAI,GAAM0C,EACV1C,EAAI,GAAM8C,EACV9C,EAAI,GAAMmC,EACVnC,EAAI,GAAMuC,EACVvC,EAAI,IAAM2C,EACV3C,EAAI,IAAM+C,EACV/C,EAAI,IAAMoC,EACVpC,EAAI,IAAMwC,EACVxC,EAAI,IAAM4C,EACV5C,EAAI,IAAMgD,EAoBP,eAAehD,EAAiB6E,EAAaC,EAAcC,EAAeC,EAAYC,EAAcC,GACvG,MAAMC,EAAYL,EAAQD,EACpBO,EAAYJ,EAAMD,EAClBM,EAAYJ,EAAQC,EAE1BlF,EAAI,GAAM,EAAMiF,EAAQE,EACxBnF,EAAI,GAAM,EACVA,EAAI,GAAM,EACVA,EAAI,GAAM,EACVA,EAAI,GAAM,EACVA,EAAI,GAAM,EAAMiF,EAAQG,EACxBpF,EAAI,GAAM,EACVA,EAAI,GAAM,EACVA,EAAI,IAAO6E,EAAOC,GAASK,EAC3BnF,EAAI,IAAOgF,EAAMD,GAAUK,EAC3BpF,EAAI,IAAMkF,EAAOG,EACjBrF,EAAI,KAAO,EACXA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAMiF,EAAQC,EAAOG,EACzBrF,EAAI,IAAM,EAGP,eAAeA,EAAiBlqB,EAA8BwvB,GACjE,MAAMC,EAAkB,EAAPD,EACjBtF,EAAI,GAAalqB,EAAEyvB,EAAM,GACzBvF,EAAI,GAAalqB,EAAEyvB,EAAM,GACzBvF,EAAI,GAAalqB,EAAEyvB,EAAM,GAStB,uBAAuBlgB,EAAWmgB,EAAe5rB,GACpD,IAAK,IAAIlE,EAAI,EAAGA,EAAIkE,IAAUlE,EAC1B8vB,EAAE9vB,GAAK8vB,EAAE9vB,GAAK2P,EAWf,iBAAiB2a,EAAiBnoB,EAA8BsC,EAA8BP,GACjG,IAAK,IAAIlE,EAAI,EAAGA,EAAIkE,IAAUlE,EAC1BsqB,EAAItqB,GAAKmC,EAAEnC,GAAKyE,EAAEzE,GAUnB,iBAAiBsqB,EAAmBnoB,EAAgC+B,GACvE,IAAIzC,EAAW,EAEf,IAAK,IAAIzB,EAAI,EAAGA,EAAIkE,IAAUlE,EAC1ByB,GAAKU,EAAEnC,GAAKmC,EAAEnC,GAGlB,GADAyB,EAAIwa,KAAK8T,KAAKtuB,GACVA,EAAI,KAEJ,IAAK,IAAIzB,EAAI,EAAGA,EAAIkE,IAAUlE,EAC1BsqB,EAAItqB,GAAKmC,EAAEnC,GAAKyB,OAKpB,IAAK,IAAIzB,EAAI,EAAGA,EAAIkE,IAAUlE,EAC1BsqB,EAAItqB,GAAK,EAYd,iBAAiBsqB,EAAiBnoB,EAA8BsC,EAA8BP,GACjG,IAAK,IAAIlE,EAAI,EAAGA,EAAIkE,IAAUlE,EAC1BsqB,EAAItqB,GAAKmC,EAAEnC,GAAKyE,EAAEzE,GAWnB,aAAasqB,EAAiBnoB,EAA8BsC,GAC/D6lB,EAAI,GAAKnoB,EAAE,GAAKsC,EAAE,GAAKtC,EAAE,GAAKsC,EAAE,GAChC6lB,EAAI,GAAKnoB,EAAE,GAAKsC,EAAE,GAAKtC,EAAE,GAAKsC,EAAE,GAChC6lB,EAAI,GAAKnoB,EAAE,GAAKsC,EAAE,GAAKtC,EAAE,GAAKsC,EAAE,GAU7B,WAAWtC,EAAgCsC,GAC9C,OAAQtC,EAAE,GAAKsC,EAAE,GAAOtC,EAAE,GAAKsC,EAAE,GAAOtC,EAAE,GAAKsC,EAAE,GAY9C,oBAAoB6lB,EAAiB0F,EAAgCC,EAAmCC,GAC3G,IAAInB,EAAmB,IAAIjrB,aAAa,GACpCkrB,EAAmB,IAAIlrB,aAAa,GACpCmrB,EAAmB,IAAInrB,aAAa,GACxCumB,EAAO8F,UAAUpB,EAAIiB,EAAKC,EAAQ,GAClC5F,EAAO+F,UAAUrB,EAAIA,EAAI,GACzB1E,EAAOgG,MAAMrB,EAAIkB,EAAInB,GACrB1E,EAAO+F,UAAUpB,EAAIA,EAAI,GACzB3E,EAAOgG,MAAMpB,EAAIF,EAAIC,GAErB1E,EAAI,GAAM0E,EAAG,GACb1E,EAAI,GAAM0E,EAAG,GACb1E,EAAI,GAAM0E,EAAG,GACb1E,EAAI,GAAM,EACVA,EAAI,GAAM2E,EAAG,GACb3E,EAAI,GAAM2E,EAAG,GACb3E,EAAI,GAAM2E,EAAG,GACb3E,EAAI,GAAM,EACVA,EAAI,GAAMyE,EAAG,GACbzE,EAAI,GAAMyE,EAAG,GACbzE,EAAI,IAAMyE,EAAG,GACbzE,EAAI,IAAM,EACVA,EAAI,IAAM0F,EAAI,GACd1F,EAAI,IAAM0F,EAAI,GACd1F,EAAI,IAAM0F,EAAI,GACd1F,EAAI,IAAM,EAMP,2BACHD,EAAOiG,YAAc,EAOlB,sBAEH,OADAjG,EAAOiG,aAAe,UAAYjG,EAAOiG,YAAc,GAAKjG,EAAOkG,cAC5DlG,EAAOiG,YAAcjG,EAAOiG,YAQhC,mBAAmBhG,EAAiBwF,GACvCxF,EAAI,GAAM,EACVA,EAAI,GAAM,EACVA,EAAI,GAAM,EACVA,EAAI,GAAM,EACVA,EAAI,GAAM,EACVA,EAAI,GAAM,EACVA,EAAI,GAAM,EACVA,EAAI,GAAM,EACVA,EAAI,GAAM,EACVA,EAAI,GAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAMwF,EAAE,GACZxF,EAAI,IAAMwF,EAAE,GACZxF,EAAI,IAAMwF,EAAE,GACZxF,EAAI,IAAM,EAQP,iBAAiBlqB,EAAe0vB,GACnC,MAAMU,EAAMV,EAAE,GACRW,EAAMX,EAAE,GACRY,EAAMZ,EAAE,GACRvD,EAAMnsB,EAAE,GACRosB,EAAMpsB,EAAE,GACRqsB,EAAMrsB,EAAE,GACRssB,EAAMtsB,EAAE,GACRusB,EAAMvsB,EAAE,GACRwsB,EAAMxsB,EAAE,GACRysB,EAAMzsB,EAAE,GACR0sB,EAAM1sB,EAAE,GACR2sB,EAAM3sB,EAAE,GACR4sB,EAAM5sB,EAAE,GACR6sB,EAAM7sB,EAAE,IACR8sB,EAAM9sB,EAAE,IACR+sB,EAAM/sB,EAAE,IACRgtB,EAAMhtB,EAAE,IACRitB,EAAMjtB,EAAE,IACRktB,EAAMltB,EAAE,IAEdA,EAAE,IAAMmsB,EAAMiE,EAAK7D,EAAM8D,EAAK1D,EAAM2D,EAAKvD,EACzC/sB,EAAE,IAAMosB,EAAMgE,EAAK5D,EAAM6D,EAAKzD,EAAM0D,EAAKtD,EACzChtB,EAAE,IAAMqsB,EAAM+D,EAAK3D,EAAM4D,EAAKxD,EAAMyD,EAAKrD,EACzCjtB,EAAE,IAAMssB,EAAM8D,EAAK1D,EAAM2D,EAAKvD,EAAMwD,EAAKpD,EAQtC,gBAAgBqD,GACnB,OAAOA,EAAU1U,KAAK2U,GAAK,KA3bhB,EAAAL,cAAwB,WAOxB,EAAAD,YAAsB,E,ICF7B7gB,EAqCA6Y,EAmBAuI,EAOAxb,E,uSA/DZ,SAAY5F,GACR,+BACA,yCACA,6BACA,+BACA,+BACA,+BACA,iDACA,+CACA,+CACA,mDACA,sCACA,gCACA,gCACA,4CACA,4CACA,wCACA,gDACA,kDACA,8CACA,kCACA,0CACA,sCACA,sCACA,0CACA,4CACA,4CACA,sCACA,sCACA,sEACA,wEACA,wEACA,kEACA,kEACA,4BAlCJ,CAAYA,MAAS,KAqCrB,SAAY6Y,GACR,mBACA,6CACA,qBACA,yBACA,yBACA,yBACA,2BAPJ,CAAYA,MAAU,MAmBtB,SAAYuI,GACR,iBACA,uBACA,qBACA,iBAJJ,CAAYA,MAAQ,KAOpB,SAAYxb,GAER,2BAEA,iDAEA,mCAEA,mDAIA,6DAEA,uDAEA,yDAEA,iDAEA,qCAEA,iCAGA,4DAEA,oDAEA,4BAEA,gDAEA,0DAEA,oCACAA,IAAA,0BApCJ,CAAYA,MAAM,KAuCX,MAAMyb,GAA6B,CACtC,CACIC,QAAS,aACTxwB,KAAMkP,EAAUe,gBAChBZ,QAAS,CAAC,mBAAoB,gCAC9BohB,KAAK,EACL9hB,KAAMoZ,EAAWC,MAErB,CACIwI,QAAS,cACTxwB,KAAMkP,EAAUwhB,iBAChBrhB,QAAS,CAAC,mBAAoB,+BAC9BohB,KAAK,EACL9hB,KAAMoZ,EAAWC,MAErB,CACIwI,QAAS,cACTxwB,KAAMkP,EAAUyhB,iBAChBthB,QAAS,CAAC,mBAAoB,gCAC9BohB,KAAK,EACL9hB,KAAMoZ,EAAWC,MAErB,CACIwI,QAAS,WACTxwB,KAAMkP,EAAU0hB,cAChBvhB,QAAS,CAAC,mBAAoB,+BAC9BohB,KAAK,EACL9hB,KAAMoZ,EAAWC,MAErB,CACIwI,QAAS,WACTxwB,KAAMkP,EAAU2hB,cAChBxhB,QAAS,CAAC,mBAAoB,+BAC9BohB,KAAK,EACL9hB,KAAMoZ,EAAWC,MAErB,CACIwI,QAAS,aACTxwB,KAAMkP,EAAUoG,8BAChBjG,QAAS,CAAC,iCAAkC,gCAC5CohB,KAAK,EACL9hB,KAAMoZ,EAAWE,mBAErB,CACIuI,QAAU,cACVxwB,KAAMkP,EAAU4hB,+BAChBzhB,QAAS,CAAC,iCAAkC,+BAC5CohB,KAAK,EACL9hB,KAAMoZ,EAAWE,mBAErB,CACIuI,QAAS,cACTxwB,KAAMkP,EAAU6hB,+BAChB1hB,QAAS,CAAC,iCAAkC,gCAC5CohB,KAAK,EACL9hB,KAAMoZ,EAAWE,mBAErB,CACIuI,QAAS,WACTxwB,KAAMkP,EAAU8hB,4BAChB3hB,QAAS,CAAC,iCAAkC,+BAC5CohB,KAAK,EACL9hB,KAAMoZ,EAAWE,mBAErB,CACIuI,QAAS,WACTxwB,KAAMkP,EAAU+hB,4BAChB5hB,QAAS,CAAC,iCAAkC,+BAC5CohB,KAAK,EACL9hB,KAAMoZ,EAAWE,mBAErB,CACIuI,QAAS,OACTxwB,KAAMkP,EAAUgiB,UAChB7hB,QAAS,CAAC,GAAI,IACdohB,KAAK,EACL9hB,KAAMoZ,EAAWG,SAErB,CACIsI,QAAS,QACTxwB,KAAMkP,EAAUiiB,WAChB9hB,QAAS,CAAC,GAAI,IACdohB,KAAK,EACL9hB,KAAMoZ,EAAWG,SAErB,CACIsI,QAAS,cACTxwB,KAAMkP,EAAUkiB,iBAChB/hB,QAAS,CAAC,GAAI,IACdohB,KAAK,EACL9hB,KAAMoZ,EAAWG,SAErB,CACIsI,QAAS,cACTxwB,KAAMkP,EAAUmiB,iBAChBhiB,QAAS,CAAC,GAAI,IACdohB,KAAK,EACL9hB,KAAMoZ,EAAWG,SAErB,CACIsI,QAAS,iBACTxwB,KAAMkP,EAAUoiB,oBAChBjiB,QAAS,CAAC,sBAAuB,yBACjCohB,KAAK,EACL9hB,KAAMoZ,EAAWM,SAErB,CACImI,QAAS,kBACTxwB,KAAMkP,EAAUqiB,qBAChBliB,QAAS,CAAC,GAAI,IACdohB,KAAK,EACL9hB,KAAMoZ,EAAWG,SAErB,CACIsI,QAAS,YACTxwB,KAAMkP,EAAU+C,eAChB5C,QAAS,CAAC,sBAAuB,yBACjCohB,KAAK,EACL9hB,KAAMoZ,EAAWG,SASrB,CACIsI,QAAS,QACTxwB,KAAMkP,EAAUsiB,WAChBniB,QAAS,CAAC,GAAI,IACdohB,KAAK,EACL9hB,KAAMoZ,EAAWG,SAErB,CACIsI,QAAS,QAAS,KAAQthB,EAAUuiB,WACpCpiB,QAAS,CAAC,GAAI,IACdohB,KAAK,EACL9hB,KAAMoZ,EAAWG,SAErB,CACIsI,QAAS,QACTxwB,KAAMkP,EAAUwiB,WAChBriB,QAAS,CAAC,GAAI,IACdohB,KAAK,EACL9hB,KAAMoZ,EAAWG,SAErB,CACIsI,QAAS,aACTxwB,KAAMkP,EAAUyiB,gBAChBtiB,QAAS,CAAC,GAAI,IACdohB,KAAK,EACL9hB,KAAMoZ,EAAWG,SAErB,CACIsI,QAAS,QACTxwB,KAAMkP,EAAU0iB,WAChBviB,QAAS,CAAC,GAAI,IACdohB,KAAK,EACL9hB,KAAMoZ,EAAWG,SAErB,CACIsI,QAAS,iBACTxwB,KAAMkP,EAAU2iB,oBAChBxiB,QAAS,CAAC,GAAI,IACdohB,KAAK,EACL9hB,KAAMoZ,EAAWG,SAErB,CACIsI,QAAS,gBACTxwB,KAAMkP,EAAU4iB,mBAChBziB,QAAS,CAAC,GAAI,IACdohB,KAAK,EACL9hB,KAAMoZ,EAAWG,SAErB,CACIsI,QAAS,gBACTxwB,KAAMkP,EAAU6iB,mBAChB1iB,QAAS,CAAC,GAAI,IACdohB,KAAK,EACL9hB,KAAMoZ,EAAWG,SAErB,CACIsI,QAAS,WACTxwB,KAAMkP,EAAU8iB,cAChB3iB,QAAS,CAAC,GAAI,IACdohB,KAAK,EACL9hB,KAAMoZ,EAAWG,SAErB,CACIsI,QAAS,WACTxwB,KAAMkP,EAAU+iB,cAChB5iB,QAAS,CAAC,sBAAuB,yBACjCohB,KAAK,EACL9hB,KAAMoZ,EAAWK,SAErB,CACIoI,QAAS,WACTxwB,KAAMkP,EAAUgjB,cAChB7iB,QAAS,CAAC,sBAAuB,yBACjCohB,KAAK,EACL9hB,KAAMoZ,EAAWK,SAErB,CACIoI,QAAS,SACTxwB,KAAMkP,EAAUijB,YAChB9iB,QAAS,CAAC,sBAAuB,yBACjCohB,KAAK,EACL9hB,KAAMoZ,EAAWM,SAErB,CACImI,QAAS,eACTxwB,KAAMkP,EAAUkjB,kBAChB/iB,QAAS,CAAC,GAAI,IACdohB,KAAK,EACL9hB,KAAMoZ,EAAWM,SAErB,CACImI,QAAS,gBACTxwB,KAAMkP,EAAUmjB,mBAChBhjB,QAAS,CAAC,GAAI,IACdohB,KAAK,EACL9hB,KAAMoZ,EAAWG,UA0BZ/X,GAAoB,CAC7B,CACInQ,KAAM,aACNqQ,UAAWnB,EAAUe,gBACrBtB,KAAM2hB,EAASgC,MACfC,MAAO,EACPC,WAAY,IACZC,OAAQ,GACRC,YAAa,GACbC,UAAW,GACXC,aAAc,EACdC,YAAa,GACb7d,WAAY,GACZE,eAAgB,EAChBD,eAAgB,GAEpB,CACIjV,KAAM,cACNqQ,UAAWnB,EAAUwhB,iBACrB/hB,KAAM2hB,EAASwC,OACfP,MAAO,EACPC,WAAY,EACZC,OAAQ,GACRC,YAAa,GACbC,UAAW,EACXC,aAAc,EACdC,YAAa,GACb7d,WAAY,GACZE,gBAAiB,EACjBD,eAAgB,GAEpB,CACIjV,KAAM,cACNqQ,UAAWnB,EAAUyhB,iBACrBhiB,KAAM2hB,EAASwC,OACfP,MAAO,GACPC,WAAY,EACZC,OAAQ,GACRC,YAAa,GACbC,UAAW,EACXC,cAAe,EACfC,YAAa,EACb7d,WAAY,GACZE,gBAAiB,EACjBD,eAAgB,GAEpB,CACIjV,KAAM,WACNqQ,UAAWnB,EAAU0hB,cACrBjiB,KAAM2hB,EAASyC,IACfR,MAAO,GACPC,WAAY,GACZC,OAAQ,GACRC,YAAa,EACbC,UAAW,IACXC,aAAc,EACdC,YAAa,GACb7d,WAAY,GACZE,gBAAiB,EACjBD,eAAgB,GAChB+d,QAAQ,EACRC,SAAU,IACVC,SAAU,CAAC,EAAK,GAAK,GACrBC,WAAY,CAAC,GAAK,GAAK,MAE3B,CACInzB,KAAM,WACNqQ,UAAWnB,EAAU2hB,cACrBliB,KAAM2hB,EAASyC,IACfR,MAAO,GACPC,WAAY,GACZC,OAAQ,GACRC,YAAa,EACbC,UAAW,EACXC,aAAc,EACdC,YAAa,GACb7d,WAAY,GACZE,gBAAiB,GACjBD,eAAgB,GAChB+d,QAAQ,EACRC,SAAU,IACVC,SAAU,CAAC,GAAM,GAAK,GACtBC,WAAY,CAAC,GAAK,GAAK,OA2ElBC,IAtEkC1X,KAAK2U,GAqBL3U,KAAK2U,GAiDL,CAAC,EAAK,EAAK,IAKnD,MAAM,GAyBT,cACI/tB,KAAK+wB,WAA2B5xB,EAAW,GAAI,IAAM,GACrDa,KAAKgxB,KAA2B7xB,EAAW,GAAI,IAAM,GACrDa,KAAKixB,aAA2B9xB,EAAW,GAAI,IAAM,GACrDa,KAAKkxB,sBAA2B/xB,EAAW,GAAI,IAAM,GACrDa,KAAKmxB,QAA2BhyB,EAAW,GAAI,IAAM,GACrDa,KAAKoxB,kBAA2BjyB,EAAW,GAAI,IAAM,GACrDa,KAAKqxB,yBAA2BlyB,EAAW,GAAI,IAAM,GACrDa,KAAKsxB,YAA2BnyB,EAAW,EAAG,IAAM,GACpDa,KAAKotB,OAA2BjuB,EAAW,EAAG,IAAM,GACpDa,KAAKqtB,GAA2B,CAAC,EAAG,EAAG,GACvCrtB,KAAKuxB,KAA2BpyB,EAAW,EAAG,IAAM,GACpDa,KAAKwxB,KAA2BryB,EAAW,EAAG,IAAM,GACpDa,KAAKyxB,KAA2BtyB,EAAW,GAAI,IAAM,GACrDa,KAAK0xB,KAA2BvyB,EAAW,GAAI,IAAM,GACrDa,KAAK2xB,KAA2BxyB,EAAW,GAAI,IAAM,GACrDa,KAAK4xB,KAA2BzyB,EAAW,GAAI,IAAM,GACrDa,KAAK6xB,UAA2B,CAAC,EAAG,EAAG,EAAG,IAuB3C,MAAM,GAsBT,cAnBO,KAAA9M,0BAAiE,IAAI,EACrE,KAAAhd,cAAyC,IAAI,EAC7C,KAAA8c,cAAyC,IAAI,EAC7C,KAAAC,YAAqC,IAAI,EACzC,KAAArc,EAAsB,IAAI,GAGzB,KAAAqpB,cAA2C,GAC3C,KAAAC,YAAiD,GACjD,KAAAC,YAAiD,GAEjD,KAAA1b,SAA8B,KAC9B,KAAA2b,UAAgC,KAQpCjyB,KAAKkyB,cAAgB,EACrBlyB,KAAKmyB,cAAgB,EAErBnyB,KAAKyI,EAAEhF,KAAgB,EACvBzD,KAAKyI,EAAE6K,OAAgB,EACvBtT,KAAKyI,EAAE2pB,SAAgB,EACvBpyB,KAAKyI,EAAE4M,MAAgB,IAEvBrV,KAAK6kB,cAAc5d,QAAa,CA1HO,KACA,KACA,KAwHuC,GAC9EjH,KAAK6kB,cAAche,WAAa,CAAC,EAAK,EAAK,EAAK,GAChD7G,KAAK6kB,cAAc9d,SAAa,CAAC,EAAK,EAAK,EAAK,GAEhD/G,KAAK8kB,YAAYuN,SAAY,CAxHU,KACA,IACA,EAsHwB,GAC/DryB,KAAK8kB,YAAYwN,SA5HsB,KA6HvCtyB,KAAK8kB,YAAYyN,QA5HsB,IA6HvCvyB,KAAK8kB,YAAY0N,UA5HsB,KA8HvCxyB,KAAK8N,UAAY,CAAC,EAAG,EAAG,EAAG,EAAG,GAE9B9N,KAAKuS,aAAkBpT,EAAWqT,EAAO+L,UAAW,KAAM,GAC1Dve,KAAKyyB,gBAAkBtzB,EAAWyN,EAAUC,SAAU,IAAM,MAC5D7M,KAAKiyB,UAAkB,IAAI,EAGxB,WAIP,aACI,OAAOjyB,KAAK+xB,YAAoB,OAGpC,mBACI,OAAO/xB,KAAKkyB,cAGhB,mBACI,OAAOlyB,KAAKmyB,cAGH,KAAKO,G,yCACd,OAAOhd,QAAQC,UAAUlS,KAAK,IAAY,kCAEtCzD,KAAKsW,SAAW,IAAI,EAEpB,MAAMqc,EAAwC3yB,KAAKsW,SAASqc,sBAS5D,GARIA,EAAsBngB,EAAOogB,4BAC7B5yB,KAAKuS,aAAaC,EAAOogB,2BAA4B,GAErDD,EAAsBngB,EAAOC,6BAC7BzS,KAAKuS,aAAaC,EAAOC,4BAA6B,GAE1DzS,KAAKuS,aAAaC,EAAOqgB,sBAAuB,GAE3C7yB,KAAK8yB,gBAAgBJ,EAASC,GAC/B,OAAO,EAGX,WAAW3yB,KAAKsW,SAASyc,WAAW/yB,KAAKuS,aAAcmgB,EAAQhU,SAC3D,OAAO,EAGX1e,KAAKgzB,sBAELhd,QAAQid,IAAI,sBACZjzB,KAAKkzB,kBAEL,MACM7b,EADiCrX,KAAKsW,SAAS6c,eACZC,gBAgBzC,OAfApzB,KAAK+xB,YAAoB,aAAU/xB,KAAKsW,SAAS+c,oBAAoB,SAAUhc,GAG/ErX,KAAKsW,SAASgd,qBAAqBtzB,MAEnCA,KAAKmyB,cAAgBnyB,KAAKkyB,cAE1BlyB,KAAKuzB,2BACCvzB,KAAKwzB,eACXxzB,KAAKsW,SAAS7R,QAEduR,QAAQid,IAAI,sBAAwBjzB,KAAKkzB,kBAAoB,cAE7DlzB,KAAKyzB,iBAEE,SAIP,gBAAgBf,EAA0BC,GAC9C,IAAKD,EACD,OAAO,EAGX,GAAIA,EAAQgB,WACR1zB,KAAKkyB,cAAgBQ,EAAQgB,SACzB1zB,KAAKkyB,cAAgB,GAErB,OADAlc,QAAQvC,MAAM,4CACP,EAGf,GAAIif,EAAQiB,YAAa,CACrB,IAAKhB,EAAsBngB,EAAOgO,cAE9B,OADAxK,QAAQvC,MAAM,4CACP,EAEXzT,KAAKuS,aAAaC,EAAOgO,eAAgB,EAE7C,GAAIkS,EAAQkB,8BAA+B,CACvC,IAAKjB,EAAsBngB,EAAOC,2BAE9B,OADAuD,QAAQvC,MAAM,4CACP,EAEXzT,KAAKuS,aAAaC,EAAOC,4BAA6B,EAE1D,GAAIigB,EAAQmB,eAAgB,CACxB,IAAKlB,EAAsBngB,EAAOyP,iBAC7B0Q,EAAsBngB,EAAOwP,aAE9B,OADAhM,QAAQvC,MAAM,4DACP,EAGPkf,EAAsBngB,EAAOwP,cAC7BhM,QAAQvC,MAAM,6DAElBzT,KAAKuS,aAAaC,EAAOyP,gBAAiB,EAE9C,GAAIyQ,EAAQoB,aAAc,CACtB,IAAKnB,EAAsBngB,EAAOyP,iBAC7B0Q,EAAsBngB,EAAOwP,aAE9B,OADAhM,QAAQvC,MAAM,4DACP,EAGPkf,EAAsBngB,EAAOyP,gBAC7BjM,QAAQvC,MAAM,6DAElBzT,KAAKuS,aAAaC,EAAOwP,cAAe,EAE5C,GAAI0Q,EAAQqB,wBAAyB,CACjC,IAAKpB,EAAsBngB,EAAOmO,sBAE9B,OADA3K,QAAQvC,MAAM,sDACP,EAEXzT,KAAKuS,aAAaC,EAAOmO,uBAAwB,EAKrD,GAHI+R,EAAQsB,YACRh0B,KAAKuS,aAAaC,EAAOyhB,WAAY,GAErCvB,EAAQwB,qBAAsB,CAC9B,IAAKvB,EAAsBngB,EAAOsP,oBAE9B,OADA9L,QAAQvC,MAAM,0DACP,EAEXzT,KAAKuS,aAAaC,EAAOsP,qBAAsB,EAEnD,GAAI4Q,EAAQyB,eAAgB,CACxB,IAAKxB,EAAsBngB,EAAO0P,cAE9B,OADAlM,QAAQvC,MAAM,oDACP,EAEXzT,KAAKuS,aAAaC,EAAO0P,eAAgB,EAM7C,GAJIwQ,EAAQ0B,YACRp0B,KAAKq0B,UAAY3B,EAAQ0B,UACzBp0B,KAAKuS,aAAaC,EAAO8hB,WAAY,GAErC5B,EAAQ6B,0BAA2B,CACnC,IAAK5B,EAAsBngB,EAAO4P,yBAE9B,OADApM,QAAQvC,MAAM,2CACP,EAEXzT,KAAKuS,aAAaC,EAAO4P,0BAA2B,EAQxD,GANIsQ,EAAQ8B,wBACRx0B,KAAKyI,EAAE4M,MAAQqd,EAAQ8B,sBACF,UAAjBx0B,KAAKyI,EAAE4M,QACPrV,KAAKuS,aAAaC,EAAOqgB,sBAAuB,IAGpDH,EAAQ+B,4BAA6B,CACrC,IAAK9B,EAAsBngB,EAAO6P,yBAE9B,OADArM,QAAQvC,MAAM,wEACP,EAEXzT,KAAKuS,aAAaC,EAAO6P,0BAA2B,EAMxD,OAJIqQ,EAAQgC,wBACR10B,KAAKuS,aAAaC,EAAOkO,sBAAuB,IAG7C,EAGH,gBACJ1gB,KAAKyI,EAAEic,MAAQiQ,YAAYC,MAAQ,IACnC50B,KAAKyI,EAAEhF,KAAQzD,KAAKyI,EAAEic,MAMnB,UACH,IAAImQ,EAAsB70B,KAAKsW,SAASue,aACnCA,IACD70B,KAAKsW,SAASwe,eACd90B,KAAK+0B,UAEL/0B,KAAKsW,SAAS0e,QAAQh1B,KAAKuS,cAEvBvS,KAAKuS,aAAaC,EAAO8hB,WACrBt0B,KAAKyI,EAAEhF,KAAOzD,KAAKyI,EAAEic,MAAS1kB,KAAKq0B,YACvCQ,GAAa,IAIhBA,GAID70B,KAAKsW,SAAS2e,YAEVj1B,KAAKuS,aAAaC,EAAOyhB,WACzBj0B,KAAKk1B,gBANTvhB,OAAOwhB,sBAAsBn1B,KAAKo1B,QAAQz2B,KAAKqB,OAWzC,e,yCACV,OAAO0V,QAAQC,UAAUlS,KAAK,IAAY,wCAChCzD,KAAKq1B,oBACLr1B,KAAKs1B,iBACPt1B,KAAKuS,aAAaC,EAAO6P,iCACnBriB,KAAKu1B,4BAKf,qBACJ,IAAK,IAAIC,KAAQvH,GACbjuB,KAAK8xB,cAAc0D,EAAKtH,SAAWsH,EAAK93B,KAOlC,iB,yCACV,MACM+3B,EADiCz1B,KAAKsW,SAAS6c,eACbuC,kBAExC,OAAO,IAAIhgB,QAAQ,CAACC,EAASC,KACzBrC,EAAGoiB,SAASF,EAAU,CAAC/gB,EAAWqB,KAC1BA,IACAC,QAAQvC,MAAM,kCAAoCsC,GAClDH,EAAOG,IAGXvW,EAAO,YAAakV,EAAM,gDAC1B,IAAIkhB,EAAUlhB,EAAKkhB,QACnBp2B,EAAOqE,MAAM+T,QAAQge,GAAU,oCAE/B,IAAK,IAAIz4B,EAAY,EAAGA,EAAIy4B,EAAQv0B,SAAUlE,EAAG,CAC7C,MAAMO,EAAqBk4B,EAAQz4B,GAAGO,KAChCm4B,EAAqBD,EAAQz4B,GAAG04B,YACtCr2B,EAAOqE,MAAM+T,QAAQie,IAAsC,IAAtBA,EAAYx0B,OAAc,wBAE/D,IAAIy0B,EAAuB,GAC3B,IAAK,IAAIC,EAAY,EAAGA,EAAIF,EAAYx0B,SAAU00B,EAC9CD,EAAOv2B,KAAKs2B,EAAYE,IAG5B,MAAMC,EAAuBh2B,KAAK8xB,cAAcp0B,GAE5Cs4B,IAAcppB,EAAUqpB,YAAcj2B,KAAKyyB,gBAAgBuD,IAC3Dh2B,KAAKyyB,gBAAgBuD,GAAW1pB,cAAc/M,KAAKu2B,GAG3DngB,WAKE,c,yCACV,OAAOD,QAAQC,UAAUlS,KAAK,IAAY,kCACtC,MAAMyyB,EAA+Bl2B,KAAKuS,aAAaC,EAAOuP,sBAC9D,IAAK,IAAIyT,KAAQvH,GACRiI,GAAuBV,EAAKnpB,OAASoZ,EAAWC,OAC3CwQ,GAAwBV,EAAKnpB,OAASoZ,EAAWE,0BAGrD3lB,KAAKm2B,WAAWX,WAKpB,oB,yCACV,MACMY,EADiCp2B,KAAKsW,SAAS6c,eACLiD,iBAEhD,OAAO,IAAI1gB,QAAQ,CAACC,EAASC,KACzBrC,EAAGoiB,SAASS,EAAkB,CAAC1hB,EAAWqB,KAClCA,IACAC,QAAQvC,MAAM,sCAAwCsC,GACtDH,EAAOG,IAGXvW,EAAO,cAAekV,EAAM,iDAC5B,IAAI2hB,EAAY3hB,EAAK2hB,UACrB72B,EAAOqE,MAAM+T,QAAQye,GAAY,sCAEjC,IAAK,IAAIl5B,EAAY,EAAGA,EAAIk5B,EAAUh1B,SAAUlE,EAAG,CAC/C,MAAM0C,EAAaw2B,EAAUl5B,GAAG0C,MAC1BC,EAAau2B,EAAUl5B,GAAG2C,GAC1BC,EAAas2B,EAAUl5B,GAAG4C,MAE1Bu2B,EAAmB,IAAI12B,EAASC,EAAOC,EAAIC,GACjDC,KAAKu2B,cAAch3B,KAAK+2B,GAE5B3gB,WASE,WAAW6f,G,yCACrB,MAAMrC,EAAiCnzB,KAAKsW,SAAS6c,eAC/CqD,EAAiCrD,EAAeqD,UAChDC,EAAiCtD,EAAesD,YAChDC,EAAiCvD,EAAewD,aAAanB,EAAKtH,SAExE,OAAO,IAAIxY,QAAQ,CAAOC,EAASC,IAAW,kCAC1CrC,EAAGoiB,SAASe,EAAW,CAAOhiB,EAAWqB,IAAsB,kCACvDA,IACAC,QAAQvC,MAAM,8BAAgCsC,GAC9CH,EAAOG,IAGXvW,EAAO,WAAYkV,EAAM,8CACzB,IAAIkiB,EAASliB,EAAKkiB,OAClBp3B,EAAOqE,MAAM+T,QAAQgf,GAAS,mCAE9B,IAAIpR,EAAyB,KAGzBA,EAFAxlB,KAAKuS,aAAaC,EAAOqgB,sBACzB2C,EAAKnpB,OAASoZ,EAAWI,OAAS2P,EAAKnpB,OAASoZ,EAAWM,QACnD/lB,KAAKsW,SAASugB,YAAY72B,KAAMw1B,EAAKnpB,KAAMmpB,EAAK93B,MAAM,GAGtDsC,KAAKsW,SAASugB,YAAY72B,KAAMw1B,EAAKnpB,KAAMmpB,EAAK93B,KAAM83B,EAAKvrB,OAEvEjK,KAAKyyB,gBAAgB+C,EAAK93B,MAAQ8nB,EAElC,IAAIpnB,EAAQw4B,EAAOA,EAAOv1B,OAAS,GACnC,CAEI,MAAMy1B,EAAkB14B,EAAM04B,SAC9B,IAAK,IAAIC,KAAeD,EAAU,CAC9B,MAAMp5B,EAAgBq5B,EAChBjf,EAAgBgf,EAASC,GAEzBjf,KAAS9X,KAAK+xB,cAChB/xB,KAAK+xB,YAAYja,SAAe9X,KAAKsW,SAAS+c,oBAAoB31B,EAAM84B,EAAY1e,IAGxF0N,EAAMjZ,WAAW7O,GAAQsC,KAAK+xB,YAAYja,GAI9C,MAAMkf,EAAgB54B,EAAM64B,OAC5B,IAAK,IAAIC,KAAaF,EAAQ,CAC1B,MAAMtZ,EAAsBsZ,EAAOE,GAC7Bx5B,EAAsBw5B,EACtB52B,EAAsBod,EAAQpd,cAC9B+L,EAAsBqR,EAAQrR,KACpC,IAAI9L,EAA2B,KAC/B,GAAY,WAAR7C,EAAmB,CACnB8B,EAAgB,gBAAT6M,EAAwB,+BAC/B,IAAI8qB,EAAkB,GACtB,IAAK,IAAI70B,KAAQob,EAAQpb,KACrB60B,EAAI53B,KAAK+C,GAEb/B,EAASP,KAAKsW,SAAS8gB,mBAAmB92B,EAAe,IAAIoB,YAAYy1B,IAAM,OAE9E,CACD33B,EAAgB,iBAAT6M,EAAyB,gCAChC,IAAI8qB,EAAoB,GACxB,IAAK,IAAI70B,KAAQob,EAAQpb,KACrB60B,EAAI53B,KAAK+C,GAEb/B,EAASP,KAAKsW,SAAS8gB,mBAAmB92B,EAAe,IAAIW,aAAak2B,IAAM,GAGpF3R,EAAMhZ,UAAU9O,GAAQ6C,EAQ5B,IAAIoe,EAAe6W,EAAKzoB,QAAQ,GAC5B6R,EAAe4W,EAAKzoB,QAAQ,GAEnB,KAAT4R,GAAwB,KAATC,EACf4G,EAAMjZ,WAAmB,OAAIvM,KAAK+xB,YAAoB,OAEjD,eAAgBvM,EAAMjZ,YAAiD,OAAnCiZ,EAAMjZ,WAAuB,YACtEoS,EAAO,4BACPC,EAAO,8BAEP4G,EAAMjZ,WAAmB,OAAIvM,KAAK+xB,YAAoB,QAEjD,cAAevM,EAAMjZ,YAAgD,OAAlCiZ,EAAMjZ,WAAsB,WACpEoS,EAAO,wBACPC,EAAO,4BAGPD,EAAO,sBACPC,EAAO,yBAGX,IAAI7R,EAA6B,KACjC,MAAMsqB,EAAoB1Y,EAAOC,EAC7ByY,KAAar3B,KAAKgyB,YAClBjlB,EAAU/M,KAAKgyB,YAAYqF,IAG3BtqB,EAAU/M,KAAKsW,SAASghB,cAAcb,EAAc9X,EAAM8X,EAAc7X,GACpE5e,KAAKuS,aAAaC,EAAOqgB,sBACzB2C,EAAKnpB,OAASoZ,EAAWI,OAAS2P,EAAKnpB,OAASoZ,EAAWM,cACrDhZ,EAAQwqB,gBAAe,EAAMv3B,KAAKyI,EAAE4M,aAGpCtI,EAAQwqB,gBAAe,EAAOv3B,KAAKyI,EAAE4M,OAE/CrV,KAAKgyB,YAAYqF,GAAatqB,GAGlCyY,EAAMzY,QAAUA,EAChByY,EAAMgS,OAEV7hB,eAQJ,sBACJ,IAAI8hB,EAAez3B,KAAKkyB,cACxB,IAAK,IAAI/0B,EAAY,EAAGA,EAAI6wB,EAAS0J,MAAOv6B,EACxC,IAAK,IAAI44B,EAAY,EAAGA,EAAIloB,GAAUxM,SAAU00B,EAAG,CAC/C,MAAMnoB,EAAiBC,GAAUkoB,GACjC,GAAInoB,EAASvB,MAAQlP,EACjB,SAEJ,IAAIw6B,EAAgBF,EACpB,GAAIt6B,GAAK6wB,EAASyC,IAAK,CACnB,IAAImH,EAAY53B,KAAKkyB,cAvlBM,IAulB2B,EAAI,EAC1DyF,EAAWve,KAAKqD,IAAIgb,EAASG,QAExBz6B,IAAM6wB,EAASwC,SAEhBmH,EADA33B,KAAKkyB,cA1lBkB,IA2lBZ9Y,KAAKqD,IAAIgb,EAASz3B,KAAKkyB,cAAgB,IAE7ClyB,KAAKkyB,cA5lBa,IA6lBZ9Y,KAAKqD,IAAIgb,EA5lBG,IA+lBZre,KAAKqD,IAAIgb,EA9lBG,MAimB/BA,GAA2EE,EAC3E33B,KAAK8N,UAAUF,EAASG,UAAYnB,EAAUe,iBAAmBgqB,GAKrE,kBAEJ,MAAM/C,EAAcD,YAAYC,MAAQ,IACxC,IAAI3N,EAAsB,EAS1B,OAPIA,EADe,GAAfjnB,KAAKyI,EAAEhF,KACO,EAGAmxB,EAAM50B,KAAKyI,EAAEhF,KAE/BzD,KAAKyI,EAAEhF,KAAOmxB,EAEP3N,EAGH,eACJ,MAAMG,EAAWpnB,KAAKiyB,UAAU5K,WAEhCrR,QAAQid,IAAI,YAAc7L,GACf,GAAPA,GACApR,QAAQid,IAAI,uCAIZ,wBACJ,IAAIxqB,EAAIzI,KAAKyI,EACTsc,EAA4B/kB,KAAK+kB,0BAEjCkC,EAAwBjnB,KAAKkzB,kBAC7BhM,EAAwBze,EAAEhF,KAAOgF,EAAEic,MAEvC1kB,KAAKiyB,UAAU4F,OAAO5Q,EAAaC,EAAelnB,KAAKq0B,WACvD5rB,EAAE6K,QAznBqC,EAynB3B2T,EACZxe,EAAE2pB,UAtnBqC,MAsnBzBnL,EAEdxe,EAAE6oB,YAAY,GA/lByB,KA+lBpBlY,KAAK0e,IAAIrvB,EAAE2pB,UAC9B3pB,EAAE6oB,YAAY,GA1nByB,IA2nBvC7oB,EAAE6oB,YAAY,GAjmByB,KAimBpBlY,KAAK2e,IAAItvB,EAAE2pB,UAC9B3pB,EAAE2kB,OAAO,GA7nB8B,KA6nBpBhU,KAAK0e,IAAIrvB,EAAE2pB,SAAWhZ,KAAK2U,IAC9CtlB,EAAE2kB,OAAO,GA/nB8B,KAgoBvC3kB,EAAE2kB,OAAO,GA/nB8B,KA+nBpBhU,KAAK2e,IAAItvB,EAAE2pB,SAAWhZ,KAAK2U,IAE9C,IAEIiK,EAAgD,EAA5Bh4B,KAAKsW,SAAS2hB,aAAmD,EAA7Bj4B,KAAKsW,SAAS4hB,cACtEzL,EAHmB,EAGArT,KAAK+e,IAAkD,GAA9C3Q,EAAO4Q,SAASC,SAC5C7L,GAAoBC,EACpBH,EAAmB0L,EAASxL,EAC5BD,EAAmByL,EAASvL,EAC5BvU,EAAmBkB,KAAKkf,IAAI/L,EAAQD,GACpCnU,EAAmBiB,KAAKkf,IAAI7L,EAAMD,GAClC+L,EAAmBrgB,EAAQ4Y,GAAa,GAhnBL,KAinBnC0H,EAAmBrgB,EAAS2Y,GAAa,GAjnBN,KAonBvCtJ,EAAOiR,QAAQhwB,EAAEsoB,WAAYzE,EAAOiM,EAAMhM,EAAQgM,EAAM/L,EAASgM,EAAM/L,EAAM+L,EAbtD,EACA,MAavBhR,EAAOkR,aAAa3T,EAA0Bxd,YAAakB,EAAE6oB,YAAa7oB,EAAE2kB,OAAQ3kB,EAAE4kB,IACtF7F,EAAOmR,SAASlwB,EAAEuoB,KAAMjM,EAA0Bxd,aAClDigB,EAAOoR,iBAAiB7T,EAA0B1d,eAAgBoB,EAAEuoB,KAAMvoB,EAAEsoB,YAC5EvJ,EAAOmR,SAASlwB,EAAEyoB,sBAAuBnM,EAA0B1d,gBAGnEoB,EAAE0oB,QAAQ,IAAM,EAChB1oB,EAAE0oB,QAAQ,IAAM,EAChB1oB,EAAE0oB,QAAQ,IAAM,EAChB3J,EAAOoR,iBAAiBnwB,EAAE2oB,kBAAmB3oB,EAAE0oB,QAAS1oB,EAAEsoB,YAC1DvJ,EAAOmR,SAASlwB,EAAE4oB,yBAA0B5oB,EAAE2oB,mBAE9C5J,EAAOqR,QAAQpwB,EAAE8oB,KAAMxM,EAA0Bxd,YAAa,GAC9DigB,EAAOqR,QAAQpwB,EAAE+oB,KAAMzM,EAA0Bxd,YAAa,GAC9DigB,EAAOsR,gBAAgB,GAAMrwB,EAAE8oB,KAAM,GACrC/J,EAAOsR,gBAAgB,GAAMrwB,EAAE+oB,KAAM,GACrChK,EAAOuR,UAAUhU,EAA0B5d,cAAesB,EAAE6oB,YAAa7oB,EAAE8oB,KAAM,GACjF/J,EAAOuR,UAAUhU,EAA0B5d,cAAe4d,EAA0B5d,cAAesB,EAAE+oB,KAAM,GAG3GxxB,KAAKsW,SAAS0iB,qBAAqBh5B,MAG/B,UAQJ,GAPAwnB,EAAOyR,oBAEPj5B,KAAKsW,SAAS4iB,WAGdl5B,KAAKm5B,wBAEDn5B,KAAKuS,aAAaC,EAAO6P,0BACrBriB,KAAKu2B,cAAcl1B,OAAS,EAAG,CAC/B,MAAMi1B,EAAmBt2B,KAAKu2B,cAAc,GAC5C,IAAI12B,EAAqBy2B,EAAOz2B,MACnB,GAATA,GACAG,KAAKu2B,cAAcrxB,QACD,MAAdoxB,EAAOx2B,GACPE,KAAKkyB,eAAiBoE,EAAOv2B,MAG7BC,KAAKkyB,eAAiBoE,EAAOv2B,MAEjCiW,QAAQid,IAAI,cAAgBjzB,KAAKkyB,gBAGjCoE,EAAOz2B,QAAUA,EAK7B,IAAKG,KAAKuS,aAAaC,EAAOuP,uBACtB/hB,KAAKklB,cAAgBllB,KAAKilB,aAAc,CACxCjlB,KAAKgzB,sBACL,MAAMhU,EAAqChf,KAAKuS,aAAaC,EAAOC,2BACpEzS,KAAKsW,SAAS0O,gBAAgBhlB,KAAKilB,aAAcjlB,KAAKklB,aAAclG,GACpEhf,KAAKmyB,cAAgBnyB,KAAKklB,aAE1BllB,KAAKyzB,gBAI6BzzB,KAAKuS,aAAaC,EAAOogB,2BAG/D5yB,KAAKo5B,2BACLp5B,KAAKq5B,uBACLr5B,KAAKsW,SAASgjB,UAAUt5B,KAAKiyB,UAAWjyB,KAAKklB,aAAcllB,KAAKuS,gBAGhEvS,KAAKu5B,oBACLv5B,KAAKw5B,gBACLx5B,KAAKsW,SAASgjB,UAAUt5B,KAAKiyB,UAAWjyB,KAAKklB,aAAcllB,KAAKuS,cAGhEvS,KAAKsW,SAASuH,kBAEd7d,KAAKy5B,kBACLz5B,KAAK05B,cACL15B,KAAKsW,SAASqjB,WAMd,2BACJ,IAAK,IAAIx8B,EAASyP,EAAUyiB,gBAAiBlyB,GAAKyP,EAAUgjB,gBAAiBzyB,EAAG,CAC5E,MAAMqoB,EAAexlB,KAAKyyB,gBAAgBt1B,GACtCqoB,GACAxlB,KAAK45B,0BAA0BpU,IAKnC,kBACJ,IAAK,IAAIroB,EAASyP,EAAUyiB,gBAAiBlyB,GAAKyP,EAAUgjB,gBAAiBzyB,EAAG,CAC5E,MAAMqoB,EAAexlB,KAAKyyB,gBAAgBt1B,GACtCqoB,GACAA,EAAMtH,QAKV,uBACJ,MAAM2b,EAAa75B,KAAKuS,aAAaC,EAAOuP,sBACdnV,EAAUoG,8BACVpG,EAAUe,gBAClCmsB,EAAW95B,KAAKuS,aAAaC,EAAOuP,sBACZnV,EAAU+hB,4BACV/hB,EAAU2hB,cAExC,IAAK,IAAIpxB,EAAS08B,EAAO18B,GAAK28B,IAAO38B,EAAG,CACpC,MAAMqoB,EAAmBxlB,KAAKyyB,gBAAgBt1B,GAE9C,IAAKqoB,EACD,SAGJ,MAAM5X,EAAkBC,GAAU1Q,EAAI08B,GAChCE,EAAkB/5B,KAAK8N,UAAU3Q,EAAI08B,GAE3CrU,EAAMwU,iBAEN,MAAMC,EA3vB6B,KA2vBJj6B,KAAKyI,EAAE6K,OAChC4mB,EAAyBtsB,EAASuiB,OAClCgK,EAAyBvsB,EAASwiB,YAClCgK,EAAyBxsB,EAASqiB,MAClCoK,EAAyBzsB,EAASsiB,WAClCoK,EA3vB6B,EA2vBJ1sB,EAASyiB,UAClCkK,EAhwB6B,IAkwB7BC,EApwB6B,GAowBW5sB,EAAS0iB,aACjDmK,EAtwB6B,EAswBgB7sB,EAAS2iB,YACtDmK,EAnwB6B,EAowB7BC,EAnwB6B,KAowB7BC,EAnwB6B,EAqwBnC,IAAK,IAAIC,EAAU,EAAGA,EAAKd,IAAWc,EAAI,CACtC,MAAMC,EAAwBb,EAAgBY,EAAKN,EAC7CtK,EAAwBmK,EAAqC,EAAxB5S,EAAOuT,eAAwBV,EACpEh0B,EAAwB,EAA8B,EAAxBmhB,EAAOuT,eACrCC,EAAwBd,EAAsC,EAAxB1S,EAAOuT,eAAwBZ,EACrEc,EAAwB,EAA+B,EAAxBzT,EAAOuT,eAAwBN,EAC9DS,EAAwBhB,EAAsC,EAAxB1S,EAAOuT,eAAwBZ,EACrEgB,EAAwBL,EAAY7K,EACpCmL,EAAwBD,EAAiBT,EACzCW,EAAwBF,EAAiBR,EACzCW,EAAwBH,EAAiBP,EAE/CpV,EAAM+V,sBACFniB,KAAK0e,IAAIsD,GAAUJ,EAAS5hB,KAAK0e,IAAIuD,GAAUJ,EAAUT,EAAYphB,KAAK2e,IAAIuD,GAAUJ,EACxF9hB,KAAK0e,IAAIsD,EAAS,KAAQJ,EAAS5hB,KAAK0e,IAAIuD,EAAS,KAAQJ,EAAUT,EACvEphB,KAAK2e,IAAIuD,EAAS,KAAQJ,EAAS70B,GAChCrG,KAAKyI,EAAE6K,OAt1BiB,EAs1BRunB,GAAyBP,EAAgBrK,GAAoB,EAAV7W,KAAK2U,IAC3E8M,GAEJrV,EAAMgW,0BAA0Bx7B,KAAK+H,eACrCyd,EAAMtH,SAKV,oBACJ,IAAK,IAAI/gB,EAASyP,EAAUyiB,gBAAiBlyB,GAAKyP,EAAUgjB,gBAAiBzyB,EAAG,CAC5E,MAAMqoB,EAAexlB,KAAKyyB,gBAAgBt1B,GACtCqoB,GACAxlB,KAAKy7B,mBAAmBjW,IAK5B,gBACJ,MAAMqU,EAAa75B,KAAKuS,aAAaC,EAAOuP,sBACdnV,EAAUoG,8BACVpG,EAAUe,gBAClCmsB,EAAW95B,KAAKuS,aAAaC,EAAOuP,sBACZnV,EAAU+hB,4BACV/hB,EAAU2hB,cAExC,IAAK,IAAIpxB,EAAS08B,EAAO18B,GAAK28B,IAAO38B,EAAG,CACpC,MAAMqoB,EAAmBxlB,KAAKyyB,gBAAgBt1B,GAE9C,IAAKqoB,EACD,SAGJ,MAAM5X,EAAiBC,GAAU1Q,EAAI08B,GAC/BE,EAAiB/5B,KAAK8N,UAAU3Q,EAAI08B,GAE1CrU,EAAMwU,iBAEN,MAAMC,EA/zB6B,KA+zBJj6B,KAAKyI,EAAE6K,OAChC4mB,EAAyBtsB,EAASuiB,OAClCgK,EAAyBvsB,EAASwiB,YAClCgK,EAAyBxsB,EAASqiB,MAClCoK,EAAyBzsB,EAASsiB,WAClCoK,EA/zB6B,EA+zBJ1sB,EAASyiB,UAClCkK,EAp0B6B,IAs0B7BC,EAx0B6B,GAw0BW5sB,EAAS0iB,aACjDmK,EA10B6B,EA00BgB7sB,EAAS2iB,YACtDmK,EAv0B6B,EAw0B7BC,EAv0B6B,KAw0B7BC,EAv0B6B,EAy0BnC,IAAK,IAAIC,EAAU,EAAGA,EAAKd,IAAWc,EAAI,CACtC,MAAMC,EAAwBb,EAAgBY,EAAKN,EAC7CtK,EAAwBmK,EAAqC,EAAxB5S,EAAOuT,eAAwBV,EACpEh0B,EAAwB,EAA8B,EAAxBmhB,EAAOuT,eACrCC,EAAwBd,EAAsC,EAAxB1S,EAAOuT,eAAwBZ,EACrEc,EAAwB,EAA+B,EAAxBzT,EAAOuT,eAAwBN,EAC9DS,EAAwBhB,EAAsC,EAAxB1S,EAAOuT,eAAwBZ,EACrEgB,EAAwBL,EAAY7K,EACpCmL,EAAwBD,EAAiBT,EACzCW,EAAwBF,EAAiBR,EACzCW,EAAwBH,EAAiBP,EAE/CpV,EAAM+V,sBACFniB,KAAK0e,IAAIsD,GAAUJ,EAAS5hB,KAAK0e,IAAIuD,GAAUJ,EAAUT,EAAYphB,KAAK2e,IAAIuD,GAAUJ,EACxF9hB,KAAK0e,IAAIsD,EAAS,KAAQJ,EAAS5hB,KAAK0e,IAAIuD,EAAS,KAAQJ,EAAUT,EACvEphB,KAAK2e,IAAIuD,EAAS,KAAQJ,EAAS70B,GAChCrG,KAAKyI,EAAE6K,OA15BiB,EA05BRunB,GAAyBP,EAAgBrK,GAAoB,EAAV7W,KAAK2U,IAC3E8M,IAIZ76B,KAAKsW,SAASolB,oBAGV,cACJ,MAAM7B,EAAQ75B,KAAKuS,aAAaC,EAAOuP,sBACbnV,EAAUoG,8BACVpG,EAAUe,gBAC9BmsB,EAAM95B,KAAKuS,aAAaC,EAAOuP,sBACXnV,EAAU+hB,4BACV/hB,EAAU2hB,cAEpC,IAAK,IAAIpxB,EAAS08B,EAAO18B,GAAK28B,IAAO38B,EAAG,CACpC,MAAMqoB,EAAmBxlB,KAAKyyB,gBAAgBt1B,GAC1CqoB,GACAA,EAAMtH,QAKV,wBAAwByd,GAC5Bn8B,EAAoB,KAAbm8B,EAAEt6B,OAAe,kDACxB,IAAK,IAAIlE,EAAc,EAAGA,EAAI,KAAMA,EAChC6C,KAAK+H,cAAcN,MAAMtK,GAAKw+B,EAAEx+B,GAEpCqqB,EAAOoR,iBAAiB54B,KAAK+H,cAAcF,oBAAqB7H,KAAK+H,cAAcN,MAC3DzH,KAAK+kB,0BAA0B1d,gBACvDmgB,EAAOmR,SAAS34B,KAAKyI,EAAEwoB,aAAcjxB,KAAK+H,cAAcN,OACxD+f,EAAOoU,WAAW57B,KAAK+H,cAAcJ,sBAAuB3H,KAAKyI,EAAEwoB,cAG/D,0BAA0BzL,GAC9B,GAAIA,EAAMlZ,cAAcjL,OAAS,EAC7B,IAAK,IAAIoG,KAAS+d,EAAMlZ,cACpBtM,KAAK67B,wBAAwBp0B,GAC7B+d,EAAMwU,iBACNxU,EAAMgW,0BAA0Bx7B,KAAK+H,eACrCyd,EAAMtH,OAKV,mBAAmBsH,GACvB,GAAIA,EAAMlZ,cAAcjL,OAAS,EAC7B,IAAK,IAAIoG,KAAS+d,EAAMlZ,cACpBtM,KAAK67B,wBAAwBp0B,GAC7B+d,EAAMgW,0BAA0Bx7B,KAAK+H,eAI7Cyd,EAAMwU,kB,4SCp5Cd,W,mCACI,MAAMtb,EAAS1G,SAAS8jB,eAAe,OACjC9uB,EAAqB,IAAI,GACzB0lB,EAA2B,CAC7BhU,OAAQA,EACRqV,yBAAyB,EACzBL,SAAU,KAEd1mB,EAASwqB,KAAK9E,GACTjvB,KAAM4Q,IACCA,EACArH,EAASooB,UAGTpf,QAAQvC,MAAM,oCAGrB4C,MAAO5C,IACJuC,QAAQvC,MAAMA,QAI1BsoB","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/**\r\n * Alias type for value that can be null\r\n */\r\nexport type Nullable<T> = T | null;\r\n\r\n/**\r\n * Alias type for number that are floats\r\n */\r\nexport type float = number;\r\n\r\n/**\r\n * Alias type for number that are doubles.\r\n */\r\nexport type double = number;\r\n\r\n/**\r\n * Alias type for number that are integer\r\n */\r\nexport type int = number;\r\n\r\n/**\r\n * Alias type for number that are unsigned integer\r\n */\r\nexport type uint32_t = number;\r\nexport type size_t   = number;\r\n\r\n/**\r\n * Alias type for number array or Float32Array\r\n */\r\nexport type FloatArray = number[] | Float32Array;\r\n\r\n/**\r\n * Alias type for primitive types\r\n */\r\nexport type Primitive = undefined | null | boolean | string | number | Function;\r\n\r\n/**\r\n * Type modifier to make all the properties of an object Readonly\r\n */\r\nexport type Immutable<T> = T extends Primitive\r\n  ? T\r\n  : T extends Array<infer U>\r\n  ? ReadonlyArray<U>\r\n  : /* T extends Map<infer K, infer V> ? ReadonlyMap<K, V> : // es2015+ only */\r\n  DeepImmutable<T>;\r\n\r\n/**\r\n * Type modifier to make all the properties of an object Readonly recursively\r\n */\r\nexport type DeepImmutable<T> = T extends Primitive\r\n  ? T\r\n  : T extends Array<infer U>\r\n  ? DeepImmutableArray<U>\r\n  : /* T extends Map<infer K, infer V> ? DeepImmutableMap<K, V> : // es2015+ only */\r\n  DeepImmutableObject<T>;\r\n\r\nexport interface DeepImmutableArray<T> extends ReadonlyArray<DeepImmutable<T>> { }\r\nexport type DeepImmutableObject<T> = { readonly [K in keyof T]: DeepImmutable<T[K]> };\r\n\r\n/**\r\n * Function to merge 2 TypedArrays\r\n */\r\nexport function MergeTypedArrays(a: any, b: any) {\r\n  // Checks for truthy values on both arrays\r\n  if(!a && !b) throw 'Please specify valid arguments for parameters a and b.';  \r\n\r\n  // Checks for truthy values or empty arrays on each argument\r\n  // to avoid the unnecessary construction of a new array and\r\n  // the type comparison\r\n  if(!b || b.length === 0) return a;\r\n  if(!a || a.length === 0) return b;\r\n\r\n  // Make sure that both typed arrays are of the same type\r\n  if(Object.prototype.toString.call(a) !== Object.prototype.toString.call(b))\r\n      throw 'The types of the two arguments passed for parameters a and b do not match.';\r\n\r\n  let c = new a.constructor(a.length + b.length);\r\n  c.set(a);\r\n  c.set(b, a.length);\r\n\r\n  return c;\r\n}\r\n\r\n/**\r\n * Returns an array of the given size filled with element built from the given constructor and the paramters\r\n * @param size the number of element to construct and put in the array\r\n * @param itemBuilder a callback responsible for creating new instance of item. Called once per array entry.\r\n * @returns a new array filled with new objects\r\n */\r\nexport function BuildArray<T>(size: number, itemBuilder: () => T): Array<T> {\r\n  const a: T[] = [];\r\n  for (let i = 0; i < size; ++i) {\r\n      a.push(itemBuilder());\r\n  }\r\n  return a;\r\n}\r\n\r\n/**\r\n * Implementation of assert function.\r\n * @param condition the condition that should be true\r\n * @param message the error message\r\n */\r\nexport function ASSERT(condition: boolean, message: string) {\r\n  if (!condition) {\r\n      message = message || \"Assertion failed\";\r\n      if (typeof Error !== \"undefined\") {\r\n          throw new Error(message);\r\n      }\r\n      throw message; // Fallback\r\n  }\r\n}","import { float, int } from \"./types\";\r\n\r\n/**\r\n * Defines the base class for Behavior of specific backends.\r\n */\r\nexport class Behavior {\r\n\r\n    private _frame: int;\r\n    private _op: string;\r\n    private _count: int;\r\n\r\n    constructor(frame: int, op: string, count: int) {\r\n        this._frame = frame;\r\n        this._op    = op;\r\n        this._count = count;\r\n    }\r\n\r\n    public get frame(): int {\r\n        return this._frame;\r\n    }\r\n\r\n    public set frame(frame: int) {\r\n        this._frame = frame\r\n    }\r\n\r\n    public get op(): string {\r\n        return this._op;\r\n    }\r\n\r\n    public get count(): int {\r\n        return this._count;\r\n    }\r\n\r\n}","/// <reference path=\"../node_modules/@webgpu/types/dist/index.d.ts\" />\r\n\r\nimport { Nullable, int, size_t, uint32_t, MergeTypedArrays } from \"./types\";\r\nimport { ContextWebGPU } from \"./context\";\r\n\r\n/**\r\n * Defines the abstract Buffer Class.\r\n */\r\nexport class Buffer {\r\n\r\n    public dispose(): void { }\r\n\r\n}\r\n\r\n/**\r\n * Defines the buffer wrapper of WebGPU, abstracting the vertex and index buffer binding.\r\n */\r\nexport class BufferWebGPU implements Buffer {\r\n\r\n    private _buf: GPUBuffer;\r\n    private _usage: GPUBufferUsageFlags;\r\n    private _totalComponents: size_t;\r\n    private _stride: size_t = 0;\r\n    private _offset: int = 0;\r\n    private _size: size_t = 0;\r\n\r\n    constructor(context: Nullable<ContextWebGPU>,\r\n                totalComponents: int,\r\n                numComponents: int,\r\n                buffer: Float32Array | Uint16Array,\r\n                isIndex: boolean) {\r\n        this._usage = isIndex ? GPUBufferUsage.INDEX : GPUBufferUsage.VERTEX;\r\n        this._totalComponents = totalComponents\r\n\r\n        if (buffer instanceof Float32Array) {\r\n            const sizeOfFloat: size_t = buffer.BYTES_PER_ELEMENT; // float size => 4 bytes\r\n            this._size = numComponents * sizeOfFloat;\r\n            // Create buffer for vertex buffer. Because float is multiple of 4 bytes, dummy padding isnt' needed.\r\n            const bufferSize: uint32_t = sizeOfFloat * buffer.length;\r\n            this._buf                  = context.createBuffer(bufferSize, this._usage | GPUBufferUsage.COPY_DST);\r\n\r\n            context.setBufferData(this._buf, 0, bufferSize, buffer);\r\n        }\r\n        else if (buffer instanceof Uint16Array) {\r\n            const sizeOfUint16: size_t = buffer.BYTES_PER_ELEMENT; // Uint16 size => 2 bytes\r\n            this._size = numComponents * sizeOfUint16;\r\n            // Create buffer for index buffer. Because unsigned short is multiple of 2 bytes, in order to align\r\n            // with 4 bytes of dawn metal, dummy padding need to be added.\r\n            if (this._totalComponents % 2 !== 0)\r\n            {\r\n                const dummyPadding: Uint16Array = new Uint16Array([0.0]);\r\n                buffer = MergeTypedArrays(buffer, dummyPadding);\r\n            }\r\n\r\n            const bufferSize: uint32_t = sizeOfUint16 * buffer.length;\r\n            this._buf                  = context.createBuffer(bufferSize, this._usage | GPUBufferUsage.COPY_DST);\r\n\r\n            context.setBufferData(this._buf, 0, bufferSize, buffer);\r\n        }\r\n    }\r\n\r\n    public dispose(): void {\r\n        this._buf = null;\r\n    }\r\n\r\n    public get buffer(): GPUBuffer {\r\n        return this._buf;\r\n    }\r\n\r\n    public get totalComponents(): size_t {\r\n        return this._totalComponents;\r\n    }\r\n\r\n    public get stride(): size_t {\r\n        return this._stride;\r\n    }\r\n\r\n    public get offset(): int {\r\n        return this._offset;\r\n    }\r\n\r\n    public get usageBit(): GPUBufferUsageFlags {\r\n        return this._usage;\r\n    }\r\n\r\n    public get dataSize(): int {\r\n        return this._size;\r\n    }\r\n\r\n}","import { ASSERT, Nullable, int, size_t } from \"./types\";\r\nimport { ContextWebGPU } from \"./context\";\r\n\r\n/**\r\n * Defines an abstract RingBuffer Class.\r\n */\r\nexport class RingBuffer {\r\n\r\n    protected _head: size_t = 0;\r\n    protected _tail: size_t = 0;\r\n    protected _size: size_t = 0;\r\n\r\n    constructor(size: size_t) {\r\n        this._tail = size;\r\n        this._size = size;\r\n    }\r\n\r\n    public dispose(): void { }\r\n\r\n    public get size(): size_t {\r\n        return this._size;\r\n    }\r\n\r\n    public get availableSize(): size_t {\r\n        return this._size - this._tail;\r\n    }\r\n\r\n    public reset(size: size_t): boolean {\r\n        return false;\r\n    }\r\n\r\n    public flush() {}\r\n    public destroy() {}\r\n\r\n    /**\r\n     * Allocate size in a RingBuffer, return offset of the buffer.\r\n     */\r\n    public allocate(size: size_t): size_t {\r\n        return 0;\r\n    }\r\n\r\n}\r\n\r\nexport class RingBufferWebGPU extends RingBuffer {\r\n\r\n    private _bufferMappedResultBuffer: GPUBuffer;\r\n    private _pixels: ArrayBuffer;\r\n\r\n    public bufferManager: Nullable<BufferManagerWebGPU> = null;\r\n    \r\n    constructor(bufferManager: Nullable<BufferManagerWebGPU>, size: size_t) {\r\n        super(size);\r\n        this.bufferManager = bufferManager;\r\n\r\n        this.reset(size);\r\n    }\r\n\r\n    public set mappedData(data: [GPUBuffer, ArrayBuffer]) {\r\n        this._bufferMappedResultBuffer = data[0];\r\n        this._pixels = data[1];\r\n    }\r\n\r\n    public push(encoder: GPUCommandEncoder,\r\n                destBuffer: GPUBuffer,\r\n                src_offset: size_t,\r\n                dest_offset: size_t,\r\n                pixels: Float32Array | Uint16Array,\r\n                size: size_t): boolean {\r\n        const writeArray = pixels instanceof Uint16Array ? new Uint16Array(this._pixels) : new Float32Array(this._pixels);\r\n        writeArray.set(pixels);\r\n        \r\n        encoder.copyBufferToBuffer(this._bufferMappedResultBuffer, src_offset, destBuffer, dest_offset,\r\n                                   size);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Reset current buffer and reuse the buffer.\r\n     */\r\n    public reset(size: size_t): boolean {\r\n        if (size > this.size) {\r\n            return false;\r\n        }\r\n\r\n        this._head = 0;\r\n        this._tail = 0;\r\n\r\n        let [resultBuffer, resultData] = this.bufferManager.context.createBufferMapped(GPUBufferUsage.MAP_WRITE | GPUBufferUsage.COPY_SRC, size);\r\n        this._bufferMappedResultBuffer = resultBuffer;\r\n        this._pixels = resultData;\r\n\r\n        return true;\r\n    }\r\n\r\n    public static MapWriteCallback(data: [GPUBuffer, ArrayBuffer], ringBuffer: Nullable<RingBufferWebGPU>): void {\r\n        ASSERT(data !== null, \"Invalid data in MapWriteCallback function.\")\r\n\r\n        ringBuffer.mappedData = data;\r\n        ringBuffer.bufferManager.mappedBufferList.push(ringBuffer);\r\n    }\r\n\r\n    public flush(): void {\r\n        this._head = 0;\r\n        this._tail = 0;\r\n\r\n        this._bufferMappedResultBuffer.unmap();\r\n    }\r\n\r\n    public destroy() {\r\n        this._bufferMappedResultBuffer = null;\r\n    }\r\n\r\n    public reMap() {      \r\n        this._bufferMappedResultBuffer.mapWriteAsync().then((mappedArray) => {\r\n            RingBufferWebGPU.MapWriteCallback([this._bufferMappedResultBuffer, mappedArray], this);\r\n        });\r\n    }\r\n\r\n    public allocate(size: size_t): size_t {\r\n        this._tail += size;\r\n        ASSERT(this._tail < this._size, \"Unable to allocate the requested memory size.\");\r\n\r\n        return this._tail - size;\r\n    }\r\n}\r\n\r\n/**\r\n * Implements a buffer pool to manage buffer allocation and recycle.\r\n */\r\nexport class BufferManager {\r\n\r\n    public static readonly BUFFER_POOL_MAX_SIZE: size_t    = 409600000;\r\n    public static readonly BUFFER_MAX_COUNT: size_t        = 10;\r\n    public static readonly BUFFER_PER_ALLOCATE_SIZE: size_t = BufferManager.BUFFER_POOL_MAX_SIZE / BufferManager.BUFFER_MAX_COUNT;\r\n\r\n    public mappedBufferList: Array<Nullable<RingBuffer>> = new Array<Nullable<RingBuffer>>();\r\n    \r\n    protected _enqueuedBufferList: Array<Nullable<RingBuffer>> = new Array<Nullable<RingBuffer>>();\r\n    protected _bufferPoolSize: size_t;\r\n    protected _usedSize: size_t;\r\n    protected _count: size_t;\r\n\r\n    constructor() {\r\n        this._bufferPoolSize = BufferManager.BUFFER_POOL_MAX_SIZE;\r\n    }\r\n\r\n    public dispose(): void {\r\n        this.destroyBufferPool();\r\n    }\r\n\r\n    public get size(): size_t {\r\n        return this._bufferPoolSize;\r\n    }\r\n\r\n    public resetBuffer(ringBuffer: Nullable<RingBuffer>, size: size_t): boolean {\r\n        const index: int = this._find(ringBuffer);\r\n        \r\n        if (index === -1) {\r\n            return false;\r\n        }\r\n        \r\n        const oldSize: size_t = ringBuffer.size;\r\n\r\n        const result: boolean = ringBuffer.reset(size);\r\n        // If the size is larger than the ring buffer size, reset fails and the ring\r\n        // buffer retains.\r\n        // If the size is equal or smaller than the ring buffer size, reset success\r\n        // and the used size need to be updated.\r\n        if (!result) {\r\n            return false;\r\n        }\r\n        else {\r\n            this._usedSize = this._usedSize - oldSize + size;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public destroyBuffer(ringBuffer: Nullable<RingBuffer>): boolean {\r\n        const index: int = this._find(ringBuffer);\r\n\r\n        if (index === -1) {\r\n            return false;\r\n        }\r\n\r\n        this._usedSize -= ringBuffer.size;\r\n        ringBuffer.destroy();\r\n        this._enqueuedBufferList.splice(index, 1);\r\n\r\n        return true;\r\n    }\r\n\r\n    private _find(ringBuffer: Nullable<RingBuffer>): int {\r\n        if (this._enqueuedBufferList.length > 0) {\r\n            return this._enqueuedBufferList.indexOf(ringBuffer);\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    public destroyBufferPool(): void { }\r\n\r\n    /**\r\n     * Flush copy commands in buffer pool\r\n     */\r\n    public flush(): void {\r\n        for (let buffer of this._enqueuedBufferList) {\r\n            buffer.flush();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Allocate new buffer from buffer pool. \r\n     */\r\n    public allocate(size: size_t, offset: size_t): {buffer: Nullable<RingBuffer>, offset: size_t} {\r\n        return null;\r\n    }\r\n\r\n}\r\n\r\nexport class BufferManagerWebGPU extends BufferManager {\r\n\r\n    public encoder: GPUCommandEncoder;\r\n    public context: Nullable<ContextWebGPU> = null;\r\n    public sync;\r\n\r\n    constructor(context: Nullable<ContextWebGPU>, sync: boolean) {\r\n        super();\r\n        this.context = context;\r\n        this.sync = sync;\r\n\r\n        this.encoder = context.createCommandEncoder();\r\n    }\r\n\r\n    public dispose() {\r\n        this.encoder = null;\r\n    }\r\n\r\n    /**\r\n     * Allocate new buffer from buffer pool. \r\n     */\r\n    public allocate(size: size_t, offset: size_t): {buffer: Nullable<RingBufferWebGPU>, offset: size_t} {\r\n        // If update data by sync method, create new buffer to upload every frame.\r\n        // If updaye data by async method, get new buffer from pool if available. If no available\r\n        // buffer and size is enough in the buffer pool, create a new buffer. If size reach the\r\n        // limit of the buffer pool, force wait for the buffer on mapping.\r\n        // Get the last one and check if the ring buffer is full. If the buffer can hold extra\r\n        // size space, use the last one directly.\r\n        \r\n        let ringBuffer: Nullable<RingBufferWebGPU> = null;\r\n        let cur_offset: size_t               = 0;\r\n        if (this.sync) {\r\n            // Upper limit\r\n            if (this._usedSize + size > this._bufferPoolSize) {\r\n                return {\r\n                    buffer: ringBuffer,\r\n                    offset: offset\r\n                };\r\n            }\r\n\r\n            ringBuffer = new RingBufferWebGPU(this, size);\r\n            this._enqueuedBufferList.push(ringBuffer);\r\n        }\r\n        else {  // Buffer mapping async\r\n            while (this.mappedBufferList.length > 0) {\r\n                ringBuffer = this.mappedBufferList[0] as Nullable<RingBufferWebGPU>;\r\n                if (ringBuffer.availableSize < size) {\r\n                    this.mappedBufferList.shift(),\r\n                    ringBuffer = null;\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (ringBuffer == null) {\r\n                if (this._count < BufferManager.BUFFER_MAX_COUNT) {\r\n                    this._usedSize += size;\r\n                    ringBuffer = new RingBufferWebGPU(this, BufferManager.BUFFER_PER_ALLOCATE_SIZE);\r\n                    this.mappedBufferList.push(ringBuffer);\r\n                    this._count++;\r\n                }\r\n                else if (this.mappedBufferList.length + this._enqueuedBufferList.length < this._count) {\r\n                    // Force wait for the buffer remapping\r\n                    while (this.mappedBufferList.length === 0) {\r\n                        this.context.waitABit();\r\n                    }\r\n\r\n                    ringBuffer = this.mappedBufferList[0] as Nullable<RingBufferWebGPU>;\r\n                    if (ringBuffer.availableSize < size) {\r\n                        this.mappedBufferList.shift();\r\n                        ringBuffer = null;\r\n                    }\r\n                }\r\n                else { // Upper limit\r\n                    return null;\r\n                }\r\n            }\r\n\r\n            if (this._enqueuedBufferList.length === 0\r\n                || this._enqueuedBufferList[this._enqueuedBufferList.length-1] != ringBuffer) {\r\n                this._enqueuedBufferList.push(ringBuffer);\r\n            }\r\n\r\n            // allocate size in the ring buffer\r\n            cur_offset = ringBuffer.allocate(size);\r\n            offset = cur_offset;\r\n        }\r\n\r\n        return {\r\n            buffer: ringBuffer,\r\n            offset: offset\r\n        };\r\n    }\r\n\r\n    public flush(): void {\r\n        // The front buffer in MappedBufferList will be remap after submit, pop the buffer from\r\n        // MappedBufferList.\r\n        if (this.mappedBufferList.length > 0\r\n            && this._enqueuedBufferList[this._enqueuedBufferList.length-1] === this.mappedBufferList[0]) {\r\n            this.mappedBufferList.shift(); // Stack pop\r\n        }\r\n\r\n        for (let buffer of this._enqueuedBufferList) {\r\n            buffer.flush();\r\n        }\r\n\r\n        const copy: GPUCommandBuffer = this.encoder.finish();\r\n        this.context.queue.submit([copy]);\r\n\r\n        // Async function\r\n        if (!this.sync) {\r\n            for (let index: size_t = 0; index < this._enqueuedBufferList.length; ++index) {\r\n                const ringBuffer: Nullable<RingBufferWebGPU> = this._enqueuedBufferList[index] as Nullable<RingBufferWebGPU>;\r\n                ringBuffer.reMap();\r\n            }\r\n        }\r\n        else {\r\n            // All buffers are used once in buffer sync mode.\r\n            for (let index: size_t = 0; index < this._enqueuedBufferList.length; ++index) {\r\n                const ringBuffer: Nullable<RingBufferWebGPU> = this._enqueuedBufferList[index] as Nullable<RingBufferWebGPU>;\r\n                ringBuffer.dispose();\r\n            }\r\n            this._usedSize = 0;\r\n        }\r\n\r\n        this._enqueuedBufferList.length = 0;\r\n        this.encoder = this.context.createCommandEncoder();\r\n    }\r\n\r\n    public destroyBufferPool(): void {\r\n        if (!this.sync) {\r\n            return;\r\n        }\r\n\r\n        for (let ringBuffer of this._enqueuedBufferList) {\r\n            ringBuffer.destroy();\r\n        }\r\n        this._enqueuedBufferList.length = 0;\r\n    }\r\n\r\n}","let glslang = undefined;\r\nexport default async function() {\r\n  if (glslang !== undefined) return glslang;\r\n  // @ts-ignore\r\n  const glslangModule = await import(/* webpackIgnore: true */ 'https://unpkg.com/@webgpu/glslang@0.0.15/dist/web-devel/glslang.js');\r\n  glslang = await glslangModule.default();\r\n  return glslang;\r\n}\r\n","import { float, size_t, BuildArray, uint32_t } from \"./types\";\r\n\r\n\r\nexport class FishPer {\r\n\r\n    public static readonly kWorldPosition: size_t = 3;\r\n    public static readonly kNextPosition: size_t = 3;\r\n\r\n    public worldPosition: Array<float>;\r\n    public scale: float;\r\n    public nextPosition: Array<float>;\r\n    public time: float;\r\n\r\n    constructor() {\r\n        this.worldPosition = BuildArray(FishPer.kWorldPosition, () => 0.0)\r\n        this.nextPosition  = BuildArray(FishPer.kNextPosition, () => 0.0)\r\n    }\r\n\r\n    public static toArray(fishPers: Array<FishPer>): Array<float> {\r\n        let arr: Array<float> = [];\r\n        for (let i = 0; i < fishPers.length; ++i) {\r\n            arr = arr.concat(fishPers[i].getAsArray());\r\n        }\r\n        return arr;\r\n    }\r\n\r\n    public getAsArray(): Array<float> {\r\n        return this.worldPosition.concat(this.scale, this.nextPosition, this.time);\r\n    }\r\n\r\n    public static offsetof(attributeName: string): size_t {\r\n        let offset: size_t = 0;\r\n        switch(attributeName) {\r\n            case \"worldPosition\":\r\n                offset = 0;\r\n                break;\r\n            case \"scale\":\r\n                offset = FishPer.kWorldPosition;\r\n                break;\r\n            case \"nextPosition\":\r\n                offset = FishPer.kWorldPosition + 1;\r\n                break;\r\n            case \"time\":\r\n                offset = FishPer.kWorldPosition + 1 + FishPer.kNextPosition;\r\n                break;\r\n        }\r\n        return offset * 4; // sizeof(float) = 4\r\n    }\r\n\r\n    public get data(): Float32Array {\r\n        return new Float32Array(this.getAsArray());\r\n    }\r\n\r\n    public static get byteSize(): size_t {\r\n        return (FishPer.kWorldPosition + 1 + FishPer.kNextPosition + 1) * 4;\r\n    }\r\n}\r\n\r\nexport class FishPerWithPadding {\r\n\r\n    public static readonly kWorldPosition: size_t = 3;\r\n    public static readonly kNextPosition: size_t = 3;\r\n    public static readonly kPadding: size_t = 56;\r\n\r\n    public worldPosition: Array<float>;\r\n    public scale: float;\r\n    public nextPosition: Array<float>;\r\n    public time: float;\r\n    public padding: Array<float>;\r\n\r\n    constructor() {\r\n        this.worldPosition = BuildArray(FishPerWithPadding.kWorldPosition, () => 0.0)\r\n        this.nextPosition  = BuildArray(FishPerWithPadding.kNextPosition, () => 0.0)\r\n        this.padding  = BuildArray(FishPerWithPadding.kPadding, () => 0.0)\r\n    }\r\n\r\n    public getAsArray(): Array<float> {\r\n        return this.worldPosition.concat(this.scale, this.nextPosition, this.time, this.padding);\r\n    }\r\n\r\n    public get data(): Float32Array {\r\n        return new Float32Array(this.getAsArray());\r\n    }\r\n\r\n    public static get byteSize(): size_t {\r\n        return (FishPer.kWorldPosition + 1 + FishPer.kNextPosition + 1 + FishPerWithPadding.kPadding) * 4;\r\n    }\r\n}\r\n\r\n/**\r\n * Defines the fish vertex uniforms of the fish model of WebGPU.\r\n */\r\nexport class FishVertexUniforms {\r\n\r\n    public static readonly kUniforms: size_t = 3;\r\n\r\n    // Uniforms array: [fishLength, fishWaveLength, fishBendAmount]\r\n    public uniforms: Array<float>;\r\n\r\n    constructor() {\r\n        this.uniforms = BuildArray(FishVertexUniforms.kUniforms, () => 0.0);\r\n    }\r\n\r\n    public get fishLength(): float {\r\n        return this.uniforms[0];\r\n    }\r\n\r\n    public set fishLength(value: float) {\r\n        this.uniforms[0] = value;\r\n    }\r\n\r\n    public get fishWaveLength(): float {\r\n        return this.uniforms[1];\r\n    }\r\n\r\n    public set fishWaveLength(value: float) {\r\n        this.uniforms[1] = value;\r\n    }\r\n\r\n    public get fishBendAmount(): float {\r\n        return this.uniforms[2];\r\n    }\r\n\r\n    public set fishBendAmount(value: float) {\r\n        this.uniforms[2] = value;\r\n    }\r\n\r\n    public get data() {\r\n        return new Float32Array(this.uniforms);\r\n    }\r\n\r\n    public static get byteSize() {\r\n        return FishVertexUniforms.kUniforms * 4;\r\n    }\r\n}\r\n\r\nexport class FogUniforms {\r\n\r\n    public static readonly kUniforms: size_t = 8;\r\n\r\n    // Uniforms array: [fogPower, fogMult, fogOffset, padding, fogColor[4]]\r\n    public uniforms: Array<float>;\r\n\r\n    constructor() {\r\n        this.uniforms = BuildArray(FogUniforms.kUniforms, () => 0.0);\r\n    }\r\n\r\n    public get fogPower(): float {\r\n        return this.uniforms[0];\r\n    }\r\n\r\n    public set fogPower(value: float) {\r\n        this.uniforms[0] = value;\r\n    }\r\n\r\n    public get fogMult(): float {\r\n        return this.uniforms[1];\r\n    }\r\n\r\n    public set fogMult(value: float) {\r\n        this.uniforms[1] = value;\r\n    }\r\n\r\n    public get fogOffset(): float {\r\n        return this.uniforms[2];\r\n    }\r\n\r\n    public set fogOffset(value: float) {\r\n        this.uniforms[2] = value;\r\n    }\r\n\r\n    public get padding(): float {\r\n        return this.uniforms[3];\r\n    }\r\n\r\n    public set padding(value: float) {\r\n        this.uniforms[3] = value;\r\n    }\r\n\r\n    public get fogColor(): Array<float> {\r\n        return this.uniforms.slice(4);\r\n    }\r\n\r\n    public set fogColor(value: Array<float>) {\r\n        this.uniforms[4] = value[0];\r\n        this.uniforms[5] = value[1];\r\n        this.uniforms[6] = value[2];\r\n        this.uniforms[7] = value[3];\r\n    }\r\n\r\n    public get data() {\r\n        return new Float32Array(this.uniforms);\r\n    }\r\n\r\n    public static get byteSize() {\r\n        return FogUniforms.kUniforms * 4;\r\n    }\r\n}\r\n\r\n/**\r\n * Defines the inner uniforms.\r\n */\r\nexport class InnerUniforms {\r\n\r\n    public static readonly kUniforms: size_t = 4;\r\n\r\n    // Uniforms array: [eta, tankColorFudge, refractionFudge, padding]\r\n    public uniforms: Array<float>;\r\n\r\n    constructor() {\r\n        this.uniforms = BuildArray(InnerUniforms.kUniforms, () => 0.0);\r\n    }\r\n\r\n    public get eta(): float {\r\n        return this.uniforms[0];\r\n    }\r\n\r\n    public set eta(value: float) {\r\n        this.uniforms[0] = value;\r\n    }\r\n\r\n    public get tankColorFudge(): float {\r\n        return this.uniforms[1];\r\n    }\r\n\r\n    public set tankColorFudge(value: float) {\r\n        this.uniforms[1] = value;\r\n    }\r\n\r\n    public get refractionFudge(): float {\r\n        return this.uniforms[2];\r\n    }\r\n\r\n    public set refractionFudge(value: float) {\r\n        this.uniforms[2] = value;\r\n    }\r\n\r\n    public get padding(): float {\r\n        return this.uniforms[3];\r\n    }\r\n\r\n    public set padding(value: float) {\r\n        this.uniforms[3] = value;\r\n    }\r\n\r\n    public get data(): Float32Array {\r\n        return new Float32Array(this.uniforms);\r\n    }\r\n\r\n    public static get byteSize(): size_t {\r\n        return InnerUniforms.kUniforms * 4;\r\n    }\r\n}\r\n\r\n/**\r\n * Defines the light factor uniforms.\r\n */\r\nexport class LightFactorUniforms {\r\n\r\n    public static readonly kUniforms: size_t = 2;\r\n\r\n    // Uniforms array: [shininess, specularFactor]\r\n    public uniforms: Array<float>;\r\n\r\n    constructor() {\r\n        this.uniforms = BuildArray(LightFactorUniforms.kUniforms, () => 0.0);\r\n    }\r\n\r\n    public get shininess(): float {\r\n        return this.uniforms[0];\r\n    }\r\n\r\n    public set shininess(value: float) {\r\n        this.uniforms[0] = value;\r\n    }\r\n\r\n    public get specularFactor(): float {\r\n        return this.uniforms[1];\r\n    }\r\n\r\n    public set specularFactor(value: float) {\r\n        this.uniforms[1] = value;\r\n    }\r\n\r\n    public get data(): Float32Array {\r\n        return new Float32Array(this.uniforms);\r\n    }\r\n\r\n    public static get byteSize(): size_t {\r\n        return LightFactorUniforms.kUniforms * 4;\r\n    }\r\n}\r\n\r\nexport class LightUniforms {\r\n\r\n    public static readonly kLightColor: size_t = 4;\r\n    public static readonly kSpecular: size_t = 4;\r\n    public static readonly kAmbient: size_t = 4;\r\n\r\n    public lightColor: Array<float>;\r\n    public specular: Array<float>;\r\n    public ambient: Array<float>;\r\n\r\n    constructor() {\r\n        this.lightColor = BuildArray(LightUniforms.kLightColor, () => 0.0);\r\n        this.specular = BuildArray(LightUniforms.kSpecular, () => 0.0);\r\n        this.ambient = BuildArray(LightUniforms.kAmbient, () => 0.0);\r\n    }\r\n\r\n    public getAsArray(): Array<float> {\r\n        return this.lightColor.concat(this.specular, this.ambient);\r\n    }\r\n\r\n    public get data(): Float32Array {\r\n        return new Float32Array(this.getAsArray());\r\n    }\r\n\r\n    public static get byteSize(): size_t {\r\n        return (LightUniforms.kLightColor + LightUniforms.kSpecular + LightUniforms.kAmbient) * 4;\r\n    }\r\n}\r\n\r\nexport class LightWorldPositionUniform {\r\n\r\n    public static readonly kLightWorldPos: size_t = 3;\r\n    public static readonly kViewProjection: size_t = 16;\r\n    public static readonly kViewInverse: size_t = 16;\r\n\r\n    public lightWorldPos: Array<float>;\r\n    public padding: float;\r\n    public viewProjection: Array<float>;\r\n    public viewInverse: Array<float>;\r\n\r\n    constructor() {\r\n        this.lightWorldPos = BuildArray(LightWorldPositionUniform.kLightWorldPos, () => 0.0);\r\n        this.padding = 0;\r\n        this.viewProjection  = BuildArray(LightWorldPositionUniform.kViewProjection, () => 0.0);\r\n        this.viewInverse  = BuildArray(LightWorldPositionUniform.kViewInverse, () => 0.0);\r\n    }\r\n\r\n    public getAsArray(): Array<float> {\r\n        return this.lightWorldPos.concat(this.padding, this.viewProjection, this.viewInverse);\r\n    }\r\n\r\n    public get data(): Float32Array {\r\n        return new Float32Array(this.getAsArray());\r\n    }\r\n\r\n    public static get byteSize(): size_t {\r\n        return (LightWorldPositionUniform.kLightWorldPos + 1 + LightWorldPositionUniform.kViewProjection + LightWorldPositionUniform.kViewInverse) * 4;\r\n    }\r\n}\r\n\r\nexport class SeaweedPer {\r\n\r\n    // Uniforms array: [time]\r\n    public uniforms: Array<float>;\r\n\r\n    constructor() {\r\n        this.uniforms = BuildArray(\r\n            20, () => 0.0\r\n        );\r\n    }\r\n\r\n    public get time(): Array<float> {\r\n        return this.uniforms;\r\n    }\r\n\r\n    public set time(value: Array<float>) {\r\n        this.uniforms = value;\r\n    }\r\n\r\n    public get data(): Float32Array {\r\n        return new Float32Array(this.uniforms);\r\n    }\r\n\r\n    public get byteSize(): size_t {\r\n        return this.uniforms.length * 4;\r\n    }\r\n}\r\n\r\nexport class WorldUniforms {\r\n\r\n    public static readonly kWorld: size_t = 16;\r\n    public static readonly kWorldInverseTranspose: size_t = 16;\r\n    public static readonly kWorldViewProjection: size_t = 16;\r\n\r\n    public world: Array<float>;\r\n    public worldInverseTranspose: Array<float>;\r\n    public worldViewProjection: Array<float>;\r\n\r\n    constructor() {\r\n        this.world = BuildArray(WorldUniforms.kWorld, () => 0.0);\r\n        this.worldInverseTranspose = BuildArray(WorldUniforms.kWorldInverseTranspose, () => 0.0);\r\n        this.worldViewProjection = BuildArray(WorldUniforms.kWorldViewProjection, () => 0.0);\r\n    }\r\n\r\n    public getAsArray(): Array<float> {\r\n        return this.world.concat(this.worldInverseTranspose, this.worldViewProjection);\r\n    }\r\n\r\n    public get data(): Float32Array {\r\n        return new Float32Array(this.getAsArray());\r\n    }\r\n\r\n    public static get byteSize(): size_t {\r\n        return (WorldUniforms.kWorld + WorldUniforms.kWorldInverseTranspose + WorldUniforms.kWorldViewProjection) * 4;\r\n    } \r\n}\r\n\r\nexport class WorldUniformPer {\r\n\r\n    // Uniforms array: [worldUniforms..]\r\n    public worldUniforms: Array<WorldUniforms>;\r\n\r\n    constructor() {\r\n        this.worldUniforms = BuildArray(\r\n            20, () => new WorldUniforms()\r\n        );\r\n    }\r\n\r\n    public get data(): Float32Array {\r\n        let arr: Array<float> = [];\r\n        for (let i: size_t = 0; i < this.worldUniforms.length; ++i) {\r\n            arr = arr.concat(this.worldUniforms[i].getAsArray());\r\n        }\r\n        return new Float32Array(arr);\r\n    }\r\n\r\n    public get byteSize(): size_t {\r\n        return WorldUniforms.byteSize * this.worldUniforms.length;\r\n    }\r\n}","/// <reference path=\"../node_modules/@webgpu/types/dist/index.d.ts\" />\r\n\r\nimport { BuildArray, int, size_t, uint32_t } from \"./types\";\r\n\r\nexport class ComboRenderPassDescriptor implements GPURenderPassDescriptor {\r\n\r\n    public static readonly kMaxColorAttachments: size_t = 4;\r\n\r\n    public colorAttachments: Array<GPURenderPassColorAttachmentDescriptor>;\r\n    public depthStencilAttachment?: GPURenderPassDepthStencilAttachmentDescriptor;\r\n\r\n    public cColorAttachments: Array<GPURenderPassColorAttachmentDescriptor>;\r\n    public cDepthStencilAttachmentInfo?: GPURenderPassDepthStencilAttachmentDescriptor;\r\n\r\n    public _colorAttachmentCount: uint32_t = 0;\r\n\r\n    constructor(colorAttachmentInfo: Array<GPUTextureView>, depthStencil?: GPUTextureView) {\r\n        this.cColorAttachments = BuildArray(\r\n            ComboRenderPassDescriptor.kMaxColorAttachments,\r\n            () => <GPURenderPassColorAttachmentDescriptor>{}\r\n        );\r\n\r\n        for (let i: uint32_t = 0; i < ComboRenderPassDescriptor.kMaxColorAttachments; ++i) {\r\n            this.cColorAttachments[i].attachment = undefined;\r\n            this.cColorAttachments[i].storeOp = \"store\";\r\n            this.cColorAttachments[i].loadValue = <GPUColorDict>{\r\n                r: 0.0,\r\n                g: 0.0,\r\n                b: 0.0,\r\n                a: 0.0\r\n            };\r\n        }\r\n\r\n        this.cDepthStencilAttachmentInfo = <GPURenderPassDepthStencilAttachmentDescriptor> {\r\n            depthLoadValue: 1.0,\r\n            depthStoreOp: \"store\",\r\n            stencilLoadValue: 0,\r\n            stencilStoreOp: \"store\"\r\n        }\r\n\r\n        this._colorAttachmentCount = colorAttachmentInfo.length;\r\n        let colorAttachmentIndex: uint32_t = 0;\r\n        for (let colorAttachment of colorAttachmentInfo) {\r\n            if (colorAttachment) {\r\n                this.cColorAttachments[colorAttachmentIndex].attachment = colorAttachment;\r\n            }\r\n            ++colorAttachmentIndex;\r\n        }\r\n        this.colorAttachments = this.cColorAttachments\r\n\r\n        if (depthStencil) {\r\n            this.cDepthStencilAttachmentInfo.attachment = depthStencil;\r\n            this.depthStencilAttachment = this.cDepthStencilAttachmentInfo;\r\n        }\r\n        else {\r\n            this.depthStencilAttachment = undefined;\r\n        }\r\n    }\r\n\r\n    public set colorAttachmentCount(value: uint32_t) {\r\n        this._colorAttachmentCount = value;\r\n        this.colorAttachments = this.cColorAttachments.slice(0, this._colorAttachmentCount);\r\n    }\r\n\r\n}\r\n\r\nexport class ComboRenderPipelineDescriptor implements GPUPipelineDescriptorBase, GPURenderPipelineDescriptor {\r\n\r\n    public static readonly kMaxColorAttachments: size_t = 4;\r\n\r\n    public label?: string;\r\n    public layout?: GPUPipelineLayout;\r\n\r\n    public vertexStage: GPUProgrammableStageDescriptor;\r\n    public fragmentStage?: GPUProgrammableStageDescriptor;\r\n\r\n    public primitiveTopology: GPUPrimitiveTopology;\r\n    public rasterizationState?: GPURasterizationStateDescriptor;\r\n    public colorStates: Iterable<GPUColorStateDescriptor>;\r\n    public depthStencilState?: GPUDepthStencilStateDescriptor;\r\n    public vertexState?: GPUVertexStateDescriptor;\r\n\r\n    public sampleCount?: number;\r\n    public sampleMask?: number;\r\n    public alphaToCoverageEnabled?: boolean;\r\n\r\n    public cColorStates: Array<GPUColorStateDescriptor>;\r\n    public cDepthStencilState?: GPUDepthStencilStateDescriptor;\r\n    public cRasterizationState?: GPURasterizationStateDescriptor;\r\n\r\n    private _colorStateCount: uint32_t = 0;\r\n\r\n    constructor(device: GPUDevice) {\r\n        const descriptor = this;\r\n\r\n        descriptor.primitiveTopology = \"triangle-list\";\r\n        descriptor.sampleCount = 1;\r\n\r\n        // Set defaults for the vertex stage descriptor.\r\n        descriptor.vertexStage = <GPUProgrammableStageDescriptor> {\r\n            entryPoint: \"main\"\r\n        };\r\n\r\n        // Set defaults for the fragment stage desriptor.\r\n        descriptor.fragmentStage = <GPUProgrammableStageDescriptor> {\r\n            entryPoint: \"main\"\r\n        };\r\n\r\n        // Set defaults for the rasterization state descriptor.\r\n        this.cRasterizationState = <GPURasterizationStateDescriptor> {\r\n            frontFace: \"ccw\",\r\n            cullMode: \"none\",\r\n            depthBias: 0,\r\n            depthBiasSlopeScale: 0.0,\r\n            depthBiasClamp: 0.0\r\n        };\r\n        descriptor.rasterizationState = this.cRasterizationState;\r\n\r\n        // Set defaults for the color state descriptors.\r\n        const blend: GPUBlendDescriptor = {\r\n            srcFactor: \"src-alpha\",\r\n            dstFactor: \"one-minus-src-alpha\"\r\n        };\r\n        this.cColorStates = BuildArray(\r\n            ComboRenderPipelineDescriptor.kMaxColorAttachments,\r\n            () => <GPUColorStateDescriptor> {\r\n                format: \"rgba8unorm\",\r\n                alphaBlend: blend,\r\n                colorBlend: blend,\r\n                writeMask: GPUColorWrite.ALL\r\n            }\r\n        );\r\n        descriptor.colorStateCount = 1;\r\n        \r\n        // Set defaults for the depth stencil state descriptors.\r\n        const stencilFace: GPUStencilStateFaceDescriptor = {\r\n            compare: \"always\",\r\n            failOp: \"keep\",\r\n            depthFailOp: \"keep\",\r\n            passOp: \"keep\"\r\n        };\r\n\r\n        this.cDepthStencilState = <GPUDepthStencilStateDescriptor> {\r\n            format: \"depth24plus-stencil8\",\r\n            depthWriteEnabled: false,\r\n            depthCompare: \"always\",\r\n            stencilBack: stencilFace,\r\n            stencilFront: stencilFace,\r\n            stencilReadMask: 0xff,\r\n            stencilWriteMask: 0xff\r\n        };\r\n        descriptor.depthStencilState = undefined;\r\n    }\r\n\r\n    public set colorStateCount(value: uint32_t) {\r\n        this._colorStateCount = value;\r\n        this.colorStates = this.cColorStates.slice(0, this._colorStateCount);\r\n    }\r\n\r\n}\r\n\r\nexport class ComboVertexStateDescriptor implements GPUVertexStateDescriptor {\r\n\r\n    public static readonly kMaxVertexAttributes: size_t = 16;\r\n    public static readonly kMaxVertexBuffers: size_t    = 16;\r\n\r\n    public cVertexBuffers: Array<GPUVertexBufferLayoutDescriptor>;\r\n    public cAttributes: Array<GPUVertexAttributeDescriptor>;\r\n\r\n    public indexFormat?: GPUIndexFormat;\r\n    public vertexBuffers?: Iterable<GPUVertexBufferLayoutDescriptor>;\r\n\r\n    private _vertexBufferCount: size_t = 0;\r\n\r\n    public constructor() {\r\n        const descriptor = this;\r\n\r\n        this.cVertexBuffers = BuildArray<GPUVertexBufferLayoutDescriptor>(\r\n            ComboVertexStateDescriptor.kMaxVertexBuffers, () => <GPUVertexBufferLayoutDescriptor>{}\r\n        );\r\n\r\n        this.cAttributes = BuildArray<GPUVertexAttributeDescriptor>(\r\n            ComboVertexStateDescriptor.kMaxVertexAttributes, () => <GPUVertexAttributeDescriptor>{}\r\n        );\r\n\r\n        descriptor.indexFormat = \"uint32\";\r\n        descriptor._vertexBufferCount = 0;\r\n\r\n        // Fill the default values for vertexBuffers and vertexAttributes in buffers.\r\n        for (let i: uint32_t = 0; i < this.cAttributes.length; ++i) {\r\n            this.cAttributes[i] = <GPUVertexAttributeDescriptor> {\r\n                shaderLocation: 0,\r\n                offset: 0,\r\n                format: 'float'\r\n            };\r\n        }\r\n        for (let i = 0; i < this.cVertexBuffers.length; ++i) {\r\n            this.cVertexBuffers[i].arrayStride = 0;\r\n            this.cVertexBuffers[i].stepMode = \"vertex\";\r\n            this.cVertexBuffers[i].attributes = [];\r\n        }\r\n        // cVertexBuffers[i].attributes points to somewhere in cAttributes.\r\n        // cVertexBuffers[0].attributes points to &cAttributes[0] by default. Assuming\r\n        // cVertexBuffers[0] has two attributes, then cVertexBuffers[1].attributes should point to\r\n        // &cAttributes[2]. Likewise, if cVertexBuffers[1] has 3 attributes, then\r\n        // cVertexBuffers[2].attributes should point to &cAttributes[5].\r\n        this.cVertexBuffers[0].attributes = this.cAttributes;\r\n        descriptor.vertexBuffers = this.cVertexBuffers;\r\n    }\r\n\r\n    public set vertexBufferCount(value: size_t) {\r\n        this._vertexBufferCount = value;\r\n        this.vertexBuffers = this.cVertexBuffers.slice(0, this._vertexBufferCount);\r\n    }\r\n\r\n}\r\n","/// <reference path=\"../node_modules/@webgpu/types/dist/index.d.ts\" />\r\n\r\nimport { Nullable, int, float, FloatArray, uint32_t, MergeTypedArrays, size_t, BuildArray } from \"./types\";\r\nimport { MODELNAME, MODELGROUP, TOGGLE, Aquarium, Fish, fishTable } from \"./aquarium\";\r\nimport { Buffer, BufferWebGPU } from \"./buffer\"\r\nimport { Context, ContextWebGPU } from \"./context\"\r\nimport { Program, ProgramWebGPU } from \"./program\";\r\nimport { Texture, TextureWebGPU } from \"./texture\";\r\nimport { FishPer, FishVertexUniforms, InnerUniforms, LightFactorUniforms, SeaweedPer, WorldUniformPer, WorldUniforms } from \"./uniforms\"\r\nimport { ComboVertexStateDescriptor } from \"./utils\"\r\n\r\n\r\n/**\r\n * Defines the base Class Model for all of the models.\r\n * Contains programs, textures and buffers info of models.\r\n * Apply program for its model. Update uniforms, textures and buffers for each frame.\r\n */\r\nexport class Model {\r\n\r\n    public worldmatrices: Array<FloatArray> = new Array<FloatArray>();\r\n    public textureMap: Record<string, Nullable<Texture>> = {};\r\n    public bufferMap: Record<string, Nullable<Buffer>> = {};\r\n\r\n    protected _program: Nullable<Program> = null;\r\n    protected _blend: boolean;\r\n    protected _name: MODELNAME;\r\n\r\n    constructor(type?: MODELGROUP, name?: MODELNAME, blend?: boolean) {\r\n        this._blend = blend || false;\r\n        this._name = name || MODELNAME.MODELMAX;\r\n    }\r\n\r\n    public dispose(): void {\r\n        for (let k in this.bufferMap) {\r\n            if (this.bufferMap[k] !== null) {\r\n                delete this.bufferMap[k];\r\n            }\r\n        }\r\n        this.bufferMap = {};\r\n    }\r\n\r\n    public set program(program: Nullable<Program>) {\r\n        this._program = program;\r\n    }\r\n\r\n    public prepareForDraw(): void { }\r\n    public updatePerInstanceUniforms(worldUniforms: WorldUniforms): void { }\r\n    public draw(): void { }\r\n    public init(): void { }\r\n}\r\n\r\n/**\r\n * Defines the fish model. Updates fish specific uniforms.\r\n */\r\nexport class FishModel extends Model {\r\n\r\n    protected _preInstance: int = 0;\r\n    protected _curInstance: int = 0;\r\n    protected _fishPerOffset: int = 0;\r\n\r\n    protected _aquarium: Nullable<Aquarium> = null;\r\n\r\n    constructor(type: MODELGROUP, name: MODELNAME, blend: boolean, aquarium: Aquarium) {\r\n        super(type, name, blend);\r\n        this._aquarium = aquarium;\r\n    }\r\n\r\n    public updateFishPerUniforms(x: float, y: float, z: float,\r\n                                 nextX: float, nextY: float, nextZ: float,\r\n                                 scale: float, time: float, index: int): void { }\r\n    \r\n    \r\n    public prepareForDraw(): void {\r\n        this._fishPerOffset = 0;\r\n        for (let i = 0; i < this._name - MODELNAME.MODELSMALLFISHA; ++i) {\r\n            const fishInfo: Fish = fishTable[i];\r\n            this._fishPerOffset += this._aquarium.fishCount[fishInfo.modelName - MODELNAME.MODELSMALLFISHA];\r\n        }\r\n\r\n        const fishInfo: Fish = fishTable[this._name - MODELNAME.MODELSMALLFISHA];\r\n        this._curInstance    = this._aquarium.fishCount[fishInfo.modelName - MODELNAME.MODELSMALLFISHA];\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Defines the seaweed model.\r\n */\r\nexport class SeaweedModel extends Model {\r\n\r\n    constructor(type: MODELGROUP, name: MODELNAME, blend: boolean) {\r\n        super(type, name, blend);\r\n    }\r\n\r\n    public updateSeaweedModelTime(time: float) { }\r\n\r\n}\r\n\r\n/**\r\n * Defines the generic model of WebGPU.\r\n */\r\nexport class GenericModelWebGPU extends Model {\r\n\r\n    public diffuseTexture: Nullable<TextureWebGPU>    = null;\r\n    public normalTexture: Nullable<TextureWebGPU>     = null;\r\n    public reflectionTexture: Nullable<TextureWebGPU> = null;\r\n    public skyboxTexture: Nullable<TextureWebGPU>     = null;\r\n\r\n    public positionBuffer: Nullable<BufferWebGPU> = null;\r\n    public normalBuffer: Nullable<BufferWebGPU>   = null;\r\n    public texCoordBuffer: Nullable<BufferWebGPU> = null;\r\n    public tangentBuffer: Nullable<BufferWebGPU>  = null;\r\n    public biNormalBuffer: Nullable<BufferWebGPU> = null;\r\n\r\n    public indicesBuffer: Nullable<BufferWebGPU>  = null;\r\n\r\n    public lightFactorUniforms: Nullable<LightFactorUniforms> = new LightFactorUniforms();\r\n    public worldUniformPer: Nullable<WorldUniformPer> = new WorldUniformPer();\r\n\r\n    protected _vertexStateDescriptor: Nullable<ComboVertexStateDescriptor> = null;\r\n    protected _pipeline: GPURenderPipeline;\r\n\r\n    protected _groupLayoutModel:GPUBindGroupLayout;\r\n    protected _groupLayoutPer: GPUBindGroupLayout;\r\n    protected _pipelineLayout: GPUPipelineLayout;\r\n\r\n    protected _bindGroupModel: GPUBindGroup;\r\n    protected _bindGroupPer: GPUBindGroup;\r\n\r\n    protected _lightFactorBuffer: GPUBuffer;\r\n    protected _worldBuffer: GPUBuffer;\r\n\r\n    protected _contextWebGPU: Nullable<ContextWebGPU> = null;\r\n    protected _programWebGPU: Nullable<ProgramWebGPU> = null;\r\n\r\n    protected _instance: int = 0;\r\n\r\n    constructor(context: Nullable<Context>, aquarium: Nullable<Aquarium>, type: MODELGROUP, name: MODELNAME, blend: boolean) {\r\n        super(type, name, blend);\r\n\r\n        this._contextWebGPU = context as Nullable<ContextWebGPU>;\r\n        this._vertexStateDescriptor = new ComboVertexStateDescriptor();\r\n\r\n        this.lightFactorUniforms.shininess      = 50.0;\r\n        this.lightFactorUniforms.specularFactor = 1.0;\r\n    }\r\n\r\n    public dispose(): void {\r\n        this._pipeline          = null;\r\n        this._groupLayoutModel  = null;\r\n        this._groupLayoutPer    = null;\r\n        this._pipelineLayout    = null;\r\n        this._bindGroupModel    = null;\r\n        this._bindGroupPer      = null;\r\n        this._lightFactorBuffer = null;\r\n        this._worldBuffer       = null;\r\n    }\r\n\r\n    public init(): void {\r\n        this._programWebGPU = this._program as Nullable<ProgramWebGPU>;\r\n\r\n        this.diffuseTexture    = this.textureMap[\"diffuse\"] as TextureWebGPU;\r\n        this.normalTexture     = this.textureMap[\"normalMap\"] as TextureWebGPU;\r\n        this.reflectionTexture = this.textureMap[\"reflectionMap\"] as TextureWebGPU;\r\n        this.skyboxTexture     = this.textureMap[\"skybox\"] as TextureWebGPU;\r\n\r\n        this.positionBuffer = this.bufferMap[\"position\"] as BufferWebGPU;\r\n        this.normalBuffer   = this.bufferMap[\"normal\"] as BufferWebGPU;\r\n        this.texCoordBuffer = this.bufferMap[\"texCoord\"] as BufferWebGPU;\r\n        this.tangentBuffer  = this.bufferMap[\"tangent\"] as BufferWebGPU;\r\n        this.biNormalBuffer = this.bufferMap[\"binormal\"] as BufferWebGPU;\r\n        this.indicesBuffer  = this.bufferMap[\"indices\"] as BufferWebGPU;\r\n\r\n        // Generic models use reflection, normal or diffuse shaders, of which groupLayouts are\r\n        // different in texture binding.  MODELGLOBEBASE use diffuse shader though it contains\r\n        // normal and reflection textures.\r\n        if (this.normalTexture && this._name !== MODELNAME.MODELGLOBEBASE) {\r\n            this._vertexStateDescriptor.cVertexBuffers[0].arrayStride = this.positionBuffer.dataSize;\r\n            this._vertexStateDescriptor.cAttributes[0].format         = \"float3\";\r\n            this._vertexStateDescriptor.cAttributes[0].shaderLocation = 0;\r\n            this._vertexStateDescriptor.cAttributes[0].offset         = 0;\r\n            this._vertexStateDescriptor.cVertexBuffers[0].attributes  = [this._vertexStateDescriptor.cAttributes[0]];\r\n            \r\n            this._vertexStateDescriptor.cVertexBuffers[1].arrayStride = this.normalBuffer.dataSize;\r\n            this._vertexStateDescriptor.cAttributes[1].format         = \"float3\";\r\n            this._vertexStateDescriptor.cAttributes[1].shaderLocation = 1;\r\n            this._vertexStateDescriptor.cAttributes[1].offset         = 0;\r\n            this._vertexStateDescriptor.cVertexBuffers[1].attributes  = [this._vertexStateDescriptor.cAttributes[1]];\r\n            \r\n            this._vertexStateDescriptor.cVertexBuffers[2].arrayStride = this.texCoordBuffer.dataSize;\r\n            this._vertexStateDescriptor.cAttributes[2].format         = \"float2\";\r\n            this._vertexStateDescriptor.cAttributes[2].shaderLocation = 2;\r\n            this._vertexStateDescriptor.cAttributes[2].offset         = 0;\r\n            this._vertexStateDescriptor.cVertexBuffers[2].attributes  = [this._vertexStateDescriptor.cAttributes[2]];\r\n            \r\n            this._vertexStateDescriptor.cVertexBuffers[3].arrayStride = this.tangentBuffer.dataSize;\r\n            this._vertexStateDescriptor.cAttributes[3].format         = \"float3\";\r\n            this._vertexStateDescriptor.cAttributes[3].shaderLocation = 3;\r\n            this._vertexStateDescriptor.cAttributes[3].offset         = 0;\r\n            this._vertexStateDescriptor.cVertexBuffers[3].attributes  = [this._vertexStateDescriptor.cAttributes[3]];\r\n            \r\n            this._vertexStateDescriptor.cVertexBuffers[4].arrayStride = this.biNormalBuffer.dataSize;\r\n            this._vertexStateDescriptor.cAttributes[4].format         = \"float3\";\r\n            this._vertexStateDescriptor.cAttributes[4].shaderLocation = 4;\r\n            this._vertexStateDescriptor.cAttributes[4].offset         = 0;\r\n            this._vertexStateDescriptor.cVertexBuffers[4].attributes  = [this._vertexStateDescriptor.cAttributes[4]];\r\n            \r\n            this._vertexStateDescriptor.vertexBufferCount             = 5;\r\n            this._vertexStateDescriptor.indexFormat                   = \"uint16\";\r\n        }\r\n        else {\r\n            this._vertexStateDescriptor.cVertexBuffers[0].arrayStride = this.positionBuffer.dataSize;\r\n            this._vertexStateDescriptor.cAttributes[0].format         = \"float3\";\r\n            this._vertexStateDescriptor.cAttributes[0].shaderLocation = 0;\r\n            this._vertexStateDescriptor.cAttributes[0].offset         = 0;\r\n            this._vertexStateDescriptor.cVertexBuffers[0].attributes  = [this._vertexStateDescriptor.cAttributes[0]];\r\n\r\n            this._vertexStateDescriptor.cVertexBuffers[1].arrayStride = this.normalBuffer.dataSize;\r\n            this._vertexStateDescriptor.cAttributes[1].format         = \"float3\";\r\n            this._vertexStateDescriptor.cAttributes[1].shaderLocation = 1;\r\n            this._vertexStateDescriptor.cAttributes[1].offset         = 0;\r\n            this._vertexStateDescriptor.cVertexBuffers[1].attributes  = [this._vertexStateDescriptor.cAttributes[1]];\r\n\r\n            this._vertexStateDescriptor.cVertexBuffers[2].arrayStride = this.texCoordBuffer.dataSize;\r\n            this._vertexStateDescriptor.cAttributes[2].format         = \"float2\";\r\n            this._vertexStateDescriptor.cAttributes[2].shaderLocation = 2;\r\n            this._vertexStateDescriptor.cAttributes[2].offset         = 0;\r\n            this._vertexStateDescriptor.cVertexBuffers[2].attributes  = [this._vertexStateDescriptor.cAttributes[2]];\r\n\r\n            this._vertexStateDescriptor.vertexBufferCount             = 3;\r\n            this._vertexStateDescriptor.indexFormat                   = \"uint16\";\r\n        }\r\n\r\n        if (this.skyboxTexture && this.reflectionTexture && this._name !== MODELNAME.MODELGLOBEBASE) {\r\n            this._groupLayoutModel = this._contextWebGPU.makeBindGroupLayout(\r\n                <GPUBindGroupLayoutDescriptor> {\r\n                    entries: <GPUBindGroupLayoutEntry[]> [\r\n                        {\r\n                            binding: 0,\r\n                            visibility: GPUShaderStage.FRAGMENT,\r\n                            type: \"uniform-buffer\"\r\n                        },\r\n                        {\r\n                            binding: 1,\r\n                            visibility: GPUShaderStage.FRAGMENT,\r\n                            type: \"sampler\"\r\n                        },\r\n                        {\r\n                            binding: 2,\r\n                            visibility: GPUShaderStage.FRAGMENT,\r\n                            type: \"sampler\"\r\n                        },\r\n                        {\r\n                            binding: 3,\r\n                            visibility: GPUShaderStage.FRAGMENT,\r\n                            type: \"sampled-texture\",\r\n                            hasDynamicOffset: false,\r\n                            multisampled: false,\r\n                            viewDimension: \"2d\",\r\n                            textureComponentType: \"float\"\r\n                        },\r\n                        {\r\n                            binding: 4,\r\n                            visibility: GPUShaderStage.FRAGMENT,\r\n                            type: \"sampled-texture\",\r\n                            hasDynamicOffset: false,\r\n                            multisampled: false,\r\n                            viewDimension:\"2d\",\r\n                            textureComponentType: \"float\"\r\n                        },\r\n                        {\r\n                            binding: 5,\r\n                            visibility: GPUShaderStage.FRAGMENT,\r\n                            type: \"sampled-texture\",\r\n                            hasDynamicOffset: false,\r\n                            multisampled: false,\r\n                            viewDimension:\"2d\",\r\n                            textureComponentType: \"float\"\r\n                        },\r\n                        {\r\n                            binding: 6,\r\n                            visibility: GPUShaderStage.FRAGMENT,\r\n                            type: \"sampled-texture\",\r\n                            hasDynamicOffset: false,\r\n                            multisampled: false,\r\n                            viewDimension: \"cube\",\r\n                            textureComponentType: \"float\"\r\n                        }\r\n                    ]\r\n                }\r\n            );\r\n        }\r\n        else if (this.normalTexture && this._name != MODELNAME.MODELGLOBEBASE) {\r\n            this._groupLayoutModel = this._contextWebGPU.makeBindGroupLayout(\r\n                <GPUBindGroupLayoutDescriptor> {\r\n                    entries: <GPUBindGroupLayoutEntry[]> [\r\n                        {\r\n                            binding: 0,\r\n                            visibility: GPUShaderStage.FRAGMENT,\r\n                            type: \"uniform-buffer\"\r\n                        },\r\n                        {\r\n                            binding: 1,\r\n                            visibility: GPUShaderStage.FRAGMENT,\r\n                            type: \"sampler\"\r\n                        },\r\n                        {\r\n                            binding: 2,\r\n                            visibility: GPUShaderStage.FRAGMENT,\r\n                            type: \"sampled-texture\",\r\n                            hasDynamicOffset: false,\r\n                            multisampled: false,\r\n                            viewDimension:\"2d\",\r\n                            textureComponentType: \"float\"\r\n                        },\r\n                        {\r\n                            binding: 3,\r\n                            visibility: GPUShaderStage.FRAGMENT,\r\n                            type: \"sampled-texture\",\r\n                            hasDynamicOffset: false,\r\n                            multisampled: false,\r\n                            viewDimension:\"2d\",\r\n                            textureComponentType: \"float\"\r\n                        }\r\n                    ]\r\n                }\r\n            );\r\n        }\r\n        else {\r\n            this._groupLayoutModel = this._contextWebGPU.makeBindGroupLayout(\r\n                <GPUBindGroupLayoutDescriptor> {\r\n                    entries: <GPUBindGroupLayoutEntry[]> [\r\n                        {\r\n                            binding: 0,\r\n                            visibility: GPUShaderStage.FRAGMENT,\r\n                            type: \"uniform-buffer\"\r\n                        },\r\n                        {\r\n                            binding: 1,\r\n                            visibility: GPUShaderStage.FRAGMENT,\r\n                            type: \"sampler\"\r\n                        },\r\n                        {\r\n                            binding: 2,\r\n                            visibility: GPUShaderStage.FRAGMENT,\r\n                            type: \"sampled-texture\",\r\n                            hasDynamicOffset: false,\r\n                            multisampled: false,\r\n                            viewDimension:\"2d\",\r\n                            textureComponentType: \"float\"\r\n                        }\r\n                    ]\r\n                }\r\n            );\r\n        }\r\n\r\n        this._groupLayoutPer = this._contextWebGPU.makeBindGroupLayout(\r\n            <GPUBindGroupLayoutDescriptor> {\r\n                entries: <GPUBindGroupLayoutEntry[]> [\r\n                    {\r\n                        binding: 0,\r\n                        visibility: GPUShaderStage.VERTEX,\r\n                        type: \"uniform-buffer\"\r\n                    }\r\n                ]\r\n            }\r\n        )\r\n\r\n        this._pipelineLayout = this._contextWebGPU.makeBasicPipelineLayout(\r\n            <GPUPipelineLayoutDescriptor> {\r\n                bindGroupLayouts: <GPUBindGroupLayout[]> [\r\n                    this._contextWebGPU.groupLayoutGeneral,\r\n                    this._contextWebGPU.groupLayoutWorld,\r\n                    this._groupLayoutModel,\r\n                    this._groupLayoutPer,\r\n                ]\r\n            }\r\n        );\r\n\r\n        this._pipeline = this._contextWebGPU.createRenderPipeline(\r\n            this._pipelineLayout,\r\n            this._programWebGPU,\r\n            this._vertexStateDescriptor,\r\n            this._blend\r\n        );\r\n\r\n        this._lightFactorBuffer =\r\n            this._contextWebGPU.createBufferFromData(this.lightFactorUniforms.data,\r\n                                                     LightFactorUniforms.byteSize,\r\n                                                     GPUBufferUsage.COPY_DST | GPUBufferUsage.UNIFORM);\r\n\r\n        this._worldBuffer =\r\n            this._contextWebGPU.createBufferFromData(this.worldUniformPer.data,\r\n                                                     this.worldUniformPer.byteSize,\r\n                                                     GPUBufferUsage.COPY_DST | GPUBufferUsage.UNIFORM);\r\n\r\n\r\n        // Generic models use reflection, normal or diffuse shaders, of which grouplayouts are\r\n        // different in texture binding. MODELGLOBEBASE use diffuse shader though it contains\r\n        // normal and reflection textures.\r\n        if (this.skyboxTexture && this.reflectionTexture && this._name !== MODELNAME.MODELGLOBEBASE) {\r\n            this._bindGroupModel = this._contextWebGPU.makeBindGroup(\r\n                <GPUBindGroupDescriptor> {\r\n                    layout: this._groupLayoutModel,\r\n                    entries: <GPUBindGroupEntry[]> [\r\n                        {\r\n                            binding: 0,\r\n                            resource: <GPUBufferBinding> {\r\n                                buffer: this._lightFactorBuffer,\r\n                                offset: 0,\r\n                            }\r\n                        },\r\n                        {\r\n                            binding: 1,\r\n                            resource: this.reflectionTexture.sampler\r\n                        },\r\n                        {\r\n                            binding: 2,\r\n                            resource: this.skyboxTexture.sampler\r\n                        },\r\n                        {\r\n                            binding: 3,\r\n                            resource: this.diffuseTexture.textureView\r\n                        },\r\n                        {\r\n                            binding: 4,\r\n                            resource: this.normalTexture.textureView\r\n                        },\r\n                        {\r\n                            binding: 5,\r\n                            resource: this.reflectionTexture.textureView\r\n                        },\r\n                        {\r\n                            binding: 6,\r\n                            resource: this.skyboxTexture.textureView\r\n                        }\r\n                    ]\r\n                }\r\n            );\r\n        }\r\n        else if (this.normalTexture && this._name !== MODELNAME.MODELGLOBEBASE) {\r\n            this._bindGroupModel = this._contextWebGPU.makeBindGroup(\r\n                <GPUBindGroupDescriptor> {\r\n                    layout: this._groupLayoutModel,\r\n                    entries: <GPUBindGroupEntry[]> [\r\n                        {\r\n                            binding: 0,\r\n                            resource: <GPUBufferBinding> {\r\n                                buffer: this._lightFactorBuffer,\r\n                                offset: 0,\r\n                            }\r\n                        },\r\n                        {\r\n                            binding: 1,\r\n                            resource: this.diffuseTexture.sampler\r\n                        },\r\n                        {\r\n                            binding: 2,\r\n                            resource: this.diffuseTexture.textureView\r\n                        },\r\n                        {\r\n                            binding: 3,\r\n                            resource: this.normalTexture.textureView\r\n                        }\r\n                    ]\r\n                }\r\n            );\r\n        }\r\n        else {\r\n            this._bindGroupModel = this._contextWebGPU.makeBindGroup(\r\n                <GPUBindGroupDescriptor> {\r\n                    layout: this._groupLayoutModel,\r\n                    entries: <GPUBindGroupEntry[]> [\r\n                        {\r\n                            binding: 0,\r\n                            resource: <GPUBufferBinding> {\r\n                                buffer: this._lightFactorBuffer,\r\n                                offset: 0,\r\n                            }\r\n                        },\r\n                        {\r\n                            binding: 1,\r\n                            resource: this.diffuseTexture.sampler\r\n                        },\r\n                        {\r\n                            binding: 2,\r\n                            resource: this.diffuseTexture.textureView\r\n                        }\r\n                    ]\r\n                }\r\n            );\r\n        }\r\n\r\n        this._bindGroupPer = this._contextWebGPU.makeBindGroup(\r\n            <GPUBindGroupDescriptor> {\r\n                layout: this._groupLayoutPer,\r\n                entries: <GPUBindGroupEntry[]> [\r\n                    {\r\n                        binding: 0,\r\n                        resource: <GPUBufferBinding> {\r\n                            buffer: this._worldBuffer,\r\n                            offset: 0,\r\n                        }\r\n                    }\r\n                ]\r\n            }\r\n        );\r\n\r\n        this._contextWebGPU.setBufferData(this._lightFactorBuffer, 0, LightFactorUniforms.byteSize,\r\n                                          this.lightFactorUniforms.data);\r\n    }\r\n\r\n    public prepareForDraw(): void {\r\n        this._contextWebGPU.updateBufferData(this._worldBuffer, this.worldUniformPer.data, this.worldUniformPer.byteSize);\r\n    }\r\n\r\n    public draw(): void {\r\n        const pass = this._contextWebGPU.renderPass;\r\n        pass.setPipeline(this._pipeline);\r\n        pass.setBindGroup(0, this._contextWebGPU.bindGroupGeneral);\r\n        pass.setBindGroup(1, this._contextWebGPU.bindGroupWorld);\r\n        pass.setBindGroup(2, this._bindGroupModel);\r\n        pass.setBindGroup(3, this._bindGroupPer);\r\n        pass.setVertexBuffer(0, this.positionBuffer.buffer);\r\n        pass.setVertexBuffer(1, this.normalBuffer.buffer);\r\n        pass.setVertexBuffer(2, this.texCoordBuffer.buffer);\r\n        // diffuseShader doesn't have to input tangent buffer or binormal buffer.\r\n        if (this.tangentBuffer && this.biNormalBuffer && this._name !== MODELNAME.MODELGLOBEBASE)\r\n        {\r\n            pass.setVertexBuffer(3, this.tangentBuffer.buffer);\r\n            pass.setVertexBuffer(4, this.biNormalBuffer.buffer);\r\n        }\r\n        pass.setIndexBuffer(this.indicesBuffer.buffer, 0);\r\n        pass.drawIndexed(this.indicesBuffer.totalComponents, this._instance, 0, 0, 0);\r\n        this._instance = 0;\r\n    }\r\n\r\n    public updatePerInstanceUniforms(worldUniforms: WorldUniforms): void {\r\n        this.worldUniformPer.worldUniforms[this._instance] = worldUniforms;\r\n\r\n        this._instance++;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Defines the outside model of WebGPU.\r\n */\r\nexport class OutsideModelWebGPU extends GenericModelWebGPU {\r\n\r\n    private _viewBuffer: GPUBuffer;\r\n\r\n    constructor(context: Nullable<Context>, aquarium: Nullable<Aquarium>, type: MODELGROUP, name: MODELNAME, blend: boolean) {\r\n        super(context, aquarium, type, name, blend);\r\n\r\n        this.lightFactorUniforms.shininess      = 50.0;\r\n        this.lightFactorUniforms.specularFactor = 1.0;\r\n    }\r\n\r\n    public dispose(): void {\r\n        super.dispose();\r\n        this._viewBuffer = null;\r\n    }\r\n\r\n    public init(): void {\r\n        this._programWebGPU = this._program as Nullable<ProgramWebGPU>;\r\n\r\n        this.diffuseTexture    = this.textureMap[\"diffuse\"] as TextureWebGPU;\r\n        this.normalTexture     = this.textureMap[\"normalMap\"] as TextureWebGPU;\r\n        this.reflectionTexture = this.textureMap[\"reflectionMap\"] as TextureWebGPU;\r\n        this.skyboxTexture     = this.textureMap[\"skybox\"] as TextureWebGPU;\r\n\r\n        this.positionBuffer = this.bufferMap[\"position\"] as BufferWebGPU;\r\n        this.normalBuffer   = this.bufferMap[\"normal\"] as BufferWebGPU;\r\n        this.texCoordBuffer = this.bufferMap[\"texCoord\"] as BufferWebGPU;\r\n        this.tangentBuffer  = this.bufferMap[\"tangent\"] as BufferWebGPU;\r\n        this.biNormalBuffer = this.bufferMap[\"binormal\"] as BufferWebGPU;\r\n        this.indicesBuffer  = this.bufferMap[\"indices\"] as BufferWebGPU;\r\n    \r\n        this._vertexStateDescriptor.cVertexBuffers[0].arrayStride = this.positionBuffer.dataSize;\r\n        this._vertexStateDescriptor.cAttributes[0].format         = \"float3\";\r\n        this._vertexStateDescriptor.cAttributes[0].shaderLocation = 0;\r\n        this._vertexStateDescriptor.cAttributes[0].offset         = 0;\r\n        this._vertexStateDescriptor.cVertexBuffers[0].attributes  = [this._vertexStateDescriptor.cAttributes[0]];\r\n        \r\n        this._vertexStateDescriptor.cVertexBuffers[1].arrayStride = this.normalBuffer.dataSize;\r\n        this._vertexStateDescriptor.cAttributes[1].format         = \"float3\";\r\n        this._vertexStateDescriptor.cAttributes[1].shaderLocation = 1;\r\n        this._vertexStateDescriptor.cAttributes[1].offset         = 0;\r\n        this._vertexStateDescriptor.cVertexBuffers[1].attributes  = [this._vertexStateDescriptor.cAttributes[1]];\r\n        \r\n        this._vertexStateDescriptor.cVertexBuffers[2].arrayStride = this.texCoordBuffer.dataSize;\r\n        this._vertexStateDescriptor.cAttributes[2].format         = \"float2\";\r\n        this._vertexStateDescriptor.cAttributes[2].shaderLocation = 2;\r\n        this._vertexStateDescriptor.cAttributes[2].offset         = 0;\r\n        this._vertexStateDescriptor.cVertexBuffers[2].attributes  = [this._vertexStateDescriptor.cAttributes[2]];\r\n        \r\n        this._vertexStateDescriptor.cVertexBuffers[3].arrayStride = this.tangentBuffer.dataSize;\r\n        this._vertexStateDescriptor.cAttributes[3].format         = \"float3\";\r\n        this._vertexStateDescriptor.cAttributes[3].shaderLocation = 3;\r\n        this._vertexStateDescriptor.cAttributes[3].offset         = 0;\r\n        this._vertexStateDescriptor.cVertexBuffers[3].attributes  = [this._vertexStateDescriptor.cAttributes[3]];\r\n        \r\n        this._vertexStateDescriptor.cVertexBuffers[4].arrayStride = this.biNormalBuffer.dataSize;\r\n        this._vertexStateDescriptor.cAttributes[4].format         = \"float3\";\r\n        this._vertexStateDescriptor.cAttributes[4].shaderLocation = 4;\r\n        this._vertexStateDescriptor.cAttributes[4].offset         = 0;\r\n        this._vertexStateDescriptor.cVertexBuffers[4].attributes  = [this._vertexStateDescriptor.cAttributes[4]];\r\n        \r\n        this._vertexStateDescriptor.vertexBufferCount             = 5;\r\n        this._vertexStateDescriptor.indexFormat                   = \"uint16\";\r\n\r\n        this._groupLayoutPer = this._contextWebGPU.makeBindGroupLayout(\r\n            <GPUBindGroupLayoutDescriptor> {\r\n                entries: <GPUBindGroupLayoutEntry[]> [\r\n                    {\r\n                        binding: 0,\r\n                        visibility: GPUShaderStage.VERTEX,\r\n                        type: \"uniform-buffer\"\r\n                    }\r\n                ]\r\n            }\r\n        )\r\n\r\n        // Outside models use diffuse shaders.\r\n        this._groupLayoutModel = this._contextWebGPU.makeBindGroupLayout(\r\n            <GPUBindGroupLayoutDescriptor> {\r\n                entries: <GPUBindGroupLayoutEntry[]> [\r\n                    {\r\n                        binding: 0,\r\n                        visibility: GPUShaderStage.FRAGMENT,\r\n                        type: \"uniform-buffer\"\r\n                    },\r\n                    {\r\n                        binding: 1,\r\n                        visibility: GPUShaderStage.FRAGMENT,\r\n                        type: \"sampler\"\r\n                    },\r\n                    {\r\n                        binding: 2,\r\n                        visibility: GPUShaderStage.FRAGMENT,\r\n                        type: \"sampled-texture\"\r\n                    }\r\n                ]\r\n            }      \r\n        );\r\n        \r\n        this._pipelineLayout = this._contextWebGPU.makeBasicPipelineLayout(\r\n            <GPUPipelineLayoutDescriptor> {\r\n                bindGroupLayouts: <GPUBindGroupLayout[]> [\r\n                    this._contextWebGPU.groupLayoutGeneral,\r\n                    this._contextWebGPU.groupLayoutWorld,\r\n                    this._groupLayoutModel,\r\n                    this._groupLayoutPer,\r\n                ]\r\n            }\r\n        );\r\n\r\n        this._pipeline = this._contextWebGPU.createRenderPipeline(\r\n            this._pipelineLayout,\r\n            this._programWebGPU,\r\n            this._vertexStateDescriptor,\r\n            this._blend\r\n        );\r\n\r\n        this._lightFactorBuffer =\r\n            this._contextWebGPU.createBufferFromData(this.lightFactorUniforms.data,\r\n                                                     LightFactorUniforms.byteSize,\r\n                                                     GPUBufferUsage.COPY_DST | GPUBufferUsage.UNIFORM);\r\n\r\n        this._viewBuffer =\r\n            this._contextWebGPU.createBufferFromData(this.worldUniformPer.data,\r\n                                                     this._contextWebGPU.calcConstantBufferByteSize(WorldUniforms.byteSize) * 20,\r\n                                                     GPUBufferUsage.COPY_DST | GPUBufferUsage.UNIFORM);\r\n\r\n        this._bindGroupModel = this._contextWebGPU.makeBindGroup(\r\n            <GPUBindGroupDescriptor> {\r\n                layout: this._groupLayoutModel,\r\n                entries: <GPUBindGroupEntry[]> [\r\n                    {\r\n                        binding: 0,\r\n                        resource: <GPUBufferBinding> {\r\n                            buffer: this._lightFactorBuffer,\r\n                            offset: 0,\r\n                        }\r\n                    },\r\n                    {\r\n                        binding: 1,\r\n                        resource: this.diffuseTexture.sampler\r\n                    },\r\n                    {\r\n                        binding: 2,\r\n                        resource: this.diffuseTexture.textureView\r\n                    }\r\n                ]\r\n            }\r\n        );\r\n\r\n        this._bindGroupPer = this._contextWebGPU.makeBindGroup(\r\n            <GPUBindGroupDescriptor> {\r\n                layout: this._groupLayoutPer,\r\n                entries: <GPUBindGroupEntry[]> [\r\n                    {\r\n                        binding: 0,\r\n                        resource: <GPUBufferBinding> {\r\n                            buffer: this._viewBuffer,\r\n                            offset: 0,\r\n                        }\r\n                    }\r\n                ]\r\n            }\r\n        );\r\n\r\n        this._contextWebGPU.setBufferData(this._lightFactorBuffer, 0, LightFactorUniforms.byteSize,\r\n                                          this.lightFactorUniforms.data);\r\n    }\r\n\r\n    public prepareForDraw(): void { }\r\n\r\n    public draw(): void {\r\n        const pass: GPURenderPassEncoder = this._contextWebGPU.renderPass;\r\n        pass.setPipeline(this._pipeline);\r\n        pass.setBindGroup(0, this._contextWebGPU.bindGroupGeneral);\r\n        pass.setBindGroup(1, this._contextWebGPU.bindGroupWorld);\r\n        pass.setBindGroup(2, this._bindGroupModel);\r\n        pass.setBindGroup(3, this._bindGroupPer);\r\n        pass.setVertexBuffer(0, this.positionBuffer.buffer);\r\n        pass.setVertexBuffer(1, this.normalBuffer.buffer);\r\n        pass.setVertexBuffer(2, this.texCoordBuffer.buffer);\r\n        // diffuseShader doesn't have to input tangent buffer or binormal buffer.\r\n        if (this.tangentBuffer && this.biNormalBuffer) {\r\n            pass.setVertexBuffer(3, this.tangentBuffer.buffer);\r\n            pass.setVertexBuffer(4, this.biNormalBuffer.buffer);\r\n        }\r\n        pass.setIndexBuffer(this.indicesBuffer.buffer, 0);\r\n        pass.drawIndexed(this.indicesBuffer.totalComponents, 1, 0, 0, 0);\r\n    }\r\n\r\n    public updatePerInstanceUniforms(worldUniforms: WorldUniforms): void {\r\n        this.worldUniformPer.worldUniforms[0] = worldUniforms;\r\n\r\n        this._contextWebGPU.updateBufferData(this._viewBuffer, worldUniforms.data,\r\n                                             this._contextWebGPU.calcConstantBufferByteSize(WorldUniforms.byteSize));\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Defines the inner model of WebGPU.\r\n */\r\nexport class InnerModelWebGPU extends GenericModelWebGPU {\r\n\r\n    public innerUniforms: Nullable<InnerUniforms> = new InnerUniforms();\r\n\r\n    private _innerBuffer: GPUBuffer;\r\n    private _viewBuffer: GPUBuffer;\r\n\r\n    constructor(context: Nullable<Context>, aquarium: Nullable<Aquarium>, type: MODELGROUP, name: MODELNAME, blend: boolean) {\r\n        super(context, aquarium, type, name, blend);\r\n\r\n        this.innerUniforms.eta             = 1.0;\r\n        this.innerUniforms.tankColorFudge  = 0.796;\r\n        this.innerUniforms.refractionFudge = 3.0;\r\n    }\r\n\r\n    public dispose(): void {\r\n        super.dispose();\r\n        this._innerBuffer = null;\r\n        this._viewBuffer = null;\r\n    }\r\n\r\n    public init(): void {\r\n        this._programWebGPU = this._program as Nullable<ProgramWebGPU>;\r\n\r\n        this.diffuseTexture    = this.textureMap[\"diffuse\"] as TextureWebGPU;\r\n        this.normalTexture     = this.textureMap[\"normalMap\"] as TextureWebGPU;\r\n        this.reflectionTexture = this.textureMap[\"reflectionMap\"] as TextureWebGPU;\r\n        this.skyboxTexture     = this.textureMap[\"skybox\"] as TextureWebGPU;\r\n\r\n        this.positionBuffer = this.bufferMap[\"position\"] as BufferWebGPU;\r\n        this.normalBuffer   = this.bufferMap[\"normal\"] as BufferWebGPU;\r\n        this.texCoordBuffer = this.bufferMap[\"texCoord\"] as BufferWebGPU;\r\n        this.tangentBuffer  = this.bufferMap[\"tangent\"] as BufferWebGPU;\r\n        this.biNormalBuffer = this.bufferMap[\"binormal\"] as BufferWebGPU;\r\n        this.indicesBuffer  = this.bufferMap[\"indices\"] as BufferWebGPU;\r\n\r\n        this._vertexStateDescriptor.cVertexBuffers[0].arrayStride = this.positionBuffer.dataSize;\r\n        this._vertexStateDescriptor.cAttributes[0].format         = \"float3\";\r\n        this._vertexStateDescriptor.cAttributes[0].shaderLocation = 0;\r\n        this._vertexStateDescriptor.cAttributes[0].offset         = 0;\r\n        this._vertexStateDescriptor.cVertexBuffers[0].attributes  = [this._vertexStateDescriptor.cAttributes[0]];\r\n        \r\n        this._vertexStateDescriptor.cVertexBuffers[1].arrayStride = this.normalBuffer.dataSize;\r\n        this._vertexStateDescriptor.cAttributes[1].format         = \"float3\";\r\n        this._vertexStateDescriptor.cAttributes[1].shaderLocation = 1;\r\n        this._vertexStateDescriptor.cAttributes[1].offset         = 0;\r\n        this._vertexStateDescriptor.cVertexBuffers[1].attributes  = [this._vertexStateDescriptor.cAttributes[1]];\r\n        \r\n        this._vertexStateDescriptor.cVertexBuffers[2].arrayStride = this.texCoordBuffer.dataSize;\r\n        this._vertexStateDescriptor.cAttributes[2].format         = \"float2\";\r\n        this._vertexStateDescriptor.cAttributes[2].shaderLocation = 2;\r\n        this._vertexStateDescriptor.cAttributes[2].offset         = 0;\r\n        this._vertexStateDescriptor.cVertexBuffers[2].attributes  = [this._vertexStateDescriptor.cAttributes[2]];\r\n        \r\n        this._vertexStateDescriptor.cVertexBuffers[3].arrayStride = this.tangentBuffer.dataSize;\r\n        this._vertexStateDescriptor.cAttributes[3].format         = \"float3\";\r\n        this._vertexStateDescriptor.cAttributes[3].shaderLocation = 3;\r\n        this._vertexStateDescriptor.cAttributes[3].offset         = 0;\r\n        this._vertexStateDescriptor.cVertexBuffers[3].attributes  = [this._vertexStateDescriptor.cAttributes[3]];\r\n        \r\n        this._vertexStateDescriptor.cVertexBuffers[4].arrayStride = this.biNormalBuffer.dataSize;\r\n        this._vertexStateDescriptor.cAttributes[4].format         = \"float3\";\r\n        this._vertexStateDescriptor.cAttributes[4].shaderLocation = 4;\r\n        this._vertexStateDescriptor.cAttributes[4].offset         = 0;\r\n        this._vertexStateDescriptor.cVertexBuffers[4].attributes  = [this._vertexStateDescriptor.cAttributes[4]];\r\n        \r\n        this._vertexStateDescriptor.vertexBufferCount             = 5;\r\n        this._vertexStateDescriptor.indexFormat                   = \"uint16\";\r\n\r\n        this._groupLayoutModel = this._contextWebGPU.makeBindGroupLayout(\r\n            <GPUBindGroupLayoutDescriptor> {\r\n                entries: <GPUBindGroupLayoutEntry[]> [\r\n                    {\r\n                        binding: 0,\r\n                        visibility: GPUShaderStage.FRAGMENT,\r\n                        type: \"uniform-buffer\"\r\n                    },\r\n                    {\r\n                        binding: 1,\r\n                        visibility: GPUShaderStage.FRAGMENT,\r\n                        type: \"sampler\"\r\n                    },\r\n                    {\r\n                        binding: 2,\r\n                        visibility: GPUShaderStage.FRAGMENT,\r\n                        type: \"sampler\"\r\n                    },\r\n                    {\r\n                        binding: 3,\r\n                        visibility: GPUShaderStage.FRAGMENT,\r\n                        type: \"sampled-texture\",\r\n                        hasDynamicOffset: false,\r\n                        multisampled: false,\r\n                        viewDimension: \"2d\",\r\n                        textureComponentType: \"float\"\r\n                    },\r\n                    {\r\n                        binding: 4,\r\n                        visibility: GPUShaderStage.FRAGMENT,\r\n                        type: \"sampled-texture\",\r\n                        hasDynamicOffset: false,\r\n                        multisampled: false,\r\n                        viewDimension:\"2d\",\r\n                        textureComponentType: \"float\"\r\n                    },\r\n                    {\r\n                        binding: 5,\r\n                        visibility: GPUShaderStage.FRAGMENT,\r\n                        type: \"sampled-texture\",\r\n                        hasDynamicOffset: false,\r\n                        multisampled: false,\r\n                        viewDimension:\"2d\",\r\n                        textureComponentType: \"float\"\r\n                    },\r\n                    {\r\n                        binding: 6,\r\n                        visibility: GPUShaderStage.FRAGMENT,\r\n                        type: \"sampled-texture\",\r\n                        hasDynamicOffset: false,\r\n                        multisampled: false,\r\n                        viewDimension: \"cube\",\r\n                        textureComponentType: \"float\"\r\n                    }\r\n                ]\r\n            }\r\n        );\r\n\r\n        this._groupLayoutPer = this._contextWebGPU.makeBindGroupLayout(\r\n            <GPUBindGroupLayoutDescriptor> {\r\n                entries: <GPUBindGroupLayoutEntry[]> [\r\n                    {\r\n                        binding: 0,\r\n                        visibility: GPUShaderStage.VERTEX,\r\n                        type: \"uniform-buffer\"\r\n                    }\r\n                ]\r\n            }\r\n        )\r\n\r\n        this._pipelineLayout = this._contextWebGPU.makeBasicPipelineLayout(\r\n            <GPUPipelineLayoutDescriptor> {\r\n                bindGroupLayouts: <GPUBindGroupLayout[]> [\r\n                    this._contextWebGPU.groupLayoutGeneral,\r\n                    this._contextWebGPU.groupLayoutWorld,\r\n                    this._groupLayoutModel,\r\n                    this._groupLayoutPer,\r\n                ]\r\n            }\r\n        );\r\n\r\n        this._pipeline = this._contextWebGPU.createRenderPipeline(\r\n            this._pipelineLayout,\r\n            this._programWebGPU,\r\n            this._vertexStateDescriptor,\r\n            this._blend\r\n        );\r\n\r\n        this._innerBuffer =\r\n            this._contextWebGPU.createBufferFromData(this.innerUniforms.data,\r\n                                                     InnerUniforms.byteSize,\r\n                                                     GPUBufferUsage.COPY_DST | GPUBufferUsage.UNIFORM);\r\n\r\n        this._viewBuffer =\r\n            this._contextWebGPU.createBufferFromData(this.worldUniformPer.data,\r\n                                                     this._contextWebGPU.calcConstantBufferByteSize(this.worldUniformPer.byteSize),\r\n                                                     GPUBufferUsage.COPY_DST | GPUBufferUsage.UNIFORM);\r\n\r\n        this._bindGroupModel = this._contextWebGPU.makeBindGroup(\r\n            <GPUBindGroupDescriptor> {\r\n                layout: this._groupLayoutModel,\r\n                entries: <GPUBindGroupEntry[]> [\r\n                    {\r\n                        binding: 0,\r\n                        resource: <GPUBufferBinding> {\r\n                            buffer: this._innerBuffer,\r\n                            offset: 0,\r\n                        }\r\n                    },\r\n                    {\r\n                        binding: 1,\r\n                        resource: this.reflectionTexture.sampler\r\n                    },\r\n                    {\r\n                        binding: 2,\r\n                        resource: this.skyboxTexture.sampler\r\n                    },\r\n                    {\r\n                        binding: 3,\r\n                        resource: this.diffuseTexture.textureView\r\n                    },\r\n                    {\r\n                        binding: 4,\r\n                        resource: this.normalTexture.textureView\r\n                    },\r\n                    {\r\n                        binding: 5,\r\n                        resource: this.reflectionTexture.textureView\r\n                    },\r\n                    {\r\n                        binding: 6,\r\n                        resource: this.skyboxTexture.textureView\r\n                    }\r\n                ]\r\n            }\r\n        );\r\n\r\n        this._bindGroupPer = this._contextWebGPU.makeBindGroup(\r\n            <GPUBindGroupDescriptor> {\r\n                layout: this._groupLayoutPer,\r\n                entries: <GPUBindGroupEntry[]> [\r\n                    {\r\n                        binding: 0,\r\n                        resource: <GPUBufferBinding> {\r\n                            buffer: this._viewBuffer,\r\n                            offset: 0,\r\n                        }\r\n                    }\r\n                ]\r\n            }\r\n        );\r\n\r\n        this._contextWebGPU.setBufferData(this._innerBuffer, 0, InnerUniforms.byteSize,\r\n                                          this.innerUniforms.data);\r\n    }\r\n\r\n    public prepareForDraw(): void {}\r\n\r\n    public draw(): void {\r\n        const pass: GPURenderPassEncoder = this._contextWebGPU.renderPass;\r\n        pass.setPipeline(this._pipeline);\r\n        pass.setBindGroup(0, this._contextWebGPU.bindGroupGeneral);\r\n        pass.setBindGroup(1, this._contextWebGPU.bindGroupWorld);\r\n        pass.setBindGroup(2, this._bindGroupModel);\r\n        pass.setBindGroup(3, this._bindGroupPer);\r\n        pass.setVertexBuffer(0, this.positionBuffer.buffer);\r\n        pass.setVertexBuffer(1, this.normalBuffer.buffer);\r\n        pass.setVertexBuffer(2, this.texCoordBuffer.buffer);\r\n        pass.setVertexBuffer(3, this.tangentBuffer.buffer);\r\n        pass.setVertexBuffer(4, this.biNormalBuffer.buffer);\r\n        pass.setIndexBuffer(this.indicesBuffer.buffer, 0);\r\n        pass.drawIndexed(this.indicesBuffer.totalComponents, 1, 0, 0, 0);\r\n    }\r\n\r\n    public updatePerInstanceUniforms(worldUniforms: WorldUniforms): void {\r\n        this.worldUniformPer.worldUniforms[0] = worldUniforms;\r\n\r\n        this._contextWebGPU.updateBufferData(this._viewBuffer, worldUniforms.data,\r\n                                             this._contextWebGPU.calcConstantBufferByteSize(WorldUniforms.byteSize));\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Defines the fish model of WebGPU.\r\n */\r\nexport class FishModelWebGPU extends FishModel {\r\n\r\n    public fishVertexUniforms: Nullable<FishVertexUniforms> = new FishVertexUniforms();\r\n    public lightFactorUniforms: Nullable<LightFactorUniforms> = new LightFactorUniforms();\r\n\r\n    public diffuseTexture: Nullable<TextureWebGPU> = null;\r\n    public normalTexture: Nullable<TextureWebGPU> = null;\r\n    public reflectionTexture: Nullable<TextureWebGPU> = null;\r\n    public skyboxTexture: Nullable<TextureWebGPU> = null;\r\n\r\n    public positionBuffer: Nullable<BufferWebGPU> = null;\r\n    public normalBuffer: Nullable<BufferWebGPU> = null;\r\n    public texCoordBuffer: Nullable<BufferWebGPU> = null;\r\n    public tangentBuffer: Nullable<BufferWebGPU> = null;\r\n    public biNormalBuffer: Nullable<BufferWebGPU> = null;\r\n\r\n    public indicesBuffer: Nullable<BufferWebGPU> = null;\r\n\r\n    private _vertexStateDescriptor: Nullable<ComboVertexStateDescriptor> = null;\r\n    private _pipeline: GPURenderPipeline;\r\n\r\n    private _groupLayoutModel: GPUBindGroupLayout;\r\n    private _pipelineLayout: GPUPipelineLayout;\r\n\r\n    private _bindGroupModel: GPUBindGroup;\r\n\r\n    private _fishVertexBuffer: GPUBuffer;\r\n    private _lightFactorBuffer: GPUBuffer;\r\n\r\n    private _programWebGPU: ProgramWebGPU;\r\n    private _contextWebGPU: ContextWebGPU;\r\n\r\n    private _enableDynamicBufferOffset: boolean;\r\n\r\n    constructor(context: Nullable<Context>, aquarium: Nullable<Aquarium>, type: MODELGROUP, name: MODELNAME, blend: boolean) {\r\n        super(type, name, blend, aquarium);\r\n\r\n        this._contextWebGPU = context as Nullable<ContextWebGPU>;\r\n        this._vertexStateDescriptor = new ComboVertexStateDescriptor();\r\n\r\n        this._enableDynamicBufferOffset = aquarium.toggleBitset[TOGGLE.ENABLEDYNAMICBUFFEROFFSET];\r\n\r\n        this.lightFactorUniforms.shininess      = 5.0;\r\n        this.lightFactorUniforms.specularFactor = 0.3;\r\n\r\n        const fishInfo: Fish                   = fishTable[name - MODELNAME.MODELSMALLFISHA];\r\n        this.fishVertexUniforms.fishLength     = fishInfo.fishLength;\r\n        this.fishVertexUniforms.fishBendAmount = fishInfo.fishBendAmount;\r\n        this.fishVertexUniforms.fishWaveLength = fishInfo.fishWaveLength;\r\n\r\n        this._curInstance = this._aquarium.fishCount[fishInfo.modelName - MODELNAME.MODELSMALLFISHA];\r\n        this._preInstance = this._curInstance;\r\n    }\r\n\r\n    public dispose(): void {\r\n        this._pipeline          = null;\r\n        this._groupLayoutModel  = null;\r\n        this._pipelineLayout    = null;\r\n        this._bindGroupModel    = null;\r\n        this._fishVertexBuffer  = null;\r\n        this._lightFactorBuffer = null;\r\n    }\r\n\r\n    public init(): void {\r\n        this._programWebGPU = this._program as Nullable<ProgramWebGPU>;\r\n        \r\n        this.diffuseTexture    = this.textureMap[\"diffuse\"] as TextureWebGPU;\r\n        this.normalTexture     = this.textureMap[\"normalMap\"] as TextureWebGPU;\r\n        this.reflectionTexture = this.textureMap[\"reflectionMap\"] as TextureWebGPU;\r\n        this.skyboxTexture     = this.textureMap[\"skybox\"] as TextureWebGPU;\r\n\r\n        this.positionBuffer = this.bufferMap[\"position\"] as BufferWebGPU;\r\n        this.normalBuffer   = this.bufferMap[\"normal\"] as BufferWebGPU;\r\n        this.texCoordBuffer = this.bufferMap[\"texCoord\"] as BufferWebGPU;\r\n        this.tangentBuffer  = this.bufferMap[\"tangent\"] as BufferWebGPU;\r\n        this.biNormalBuffer = this.bufferMap[\"binormal\"] as BufferWebGPU;\r\n        this.indicesBuffer  = this.bufferMap[\"indices\"] as BufferWebGPU;\r\n\r\n        this._vertexStateDescriptor.cVertexBuffers[0].arrayStride = this.positionBuffer.dataSize;\r\n        this._vertexStateDescriptor.cAttributes[0].format         = \"float3\";\r\n        this._vertexStateDescriptor.cAttributes[0].shaderLocation = 0;\r\n        this._vertexStateDescriptor.cAttributes[0].offset         = 0;\r\n        this._vertexStateDescriptor.cVertexBuffers[0].attributes  = [this._vertexStateDescriptor.cAttributes[0]];\r\n        \r\n        this._vertexStateDescriptor.cVertexBuffers[1].arrayStride = this.normalBuffer.dataSize;\r\n        this._vertexStateDescriptor.cAttributes[1].format         = \"float3\";\r\n        this._vertexStateDescriptor.cAttributes[1].shaderLocation = 1;\r\n        this._vertexStateDescriptor.cAttributes[1].offset         = 0;\r\n        this._vertexStateDescriptor.cVertexBuffers[1].attributes  = [this._vertexStateDescriptor.cAttributes[1]];\r\n        \r\n        this._vertexStateDescriptor.cVertexBuffers[2].arrayStride = this.texCoordBuffer.dataSize;\r\n        this._vertexStateDescriptor.cAttributes[2].format         = \"float2\";\r\n        this._vertexStateDescriptor.cAttributes[2].shaderLocation = 2;\r\n        this._vertexStateDescriptor.cAttributes[2].offset         = 0;\r\n        this._vertexStateDescriptor.cVertexBuffers[2].attributes  = [this._vertexStateDescriptor.cAttributes[2]];\r\n        \r\n        this._vertexStateDescriptor.cVertexBuffers[3].arrayStride = this.tangentBuffer.dataSize;\r\n        this._vertexStateDescriptor.cAttributes[3].format         = \"float3\";\r\n        this._vertexStateDescriptor.cAttributes[3].shaderLocation = 3;\r\n        this._vertexStateDescriptor.cAttributes[3].offset         = 0;\r\n        this._vertexStateDescriptor.cVertexBuffers[3].attributes  = [this._vertexStateDescriptor.cAttributes[3]];\r\n        \r\n        this._vertexStateDescriptor.cVertexBuffers[4].arrayStride = this.biNormalBuffer.dataSize;\r\n        this._vertexStateDescriptor.cAttributes[4].format         = \"float3\";\r\n        this._vertexStateDescriptor.cAttributes[4].shaderLocation = 4;\r\n        this._vertexStateDescriptor.cAttributes[4].offset         = 0;\r\n        this._vertexStateDescriptor.cVertexBuffers[4].attributes  = [this._vertexStateDescriptor.cAttributes[4]];\r\n        \r\n        this._vertexStateDescriptor.vertexBufferCount             = 5;\r\n        this._vertexStateDescriptor.indexFormat                   = \"uint16\";\r\n\r\n        if (this.skyboxTexture && this.reflectionTexture) {\r\n            this._groupLayoutModel = this._contextWebGPU.makeBindGroupLayout(\r\n                <GPUBindGroupLayoutDescriptor> {\r\n                    entries: <GPUBindGroupLayoutEntry[]> [\r\n                        {\r\n                            binding: 0,\r\n                            visibility: GPUShaderStage.VERTEX,\r\n                            type: \"uniform-buffer\"\r\n                        },\r\n                        {\r\n                            binding: 1,\r\n                            visibility: GPUShaderStage.FRAGMENT,\r\n                            type: \"uniform-buffer\"\r\n                        },\r\n                        {\r\n                            binding: 2,\r\n                            visibility: GPUShaderStage.FRAGMENT,\r\n                            type: \"sampler\"\r\n                        },\r\n                        {\r\n                            binding: 3,\r\n                            visibility: GPUShaderStage.FRAGMENT,\r\n                            type: \"sampler\"\r\n                        },\r\n                        {\r\n                            binding: 4,\r\n                            visibility: GPUShaderStage.FRAGMENT,\r\n                            type: \"sampled-texture\",\r\n                            hasDynamicOffset: false,\r\n                            multisampled: false,\r\n                            viewDimension: \"2d\",\r\n                            textureComponentType: \"float\"\r\n                        },\r\n                        {\r\n                            binding: 5,\r\n                            visibility: GPUShaderStage.FRAGMENT,\r\n                            type: \"sampled-texture\",\r\n                            hasDynamicOffset: false,\r\n                            multisampled: false,\r\n                            viewDimension:\"2d\",\r\n                            textureComponentType: \"float\"\r\n                        },\r\n                        {\r\n                            binding: 6,\r\n                            visibility: GPUShaderStage.FRAGMENT,\r\n                            type: \"sampled-texture\",\r\n                            hasDynamicOffset: false,\r\n                            multisampled: false,\r\n                            viewDimension:\"2d\",\r\n                            textureComponentType: \"float\"\r\n                        },\r\n                        {\r\n                            binding: 7,\r\n                            visibility: GPUShaderStage.FRAGMENT,\r\n                            type: \"sampled-texture\",\r\n                            hasDynamicOffset: false,\r\n                            multisampled: false,\r\n                            viewDimension: \"cube\",\r\n                            textureComponentType: \"float\"\r\n                        }\r\n                    ]\r\n                }\r\n            );\r\n        }\r\n        else {\r\n            this._groupLayoutModel = this._contextWebGPU.makeBindGroupLayout(\r\n                <GPUBindGroupLayoutDescriptor> {\r\n                    entries: <GPUBindGroupLayoutEntry[]> [\r\n                        {\r\n                            binding: 0,\r\n                            visibility: GPUShaderStage.VERTEX,\r\n                            type: \"uniform-buffer\"\r\n                        },\r\n                        {\r\n                            binding: 1,\r\n                            visibility: GPUShaderStage.FRAGMENT,\r\n                            type: \"uniform-buffer\"\r\n                        },\r\n                        {\r\n                            binding: 2,\r\n                            visibility: GPUShaderStage.FRAGMENT,\r\n                            type: \"sampler\"\r\n                        },\r\n                        {\r\n                            binding: 3,\r\n                            visibility: GPUShaderStage.FRAGMENT,\r\n                            type: \"sampled-texture\",\r\n                            hasDynamicOffset: false,\r\n                            multisampled: false,\r\n                            viewDimension: \"2d\",\r\n                            textureComponentType: \"float\"\r\n                        },\r\n                        {\r\n                            binding: 4,\r\n                            visibility: GPUShaderStage.FRAGMENT,\r\n                            type: \"sampled-texture\",\r\n                            hasDynamicOffset: false,\r\n                            multisampled: false,\r\n                            viewDimension: \"2d\",\r\n                            textureComponentType: \"float\"\r\n                        }\r\n                    ]\r\n                }\r\n            );\r\n        }\r\n\r\n        this._pipelineLayout = this._contextWebGPU.makeBasicPipelineLayout(\r\n            <GPUPipelineLayoutDescriptor> {\r\n                bindGroupLayouts: <GPUBindGroupLayout[]> [\r\n                    this._contextWebGPU.groupLayoutGeneral,\r\n                    this._contextWebGPU.groupLayoutWorld,\r\n                    this._groupLayoutModel,\r\n                    this._contextWebGPU.groupLayoutFishPer,\r\n                ]\r\n            }\r\n        );\r\n\r\n        this._pipeline = this._contextWebGPU.createRenderPipeline(this._pipelineLayout, this._programWebGPU,\r\n                                                                  this._vertexStateDescriptor, this._blend);\r\n\r\n        this._fishVertexBuffer =\r\n            this._contextWebGPU.createBufferFromData(this.fishVertexUniforms.data, FishVertexUniforms.byteSize,\r\n                                                     GPUBufferUsage.COPY_DST | GPUBufferUsage.UNIFORM);\r\n        this._lightFactorBuffer =\r\n            this._contextWebGPU.createBufferFromData(this.lightFactorUniforms.data, LightFactorUniforms.byteSize,\r\n                                                     GPUBufferUsage.COPY_DST | GPUBufferUsage.UNIFORM);\r\n\r\n        // Fish models includes small, medium and big. Some of them contains reflection and skybox\r\n        // texture, but some doesn't.\r\n        if (this.skyboxTexture && this.reflectionTexture) {\r\n            this._bindGroupModel = this._contextWebGPU.makeBindGroup(\r\n                <GPUBindGroupDescriptor> {\r\n                    layout: this._groupLayoutModel,\r\n                    entries: <GPUBindGroupEntry[]> [\r\n                        {\r\n                            binding: 0,\r\n                            resource: <GPUBufferBinding> {\r\n                                buffer: this._fishVertexBuffer,\r\n                                offset: 0,\r\n                            }\r\n                        },\r\n                        {\r\n                            binding: 1,\r\n                            resource: <GPUBufferBinding> {\r\n                                buffer: this._lightFactorBuffer,\r\n                                offset: 0,\r\n                            }\r\n                        },\r\n                        {\r\n                            binding: 2,\r\n                            resource: this.reflectionTexture.sampler\r\n                        },\r\n                        {\r\n                            binding: 3,\r\n                            resource: this.skyboxTexture.sampler\r\n                        },\r\n                        {\r\n                            binding: 4,\r\n                            resource: this.diffuseTexture.textureView\r\n                        },\r\n                        {\r\n                            binding: 5,\r\n                            resource: this.normalTexture.textureView\r\n                        },\r\n                        {\r\n                            binding: 6,\r\n                            resource: this.reflectionTexture.textureView\r\n                        },\r\n                        {\r\n                            binding: 7,\r\n                            resource: this.skyboxTexture.textureView\r\n                        }\r\n                    ]\r\n                }\r\n            );\r\n        } else {\r\n            this._bindGroupModel = this._contextWebGPU.makeBindGroup(\r\n                <GPUBindGroupDescriptor> {\r\n                    layout: this._groupLayoutModel,\r\n                    entries: <GPUBindGroupEntry[]> [\r\n                        {\r\n                            binding: 0,\r\n                            resource: <GPUBufferBinding> {\r\n                                buffer: this._fishVertexBuffer,\r\n                                offset: 0,\r\n                            }\r\n                        },\r\n                        {\r\n                            binding: 1,\r\n                            resource: <GPUBufferBinding> {\r\n                                buffer: this._lightFactorBuffer,\r\n                                offset: 0,\r\n                            }\r\n                        },\r\n                        {\r\n                            binding: 2,\r\n                            resource: this.diffuseTexture.sampler\r\n                        },\r\n                        {\r\n                            binding: 3,\r\n                            resource: this.diffuseTexture.textureView\r\n                        },\r\n                        {\r\n                            binding: 4,\r\n                            resource: this.normalTexture.textureView\r\n                        }\r\n                    ]\r\n                }\r\n            );\r\n        }\r\n\r\n        this._contextWebGPU.setBufferData(this._lightFactorBuffer, 0, LightFactorUniforms.byteSize,\r\n                                          this.lightFactorUniforms.data);\r\n        this._contextWebGPU.setBufferData(this._fishVertexBuffer, 0, FishVertexUniforms.byteSize,\r\n                                          this.fishVertexUniforms.data);\r\n    }\r\n\r\n    public draw(): void {\r\n        if (this._curInstance == 0) {\r\n            return;\r\n        }\r\n\r\n        const pass = this._contextWebGPU.renderPass;\r\n        pass.setPipeline(this._pipeline);\r\n        pass.setBindGroup(0, this._contextWebGPU.bindGroupGeneral);\r\n        pass.setBindGroup(1, this._contextWebGPU.bindGroupWorld);\r\n        pass.setBindGroup(2, this._bindGroupModel);\r\n        pass.setVertexBuffer(0, this.positionBuffer.buffer);\r\n        pass.setVertexBuffer(1, this.normalBuffer.buffer);\r\n        pass.setVertexBuffer(2, this.texCoordBuffer.buffer);\r\n        pass.setVertexBuffer(3, this.tangentBuffer.buffer);\r\n        pass.setVertexBuffer(4, this.biNormalBuffer.buffer);\r\n        pass.setIndexBuffer(this.indicesBuffer.buffer, 0);\r\n        \r\n        if (this._enableDynamicBufferOffset) {\r\n            for (let i: uint32_t = 0; i < this._curInstance; ++i) {\r\n                const offset: uint32_t = 256 * (i + this._fishPerOffset);\r\n                pass.setBindGroup(3, this._contextWebGPU.bindGroupFishPers[0], [offset]);\r\n                pass.drawIndexed(this.indicesBuffer.totalComponents, 1, 0, 0, 0);\r\n            }\r\n        }\r\n        else {\r\n            for (let i: uint32_t = 0; i < this._curInstance; ++i) {\r\n                pass.setBindGroup(3, this._contextWebGPU.bindGroupFishPers[i + this._fishPerOffset]);\r\n                pass.drawIndexed(this.indicesBuffer.totalComponents, 1, 0, 0, 0);\r\n            }\r\n        }\r\n    }\r\n\r\n    public updatePerInstanceUniforms(worldUniforms: WorldUniforms): void { }\r\n\r\n    public updateFishPerUniforms(x: float, y: float, z: float,\r\n                                 nextX: float, nextY: float, nextZ: float,\r\n                                 scale: float, time: float, index: int): void {\r\n        index += this._fishPerOffset;\r\n        this._contextWebGPU.fishPers[index].worldPosition[0] = x;\r\n        this._contextWebGPU.fishPers[index].worldPosition[1] = y;\r\n        this._contextWebGPU.fishPers[index].worldPosition[2] = z;\r\n        this._contextWebGPU.fishPers[index].nextPosition[0]  = nextX;\r\n        this._contextWebGPU.fishPers[index].nextPosition[1]  = nextY;\r\n        this._contextWebGPU.fishPers[index].nextPosition[2]  = nextZ;\r\n        this._contextWebGPU.fishPers[index].scale            = scale;\r\n        this._contextWebGPU.fishPers[index].time             = time;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Defines the fish instanced draw model of WebGPU.\r\n */\r\nexport class FishModelInstancedDrawWebGPU extends FishModel {\r\n\r\n    public fishVertexUniforms: Nullable<FishVertexUniforms> = new FishVertexUniforms();\r\n    public lightFactorUniforms: Nullable<LightFactorUniforms> = new LightFactorUniforms();\r\n    public fishPers: Array<FishPer> = new Array<FishPer>();\r\n\r\n    public diffuseTexture: Nullable<TextureWebGPU> = null;\r\n    public normalTexture: Nullable<TextureWebGPU> = null;\r\n    public reflectionTexture: Nullable<TextureWebGPU> = null;\r\n    public skyboxTexture: Nullable<TextureWebGPU> = null;\r\n\r\n    public positionBuffer: Nullable<BufferWebGPU> = null;\r\n    public normalBuffer: Nullable<BufferWebGPU> = null;\r\n    public texCoordBuffer: Nullable<BufferWebGPU> = null;\r\n    public tangentBuffer: Nullable<BufferWebGPU> = null;\r\n    public biNormalBuffer: Nullable<BufferWebGPU> = null;\r\n\r\n    public indicesBuffer: Nullable<BufferWebGPU> = null;\r\n\r\n    private _vertexStateDescriptor: Nullable<ComboVertexStateDescriptor> = null;\r\n    private _pipeline: GPURenderPipeline;\r\n\r\n    private _groupLayoutModel: GPUBindGroupLayout;\r\n    private _groupLayoutPer: GPUBindGroupLayout;\r\n    private _pipelineLayout: GPUPipelineLayout;\r\n\r\n    private _bindGroupModel: GPUBindGroup;\r\n    private _bindGroupPer: GPUBindGroup;\r\n\r\n    private _fishVertexBuffer: GPUBuffer;\r\n    private _lightFactorBuffer: GPUBuffer;\r\n\r\n    private _fishPersBuffer: GPUBuffer;\r\n\r\n    private _instance: int;\r\n\r\n    private _programWebGPU: Nullable<ProgramWebGPU> = null;\r\n    private _contextWebGPU: Nullable<ContextWebGPU> = null;\r\n\r\n    constructor(context: Nullable<Context>, aquarium: Nullable<Aquarium>, type: MODELGROUP, name: MODELNAME, blend: boolean) {\r\n        super(type, name, blend, aquarium);\r\n        this._instance = 0;\r\n\r\n        this._contextWebGPU = context as Nullable<ContextWebGPU>;\r\n        this._vertexStateDescriptor = new ComboVertexStateDescriptor();\r\n\r\n        this.lightFactorUniforms.shininess      = 5.0;\r\n        this.lightFactorUniforms.specularFactor = 0.3;\r\n\r\n        const fishInfo: Fish                   = fishTable[name - MODELNAME.MODELSMALLFISHAINSTANCEDDRAWS];\r\n        this.fishVertexUniforms.fishLength     = fishInfo.fishLength;\r\n        this.fishVertexUniforms.fishBendAmount = fishInfo.fishBendAmount;\r\n        this.fishVertexUniforms.fishWaveLength = fishInfo.fishWaveLength;\r\n\r\n        this._instance = aquarium.fishCount[fishInfo.modelName - MODELNAME.MODELSMALLFISHA];\r\n        this.fishPers = BuildArray(this._instance, () => new FishPer());\r\n    }\r\n\r\n    public init(): void {\r\n        if (this._instance == 0) {\r\n            return;\r\n        }\r\n\r\n        this._programWebGPU = this._program as Nullable<ProgramWebGPU>;\r\n\r\n        this.diffuseTexture    = this.textureMap[\"diffuse\"] as TextureWebGPU;\r\n        this.normalTexture     = this.textureMap[\"normalMap\"] as TextureWebGPU;\r\n        this.reflectionTexture = this.textureMap[\"reflectionMap\"] as TextureWebGPU;\r\n        this.skyboxTexture     = this.textureMap[\"skybox\"] as TextureWebGPU;\r\n\r\n        this.positionBuffer = this.bufferMap[\"position\"] as BufferWebGPU;\r\n        this.normalBuffer   = this.bufferMap[\"normal\"] as BufferWebGPU;\r\n        this.texCoordBuffer = this.bufferMap[\"texCoord\"] as BufferWebGPU;\r\n        this.tangentBuffer  = this.bufferMap[\"tangent\"] as BufferWebGPU;\r\n        this.biNormalBuffer = this.bufferMap[\"binormal\"] as BufferWebGPU;\r\n        this.indicesBuffer  = this.bufferMap[\"indices\"] as BufferWebGPU;\r\n\r\n        this._fishPersBuffer =\r\n            this._contextWebGPU.createBuffer(FishPer.byteSize * this._instance,\r\n                                             GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST);\r\n\r\n        this._vertexStateDescriptor.cVertexBuffers[0].arrayStride = this.positionBuffer.dataSize;\r\n        this._vertexStateDescriptor.cAttributes[0].format         = \"float3\";\r\n        this._vertexStateDescriptor.cAttributes[0].shaderLocation = 0;\r\n        this._vertexStateDescriptor.cAttributes[0].offset         = 0;\r\n        this._vertexStateDescriptor.cVertexBuffers[0].attributes  = [this._vertexStateDescriptor.cAttributes[0]];\r\n        \r\n        this._vertexStateDescriptor.cVertexBuffers[1].arrayStride = this.normalBuffer.dataSize;\r\n        this._vertexStateDescriptor.cAttributes[1].format         = \"float3\";\r\n        this._vertexStateDescriptor.cAttributes[1].shaderLocation = 1;\r\n        this._vertexStateDescriptor.cAttributes[1].offset         = 0;\r\n        this._vertexStateDescriptor.cVertexBuffers[1].attributes  = [this._vertexStateDescriptor.cAttributes[1]];\r\n        \r\n        this._vertexStateDescriptor.cVertexBuffers[2].arrayStride = this.texCoordBuffer.dataSize;\r\n        this._vertexStateDescriptor.cAttributes[2].format         = \"float2\";\r\n        this._vertexStateDescriptor.cAttributes[2].shaderLocation = 2;\r\n        this._vertexStateDescriptor.cAttributes[2].offset         = 0;\r\n        this._vertexStateDescriptor.cVertexBuffers[2].attributes  = [this._vertexStateDescriptor.cAttributes[2]];\r\n        \r\n        this._vertexStateDescriptor.cVertexBuffers[3].arrayStride = this.tangentBuffer.dataSize;\r\n        this._vertexStateDescriptor.cAttributes[3].format         = \"float3\";\r\n        this._vertexStateDescriptor.cAttributes[3].shaderLocation = 3;\r\n        this._vertexStateDescriptor.cAttributes[3].offset         = 0;\r\n        this._vertexStateDescriptor.cVertexBuffers[3].attributes  = [this._vertexStateDescriptor.cAttributes[3]];\r\n        \r\n        this._vertexStateDescriptor.cVertexBuffers[4].arrayStride = this.biNormalBuffer.dataSize;\r\n        this._vertexStateDescriptor.cAttributes[4].format         = \"float3\";\r\n        this._vertexStateDescriptor.cAttributes[4].shaderLocation = 4;\r\n        this._vertexStateDescriptor.cAttributes[4].offset         = FishPer.offsetof(\"worldPosition\");\r\n        this._vertexStateDescriptor.cVertexBuffers[4].attributes  = [this._vertexStateDescriptor.cAttributes[4]];\r\n\r\n        this._vertexStateDescriptor.cVertexBuffers[5].arrayStride = FishPer.byteSize;\r\n        this._vertexStateDescriptor.cAttributes[5].format         = \"float3\";\r\n        this._vertexStateDescriptor.cAttributes[5].shaderLocation = 5;\r\n        this._vertexStateDescriptor.cAttributes[5].offset         = 0; // FishPer.offsetof(\"worldPosition\");\r\n    \r\n        this._vertexStateDescriptor.cAttributes[6].format         = \"float\";\r\n        this._vertexStateDescriptor.cAttributes[6].shaderLocation = 6;\r\n        this._vertexStateDescriptor.cAttributes[6].offset         = FishPer.offsetof(\"scale\");\r\n    \r\n        this._vertexStateDescriptor.cAttributes[7].format         = \"float3\";\r\n        this._vertexStateDescriptor.cAttributes[7].shaderLocation = 7;\r\n        this._vertexStateDescriptor.cAttributes[7].offset         = FishPer.offsetof(\"nextPosition\");\r\n    \r\n        this._vertexStateDescriptor.cAttributes[8].format         = \"float\";\r\n        this._vertexStateDescriptor.cAttributes[8].shaderLocation = 8;\r\n        this._vertexStateDescriptor.cAttributes[8].offset         = FishPer.offsetof(\"time\");\r\n    \r\n        this._vertexStateDescriptor.cVertexBuffers[5].attributes  = this._vertexStateDescriptor.cAttributes.slice(5, 9);\r\n        this._vertexStateDescriptor.cVertexBuffers[5].stepMode    = \"instance\";\r\n\r\n        this._vertexStateDescriptor.vertexBufferCount             = 6;\r\n        this._vertexStateDescriptor.indexFormat                   = \"uint16\";\r\n\r\n        if (this.skyboxTexture && this.reflectionTexture) {\r\n            this._groupLayoutModel = this._contextWebGPU.makeBindGroupLayout(\r\n                <GPUBindGroupLayoutDescriptor> {\r\n                    entries: <GPUBindGroupLayoutEntry[]> [\r\n                        {\r\n                            binding: 0,\r\n                            visibility: GPUShaderStage.VERTEX,\r\n                            type: \"uniform-buffer\"\r\n                        },\r\n                        {\r\n                            binding: 1,\r\n                            visibility: GPUShaderStage.FRAGMENT,\r\n                            type: \"uniform-buffer\"\r\n                        },\r\n                        {\r\n                            binding: 2,\r\n                            visibility: GPUShaderStage.FRAGMENT,\r\n                            type: \"sampler\"\r\n                        },\r\n                        {\r\n                            binding: 3,\r\n                            visibility: GPUShaderStage.FRAGMENT,\r\n                            type: \"sampler\"\r\n                        },\r\n                        {\r\n                            binding: 4,\r\n                            visibility: GPUShaderStage.FRAGMENT,\r\n                            type: \"sampled-texture\",\r\n                            hasDynamicOffset: false,\r\n                            multisampled: false,\r\n                            viewDimension: \"2d\",\r\n                            textureComponentType: \"float\"\r\n                        },\r\n                        {\r\n                            binding: 5,\r\n                            visibility: GPUShaderStage.FRAGMENT,\r\n                            type: \"sampled-texture\",\r\n                            hasDynamicOffset: false,\r\n                            multisampled: false,\r\n                            viewDimension:\"2d\",\r\n                            textureComponentType: \"float\"\r\n                        },\r\n                        {\r\n                            binding: 6,\r\n                            visibility: GPUShaderStage.FRAGMENT,\r\n                            type: \"sampled-texture\",\r\n                            hasDynamicOffset: false,\r\n                            multisampled: false,\r\n                            viewDimension:\"2d\",\r\n                            textureComponentType: \"float\"\r\n                        },\r\n                        {\r\n                            binding: 7,\r\n                            visibility: GPUShaderStage.FRAGMENT,\r\n                            type: \"sampled-texture\",\r\n                            hasDynamicOffset: false,\r\n                            multisampled: false,\r\n                            viewDimension: \"cube\",\r\n                            textureComponentType: \"float\"\r\n                        }\r\n                    ]\r\n                }\r\n            );\r\n        }\r\n        else {\r\n            this._groupLayoutModel = this._contextWebGPU.makeBindGroupLayout(\r\n                <GPUBindGroupLayoutDescriptor> {\r\n                    entries: <GPUBindGroupLayoutEntry[]> [\r\n                        {\r\n                            binding: 0,\r\n                            visibility: GPUShaderStage.VERTEX,\r\n                            type: \"uniform-buffer\"\r\n                        },\r\n                        {\r\n                            binding: 1,\r\n                            visibility: GPUShaderStage.FRAGMENT,\r\n                            type: \"uniform-buffer\"\r\n                        },\r\n                        {\r\n                            binding: 2,\r\n                            visibility: GPUShaderStage.FRAGMENT,\r\n                            type: \"sampler\"\r\n                        },\r\n                        {\r\n                            binding: 3,\r\n                            visibility: GPUShaderStage.FRAGMENT,\r\n                            type: \"sampled-texture\",\r\n                            hasDynamicOffset: false,\r\n                            multisampled: false,\r\n                            viewDimension:\"2d\",\r\n                            textureComponentType: \"float\"\r\n                        },\r\n                        {\r\n                            binding: 4,\r\n                            visibility: GPUShaderStage.FRAGMENT,\r\n                            type: \"sampled-texture\",\r\n                            hasDynamicOffset: false,\r\n                            multisampled: false,\r\n                            viewDimension:\"2d\",\r\n                            textureComponentType: \"float\"\r\n                        }\r\n                    ]\r\n                }\r\n            );\r\n        }\r\n\r\n        this._groupLayoutPer = this._contextWebGPU.makeBindGroupLayout(\r\n            <GPUBindGroupLayoutDescriptor> {\r\n                entries: <GPUBindGroupLayoutEntry[]> [\r\n                    {\r\n                        binding: 0,\r\n                        visibility: GPUShaderStage.VERTEX,\r\n                        type: \"uniform-buffer\"\r\n                    }\r\n                ]\r\n            }\r\n        )\r\n\r\n        this._pipelineLayout = this._contextWebGPU.makeBasicPipelineLayout(\r\n            <GPUPipelineLayoutDescriptor> {\r\n                bindGroupLayouts: <GPUBindGroupLayout[]> [\r\n                    this._contextWebGPU.groupLayoutGeneral,\r\n                    this._contextWebGPU.groupLayoutWorld,\r\n                    this._groupLayoutModel,\r\n                    this._groupLayoutPer,\r\n                ]\r\n            }\r\n        );\r\n\r\n        this._pipeline = this._contextWebGPU.createRenderPipeline(\r\n            this._pipelineLayout,\r\n            this._programWebGPU,\r\n            this._vertexStateDescriptor,\r\n            this._blend\r\n        );\r\n\r\n        this._fishVertexBuffer =\r\n            this._contextWebGPU.createBufferFromData(this.fishVertexUniforms.data, FishVertexUniforms.byteSize,\r\n                                                     GPUBufferUsage.COPY_DST | GPUBufferUsage.UNIFORM);\r\n        this._lightFactorBuffer =\r\n            this._contextWebGPU.createBufferFromData(this.lightFactorUniforms.data, LightFactorUniforms.byteSize,\r\n                                                     GPUBufferUsage.COPY_DST | GPUBufferUsage.UNIFORM);\r\n\r\n        // Fish models includes small, medium and big. Some of them contains reflection and skybox\r\n        // texture, but some doesn't.\r\n        if (this.skyboxTexture && this.reflectionTexture) {\r\n            this._bindGroupModel = this._contextWebGPU.makeBindGroup(\r\n                <GPUBindGroupDescriptor> {\r\n                    layout: this._groupLayoutModel,\r\n                    entries: <GPUBindGroupEntry[]> [\r\n                        {\r\n                            binding: 0,\r\n                            resource: <GPUBufferBinding> {\r\n                                buffer: this._fishVertexBuffer,\r\n                                offset: 0,\r\n                            }\r\n                        },\r\n                        {\r\n                            binding: 1,\r\n                            resource: <GPUBufferBinding> {\r\n                                buffer: this._lightFactorBuffer,\r\n                                offset: 0,\r\n                            }\r\n                        },\r\n                        {\r\n                            binding: 2,\r\n                            resource: this.reflectionTexture.sampler\r\n                        },\r\n                        {\r\n                            binding: 3,\r\n                            resource: this.skyboxTexture.sampler\r\n                        },\r\n                        {\r\n                            binding: 4,\r\n                            resource: this.diffuseTexture.textureView\r\n                        },\r\n                        {\r\n                            binding: 5,\r\n                            resource: this.normalTexture.textureView\r\n                        },\r\n                        {\r\n                            binding: 6,\r\n                            resource: this.reflectionTexture.textureView\r\n                        },\r\n                        {\r\n                            binding: 7,\r\n                            resource: this.skyboxTexture.textureView\r\n                        }\r\n                    ]\r\n                }\r\n            );\r\n        } else {\r\n            this._bindGroupModel = this._contextWebGPU.makeBindGroup(\r\n                <GPUBindGroupDescriptor> {\r\n                    layout: this._groupLayoutModel,\r\n                    entries: <GPUBindGroupEntry[]> [\r\n                        {\r\n                            binding: 0,\r\n                            resource: <GPUBufferBinding> {\r\n                                buffer: this._fishVertexBuffer,\r\n                                offset: 0,\r\n                            }\r\n                        },\r\n                        {\r\n                            binding: 1,\r\n                            resource: <GPUBufferBinding> {\r\n                                buffer: this._lightFactorBuffer,\r\n                                offset: 0,\r\n                            }\r\n                        },\r\n                        {\r\n                            binding: 2,\r\n                            resource: this.diffuseTexture.sampler\r\n                        },\r\n                        {\r\n                            binding: 3,\r\n                            resource: this.diffuseTexture.textureView\r\n                        },\r\n                        {\r\n                            binding: 4,\r\n                            resource: this.normalTexture.textureView\r\n                        }\r\n                    ]\r\n                }\r\n            );\r\n        }\r\n\r\n        this._contextWebGPU.setBufferData(this._lightFactorBuffer, 0, LightFactorUniforms.byteSize,\r\n                                          this.lightFactorUniforms.data);\r\n        this._contextWebGPU.setBufferData(this._fishVertexBuffer, 0, FishVertexUniforms.byteSize,\r\n                                          this.fishVertexUniforms.data);\r\n    }\r\n\r\n    public prepareForDraw(): void { }\r\n\r\n    public draw(): void {\r\n        if (this._instance == 0) {\r\n            return;\r\n        }\r\n\r\n        this._contextWebGPU.setBufferData(this._fishPersBuffer, 0, FishPer.byteSize * this._instance,\r\n                                          new Float32Array(FishPer.toArray(this.fishPers)));\r\n\r\n        const pass = this._contextWebGPU.renderPass;\r\n        pass.setPipeline(this._pipeline);\r\n        pass.setBindGroup(0, this._contextWebGPU.bindGroupGeneral);\r\n        pass.setBindGroup(1, this._contextWebGPU.bindGroupWorld);\r\n        pass.setBindGroup(2, this._bindGroupModel);\r\n        pass.setVertexBuffer(0, this.positionBuffer.buffer);\r\n        pass.setVertexBuffer(1, this.normalBuffer.buffer);\r\n        pass.setVertexBuffer(2, this.texCoordBuffer.buffer);\r\n        pass.setVertexBuffer(3, this.tangentBuffer.buffer);\r\n        pass.setVertexBuffer(4, this.biNormalBuffer.buffer);\r\n        pass.setVertexBuffer(5, this._fishPersBuffer);\r\n        pass.setIndexBuffer(this.indicesBuffer.buffer, 0);\r\n        pass.drawIndexed(this.indicesBuffer.totalComponents, this._instance, 0, 0, 0);\r\n    }\r\n\r\n    public updatePerInstanceUniforms(worldUniforms: WorldUniforms): void { }\r\n\r\n    public updateFishPerUniforms(x: float, y: float, z: float,\r\n                                 nextX: float, nextY: float, nextZ: float,\r\n                                 scale: float, time: float, index: int): void {\r\n        this.fishPers[index].worldPosition[0] = x;\r\n        this.fishPers[index].worldPosition[1] = y;\r\n        this.fishPers[index].worldPosition[2] = z;\r\n        this.fishPers[index].nextPosition[0]  = nextX;\r\n        this.fishPers[index].nextPosition[1]  = nextY;\r\n        this.fishPers[index].nextPosition[2]  = nextZ;\r\n        this.fishPers[index].scale            = scale;\r\n        this.fishPers[index].time             = time;\r\n    }\r\n\r\n    public dispose(): void {\r\n        this._pipeline          = null;\r\n        this._groupLayoutModel  = null;\r\n        this._groupLayoutPer    = null;\r\n        this._pipelineLayout    = null;\r\n        this._bindGroupModel    = null;\r\n        this._bindGroupPer      = null;\r\n        this._fishVertexBuffer  = null;\r\n        this._lightFactorBuffer = null;\r\n        this._fishPersBuffer    = null;\r\n        this.fishPers.length    = 0;\r\n    }\r\n}\r\n\r\n/**\r\n * Defines the seaweed model of WebGPU.\r\n */\r\nexport class SeaweedModelWebGPU extends SeaweedModel {\r\n\r\n    public diffuseTexture: Nullable<TextureWebGPU> = null;\r\n    public normalTexture: Nullable<TextureWebGPU> = null;\r\n    public reflectionTexture: Nullable<TextureWebGPU> = null;\r\n    public skyboxTexture: Nullable<TextureWebGPU> = null;\r\n\r\n    public positionBuffer: Nullable<BufferWebGPU> = null;\r\n    public normalBuffer: Nullable<BufferWebGPU> = null;\r\n    public texCoordBuffer: Nullable<BufferWebGPU> = null;\r\n\r\n    public indicesBuffer: Nullable<BufferWebGPU> = null;\r\n\r\n    public lightFactorUniforms: Nullable<LightFactorUniforms> = new LightFactorUniforms();\r\n    public seaweedPer: Nullable<SeaweedPer> = new SeaweedPer();\r\n    public worldUniformPer: Nullable<WorldUniformPer> = new WorldUniformPer();\r\n\r\n    private _vertexStateDescriptor: Nullable<ComboVertexStateDescriptor> = null;\r\n    private _pipeline: GPURenderPipeline;\r\n\r\n    private _groupLayoutModel: GPUBindGroupLayout;\r\n    private _groupLayoutPer: GPUBindGroupLayout;\r\n    private _pipelineLayout: GPUPipelineLayout;\r\n\r\n    private _bindGroupModel: GPUBindGroup;\r\n    private _bindGroupPer: GPUBindGroup;\r\n\r\n    private _lightFactorBuffer: GPUBuffer;\r\n    private _timeBuffer: GPUBuffer;\r\n    private _viewBuffer: GPUBuffer;\r\n\r\n    private _contextWebGPU: Nullable<ContextWebGPU> = null;\r\n    private _programWebGPU: Nullable<ProgramWebGPU> = null;\r\n    private _aquarium: Nullable<Aquarium> = null;\r\n\r\n    private _instance: int;\r\n\r\n    constructor(context: Nullable<Context>, aquarium: Nullable<Aquarium>, type: MODELGROUP, name: MODELNAME, blend: boolean) {\r\n        super(type, name, blend);\r\n        this._instance = 0;\r\n\r\n        this._contextWebGPU = context as Nullable<ContextWebGPU>;\r\n        this._aquarium      = aquarium;\r\n\r\n        this._vertexStateDescriptor = new ComboVertexStateDescriptor();\r\n\r\n        this.lightFactorUniforms.shininess      = 50.0;\r\n        this.lightFactorUniforms.specularFactor = 1.0;\r\n    }\r\n\r\n    public dispose(): void {\r\n        this._pipeline          = null;\r\n        this._groupLayoutModel  = null;\r\n        this._groupLayoutPer    = null;\r\n        this._pipelineLayout    = null;\r\n        this._bindGroupModel    = null;\r\n        this._bindGroupPer      = null;\r\n        this._lightFactorBuffer = null;\r\n        this._viewBuffer        = null;\r\n        this._timeBuffer        = null;\r\n    }\r\n\r\n    public init(): void {\r\n        this._programWebGPU = this._program as Nullable<ProgramWebGPU>;\r\n\r\n        this.diffuseTexture    = this.textureMap[\"diffuse\"] as TextureWebGPU;\r\n        this.normalTexture     = this.textureMap[\"normalMap\"] as TextureWebGPU;\r\n        this.reflectionTexture = this.textureMap[\"reflectionMap\"] as TextureWebGPU;\r\n        this.skyboxTexture     = this.textureMap[\"skybox\"] as TextureWebGPU;\r\n\r\n        this.positionBuffer = this.bufferMap[\"position\"] as BufferWebGPU;\r\n        this.normalBuffer   = this.bufferMap[\"normal\"] as BufferWebGPU;\r\n        this.texCoordBuffer = this.bufferMap[\"texCoord\"] as BufferWebGPU;\r\n        this.indicesBuffer  = this.bufferMap[\"indices\"] as BufferWebGPU;\r\n\r\n        this._vertexStateDescriptor.cVertexBuffers[0].arrayStride = this.positionBuffer.dataSize;\r\n        this._vertexStateDescriptor.cAttributes[0].format         = \"float3\";\r\n        this._vertexStateDescriptor.cAttributes[0].shaderLocation = 0;\r\n        this._vertexStateDescriptor.cAttributes[0].offset         = 0;\r\n        this._vertexStateDescriptor.cVertexBuffers[0].attributes  = [this._vertexStateDescriptor.cAttributes[0]];\r\n        \r\n        this._vertexStateDescriptor.cVertexBuffers[1].arrayStride = this.normalBuffer.dataSize;\r\n        this._vertexStateDescriptor.cAttributes[1].format         = \"float3\";\r\n        this._vertexStateDescriptor.cAttributes[1].shaderLocation = 1;\r\n        this._vertexStateDescriptor.cAttributes[1].offset         = 0;\r\n        this._vertexStateDescriptor.cVertexBuffers[1].attributes  = [this._vertexStateDescriptor.cAttributes[1]];\r\n        \r\n        this._vertexStateDescriptor.cVertexBuffers[2].arrayStride = this.texCoordBuffer.dataSize;\r\n        this._vertexStateDescriptor.cAttributes[2].format         = \"float2\";\r\n        this._vertexStateDescriptor.cAttributes[2].shaderLocation = 2;\r\n        this._vertexStateDescriptor.cAttributes[2].offset         = 0;\r\n        this._vertexStateDescriptor.cVertexBuffers[2].attributes  = [this._vertexStateDescriptor.cAttributes[2]];\r\n          \r\n        this._vertexStateDescriptor.vertexBufferCount             = 3;\r\n        this._vertexStateDescriptor.indexFormat                   = \"uint16\";\r\n\r\n        this._groupLayoutModel = this._contextWebGPU.makeBindGroupLayout(\r\n            <GPUBindGroupLayoutDescriptor> {\r\n                entries: <GPUBindGroupLayoutEntry[]> [\r\n                    {\r\n                        binding: 0,\r\n                        visibility: GPUShaderStage.FRAGMENT,\r\n                        type: \"uniform-buffer\"\r\n                    },\r\n                    {\r\n                        binding: 1,\r\n                        visibility: GPUShaderStage.FRAGMENT,\r\n                        type: \"sampler\"\r\n                    },\r\n                    {\r\n                        binding: 2,\r\n                        visibility: GPUShaderStage.FRAGMENT,\r\n                        type: \"sampled-texture\",\r\n                        hasDynamicOffset: false,\r\n                        multisampled: false,\r\n                        viewDimension:\"2d\",\r\n                        textureComponentType: \"float\"\r\n                    }\r\n                ]\r\n            }\r\n        );\r\n\r\n        this._groupLayoutPer = this._contextWebGPU.makeBindGroupLayout(\r\n            <GPUBindGroupLayoutDescriptor> {\r\n                entries: <GPUBindGroupLayoutEntry[]> [\r\n                    {\r\n                        binding: 0,\r\n                        visibility: GPUShaderStage.VERTEX,\r\n                        type: \"uniform-buffer\"\r\n                    },\r\n                    {\r\n                        binding: 1,\r\n                        visibility: GPUShaderStage.VERTEX,\r\n                        type: \"uniform-buffer\"\r\n                    }\r\n                ]\r\n            }\r\n        )\r\n\r\n        this._pipelineLayout = this._contextWebGPU.makeBasicPipelineLayout(\r\n            <GPUPipelineLayoutDescriptor> {\r\n                bindGroupLayouts: <GPUBindGroupLayout[]> [\r\n                    this._contextWebGPU.groupLayoutGeneral,\r\n                    this._contextWebGPU.groupLayoutWorld,\r\n                    this._groupLayoutModel,\r\n                    this._groupLayoutPer,\r\n                ]\r\n            }\r\n        );\r\n\r\n        this._pipeline = this._contextWebGPU.createRenderPipeline(\r\n            this._pipelineLayout,\r\n            this._programWebGPU,\r\n            this._vertexStateDescriptor,\r\n            this._blend\r\n        );\r\n\r\n        this._lightFactorBuffer =\r\n            this._contextWebGPU.createBufferFromData(this.lightFactorUniforms.data,\r\n                                                     LightFactorUniforms.byteSize,\r\n                                                     GPUBufferUsage.COPY_DST | GPUBufferUsage.UNIFORM);\r\n\r\n        this._timeBuffer =\r\n            this._contextWebGPU.createBufferFromData(this.seaweedPer.data,\r\n                                                     this._contextWebGPU.calcConstantBufferByteSize(this.seaweedPer.byteSize) * 4,\r\n                                                     GPUBufferUsage.COPY_DST | GPUBufferUsage.UNIFORM);\r\n\r\n        this._viewBuffer =\r\n            this._contextWebGPU.createBufferFromData(this.worldUniformPer.data,\r\n                                                     this._contextWebGPU.calcConstantBufferByteSize(this.worldUniformPer.byteSize),\r\n                                                     GPUBufferUsage.COPY_DST | GPUBufferUsage.UNIFORM);\r\n\r\n        this._bindGroupModel = this._contextWebGPU.makeBindGroup(\r\n            <GPUBindGroupDescriptor> {\r\n                layout: this._groupLayoutModel,\r\n                entries: <GPUBindGroupEntry[]> [\r\n                    {\r\n                        binding: 0,\r\n                        resource: <GPUBufferBinding> {\r\n                            buffer: this._lightFactorBuffer,\r\n                            offset: 0,\r\n                        }\r\n                    },\r\n                    {\r\n                        binding: 1,\r\n                        resource: this.diffuseTexture.sampler\r\n                    },\r\n                    {\r\n                        binding: 2,\r\n                        resource: this.diffuseTexture.textureView\r\n                    }\r\n                ]\r\n            }\r\n        );\r\n\r\n        this._bindGroupPer = this._contextWebGPU.makeBindGroup(\r\n            <GPUBindGroupDescriptor> {\r\n                layout: this._groupLayoutPer,\r\n                entries: <GPUBindGroupEntry[]> [\r\n                    {\r\n                        binding: 0,\r\n                        resource: <GPUBufferBinding> {\r\n                            buffer: this._viewBuffer,\r\n                            offset: 0,\r\n                        }\r\n                    },\r\n                    {\r\n                        binding: 1,\r\n                        resource: <GPUBufferBinding> {\r\n                            buffer: this._timeBuffer,\r\n                            offset: 0,\r\n                        }\r\n                    }\r\n                ]\r\n            }\r\n        );\r\n\r\n        this._contextWebGPU.setBufferData(this._lightFactorBuffer, 0, LightFactorUniforms.byteSize,\r\n                                          this.lightFactorUniforms.data);\r\n    }\r\n\r\n    public prepareForDraw(): void {\r\n        this._contextWebGPU.updateBufferData(this._viewBuffer, this.worldUniformPer.data,\r\n            this._contextWebGPU.calcConstantBufferByteSize(this.worldUniformPer.byteSize));\r\n        this._contextWebGPU.updateBufferData(this._timeBuffer, this.seaweedPer.data,\r\n            this._contextWebGPU.calcConstantBufferByteSize(this.seaweedPer.byteSize));\r\n    }\r\n\r\n    public draw(): void {\r\n        const pass = this._contextWebGPU.renderPass;\r\n        pass.setPipeline(this._pipeline);\r\n        pass.setBindGroup(0, this._contextWebGPU.bindGroupGeneral);\r\n        pass.setBindGroup(1, this._contextWebGPU.bindGroupWorld);\r\n        pass.setBindGroup(2, this._bindGroupModel);\r\n        pass.setBindGroup(3, this._bindGroupPer);\r\n        pass.setVertexBuffer(0, this.positionBuffer.buffer);\r\n        pass.setVertexBuffer(1, this.normalBuffer.buffer);\r\n        pass.setVertexBuffer(2, this.texCoordBuffer.buffer);\r\n        pass.setIndexBuffer(this.indicesBuffer.buffer, 0);\r\n        pass.drawIndexed(this.indicesBuffer.totalComponents, this._instance, 0, 0, 0);\r\n        this._instance = 0;\r\n    }\r\n\r\n    public updatePerInstanceUniforms(worldUniforms: WorldUniforms): void {\r\n        this.worldUniformPer.worldUniforms[this._instance] = worldUniforms;\r\n        this.seaweedPer.time[this._instance]               = this._aquarium.g.mclock + this._instance;\r\n\r\n        this._instance++;\r\n    }\r\n\r\n    public updateSeaweedModelTime(time: float): void { }\r\n\r\n}","\r\n/**\r\n * A Module with various io functions.\r\n */\r\nexport class IO {\r\n\r\n    /**\r\n     * Loads text from an external file. This function is synchronous.\r\n     * @param {string} url The url of the external file.\r\n     * @return {string} the loaded text if the request is synchronous.\r\n     */\r\n    public static LoadTextFileSynchronous(url: string): string {\r\n        const error: string = 'LoadTextFileSynchronous failed to load url \"' + url + '\"';\r\n        let xhr: XMLHttpRequest = null;\r\n        if (window.XMLHttpRequest) {\r\n            xhr = new XMLHttpRequest();\r\n            if (xhr.overrideMimeType) {\r\n                xhr.overrideMimeType('text/plain');\r\n            }\r\n        } else {\r\n            throw 'XMLHttpRequest is disabled';\r\n        }\r\n        xhr.open('GET', url, false);\r\n        xhr.send(null);\r\n        if (xhr.readyState != 4) {\r\n            throw error;\r\n        }\r\n        return xhr.responseText;\r\n    }\r\n\r\n    /**\r\n     * Loads text from an external file. This function is asynchronous.\r\n     * @param {string} url The url of the external file.\r\n     * @param {function(string, *): void} callback A callback passed the loaded\r\n     *     string and an exception which will be null on success.\r\n     */\r\n    public static LoadTextFile(url: string, callback: (result: string, errorMsg: string) => void): void {\r\n        const error: string = 'LoadTextFile failed to load url \"' + url + '\"';\r\n        let xhr: XMLHttpRequest = null;\r\n        if (window.XMLHttpRequest) {\r\n            xhr = new XMLHttpRequest();\r\n            if (xhr.overrideMimeType) {\r\n                xhr.overrideMimeType('text/plain; charset=utf-8');\r\n            } \r\n        } else {\r\n            throw 'XMLHttpRequest is disabled';\r\n        }\r\n        xhr.open('GET', url, true);\r\n        xhr.onreadystatechange = function() {\r\n            if (xhr.readyState == 4) {\r\n                let text = '';\r\n                // HTTP reports success with a 200 status. The file protocol reports\r\n                // success with zero. HTTP does not use zero as a status code (they\r\n                // start at 100).\r\n                // https://developer.mozilla.org/En/Using_XMLHttpRequest\r\n                let success = xhr.status == 200 || xhr.status == 0;\r\n                if (success) {\r\n                    text = xhr.responseText;\r\n                }\r\n                callback(text, success ? null : 'could not load: ' + url);\r\n            }\r\n        };\r\n        xhr.send(null);\r\n    }\r\n\r\n    /**\r\n     * Loads a file from an external file. This function is asynchronous.\r\n     * @param {string} url The url of the external file.\r\n     * @param {function(string, *): void} callback A callback passed the loaded\r\n     *     ArrayBuffer and an exception which will be null on success.\r\n     */\r\n    public static LoadArrayBuffer(url: string, callback: (result: ArrayBuffer, errorMsg: string) => void): void {\r\n        const error: string = 'LoadArrayBuffer failed to load url \"' + url + '\"';\r\n        let xhr: XMLHttpRequest = null;\r\n        if (window.XMLHttpRequest) {\r\n            xhr = new XMLHttpRequest();\r\n        } else {\r\n            throw 'XMLHttpRequest is disabled';\r\n        }\r\n        xhr.open('GET', url, true);\r\n        xhr.onreadystatechange = function() {\r\n            if (xhr.readyState == 4) {\r\n                let arrayBuffer: ArrayBuffer = undefined;\r\n                let success = xhr.status == 200 || xhr.status == 0;\r\n                if (success) {\r\n                    arrayBuffer = xhr.response;\r\n                }\r\n                callback(arrayBuffer, success ? null : 'could not load: ' + url);\r\n            }\r\n        };\r\n        if (xhr.responseType === undefined) {\r\n            throw 'no support for binary files';\r\n        }\r\n        xhr.responseType = \"arraybuffer\";\r\n        xhr.send(null);\r\n    }\r\n\r\n    /**\r\n     * Loads JSON from an external file. This function is asynchronous.\r\n     * @param {string} url The url of the external file.\r\n     * @param {function(jsonObject, *): void} callback A callback passed the loaded\r\n     *     json and an exception which will be null on success.\r\n     */\r\n    public static LoadJSON(url: string, callback: (result: any, errorMsg: string) => void): void {\r\n        const error: string = 'LoadJSON failed to load url \"' + url + '\"';\r\n        let xhr: XMLHttpRequest = null;\r\n        if (window.XMLHttpRequest) {\r\n            xhr = new XMLHttpRequest();\r\n            if (xhr.overrideMimeType) {\r\n                xhr.overrideMimeType('text/plain; charset=utf-8');\r\n            } \r\n        } else {\r\n            throw 'XMLHttpRequest is disabled';\r\n        }\r\n        xhr.open('GET', url, true);\r\n        xhr.onreadystatechange = function() {\r\n            if (xhr.readyState == 4) {\r\n                let json: JSON = undefined;\r\n                let success = xhr.status == 200 || xhr.status == 0;\r\n                if (success) {\r\n                    try {\r\n                        json = JSON.parse(xhr.responseText);\r\n                    } catch (e) {\r\n                        success = false;\r\n                    }\r\n                }\r\n                callback(json, success ? null : 'could not load: ' + url);\r\n            }\r\n        };\r\n        xhr.send(null);\r\n    }\r\n\r\n}\r\n","/// <reference path=\"../node_modules/@webgpu/types/dist/index.d.ts\" />\r\n\r\nimport { Nullable } from \"./types\";\r\nimport { ContextWebGPU, SingleShaderStage } from \"./context\";\r\nimport { IO } from \"./io\";\r\n\r\n/**\r\n * Define base class for Programs of specific backends.\r\n */\r\nexport class Program {\r\n\r\n    protected _vertexShaderCodePath: string;\r\n    protected _fragmentShaderCodePath: string;\r\n\r\n    protected _vertexShaderCode: string;\r\n    protected _fragmentShaderCode: string;\r\n\r\n    constructor(vertexShaderCodePath?: string, fragmentShaderCodePath?: string) {\r\n        if (vertexShaderCodePath) {\r\n            this._vertexShaderCodePath = vertexShaderCodePath;\r\n        }\r\n\r\n        if (fragmentShaderCodePath) {\r\n            this._fragmentShaderCodePath = fragmentShaderCodePath;\r\n        }\r\n    }\r\n\r\n    public get vertexShaderCode(): string {\r\n        return this._vertexShaderCode;\r\n    }\r\n\r\n    public set vertexShaderCode(value: string) {\r\n        this._vertexShaderCode = value;\r\n    }\r\n\r\n    public get fragmentShaderCode(): string {\r\n        return this._fragmentShaderCode;\r\n    }\r\n\r\n    public set fragmentShaderCode(value: string) {\r\n        this._fragmentShaderCode = value;\r\n    }\r\n\r\n    public dispose(): void { }\r\n    public setProgram(): void {}\r\n    public async compileProgram(enableAlphaBlending?: boolean, alpha?: string): Promise<void> { }\r\n\r\n    protected async loadProgram(): Promise<boolean> {\r\n        const promises = new Array<Promise<any>>();\r\n\r\n        // Shader loading helper function\r\n        const loadshader = (shaderPath: string, stage: SingleShaderStage) => {\r\n            promises.push(new Promise((resolve, reject) => {\r\n                IO.LoadTextFile(shaderPath, (result: string, exception: string) => {\r\n                    if (exception) {\r\n                        console.error(\"Unable to load shader: \" + exception);\r\n                        reject(exception);\r\n                    }\r\n                    switch(stage) {\r\n                        case SingleShaderStage.Vertex:\r\n                            this._vertexShaderCode = result;\r\n                            resolve();\r\n                            break;\r\n                        case SingleShaderStage.Fragment:\r\n                            this._fragmentShaderCode = result;\r\n                            resolve();\r\n                            break;\r\n                        default:\r\n                            reject(\"Unsupported stage: \" + stage);\r\n                    }\r\n                });\r\n            }));\r\n        };\r\n\r\n        // Vertex and Fragment shader loading promise\r\n        loadshader(this._vertexShaderCodePath, SingleShaderStage.Vertex);\r\n        loadshader(this._fragmentShaderCodePath, SingleShaderStage.Fragment);\r\n\r\n        return Promise.all(promises)\r\n                .then(() => {return true;})\r\n                .catch(() => {\r\n                    console.error(\"Unable to load program.\");\r\n                    return false;\r\n                });\r\n    }\r\n}\r\n\r\n/**\r\n * Defines the Program wrapper of WebGPU.\r\n */\r\nexport class ProgramWebGPU extends Program {\r\n\r\n    public _vertexShaderModule: GPUShaderModule;\r\n    public _fragmentShaderModule: GPUShaderModule;\r\n\r\n    private _context: Nullable<ContextWebGPU> = null;\r\n\r\n    constructor(context: Nullable<ContextWebGPU>, vertexShaderCodePath?: string, fragmentShaderCodePath?: string) {\r\n        super(vertexShaderCodePath, fragmentShaderCodePath);\r\n        this._context = context;\r\n    }\r\n\r\n    public dispose(): void {\r\n        this._vertexShaderModule = null;\r\n        this._fragmentShaderModule = null;\r\n\r\n        super.dispose();\r\n    }\r\n\r\n    public async compileProgram(enableBlending?: boolean, alpha?: string): Promise<void> {\r\n        return new Promise<void>((resolve, reject) => {\r\n            this.loadProgram().then((success: boolean) => {\r\n                if (success) {\r\n                    this._fragmentShaderCode = this._fragmentShaderCode.replace(/^.*?\\/\\/ #noReflection$/gm, \"\");\r\n                    this._fragmentShaderCode = this._fragmentShaderCode.replace(/^.*?\\/\\/ #noNormalMap$/gm, \"\");\r\n    \r\n                    if (enableBlending) {\r\n                        this._fragmentShaderCode = this._fragmentShaderCode.replace(/diffuseColor.a/gm, alpha);\r\n                    }\r\n    \r\n                    this._vertexShaderModule = this._context.createShaderModule(SingleShaderStage.Vertex, this._vertexShaderCode);\r\n                    this._fragmentShaderModule = this._context.createShaderModule(SingleShaderStage.Fragment, this._fragmentShaderCode);\r\n                    resolve();\r\n                }\r\n                else {\r\n                    console.error(\"Unable to compile shader code.\");\r\n                    reject();\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    public get vertexShaderModule(): Nullable<GPUShaderModule> {\r\n        return this._vertexShaderModule;\r\n    }\r\n\r\n    public get fragmentShaderModule(): Nullable<GPUShaderModule> {\r\n        return this._fragmentShaderModule;\r\n    }\r\n\r\n}","import { size_t } from \"./types\";\r\n\r\nconst slash: string          = \"/\";\r\nconst shaderFolder: string   = \"../shaders\";\r\nconst resourceFolder: string = \"../assets\";\r\nconst skyBoxUrls: string[]   = [\r\n    \"GlobeOuter_EM_positive_x.jpg\", \"GlobeOuter_EM_negative_x.jpg\",\r\n    \"GlobeOuter_EM_positive_y.jpg\", \"GlobeOuter_EM_negative_y.jpg\",\r\n    \"GlobeOuter_EM_positive_z.jpg\", \"GlobeOuter_EM_negative_z.jpg\"\r\n];\r\n\r\nexport class ResourceHelper {\r\n\r\n    private _path: string;\r\n    private _imagePath: string;\r\n    private _programPath: string;\r\n    private _propPlacementPath: string;\r\n    private _fishBehaviorPath: string;\r\n\r\n    constructor(path) {\r\n        this._path = path;\r\n        this._imagePath = this._path + resourceFolder + slash;\r\n        this._programPath = this._path + shaderFolder + slash ;\r\n        this._propPlacementPath = this._path + resourceFolder + slash + \"PropPlacement.js\";\r\n        this._fishBehaviorPath = this._path + \"FishBehavior.json\";\r\n    }\r\n\r\n    public get imagePath(): string {\r\n        return this._imagePath;\r\n    }\r\n\r\n    public get programPath(): string {\r\n        return this._programPath;\r\n    }\r\n\r\n    public get propPlacementPath(): string {\r\n        return this._propPlacementPath;\r\n    }\r\n\r\n    public get fishBehaviorPath(): string {\r\n        return this._fishBehaviorPath;\r\n    }\r\n\r\n    public getSkyBoxUrls(): string[] {\r\n        let skyUrls: string[] = [];\r\n        for (let i: size_t = 0; i < skyBoxUrls.length; ++i) {\r\n            const url = this._path + resourceFolder + slash + skyBoxUrls[i];\r\n            skyUrls.push(url);\r\n        }\r\n        return skyUrls\r\n    }\r\n\r\n    public getModelPath(modelName: string): string {\r\n        return this._imagePath + modelName + \".js\";\r\n    }\r\n\r\n}","/// <reference path=\"../node_modules/@webgpu/types/dist/index.d.ts\" />\r\n\r\nimport { Nullable, int, uint32_t, size_t, BuildArray } from \"./types\";\r\nimport { ContextWebGPU } from \"./context\";\r\nimport { ProgramWebGPU } from \"./program\";\r\n\r\n/**\r\n * Defines an abstract Texture for Aquarium.\r\n */\r\nexport class Texture {\r\n\r\n    protected _urls: string[];\r\n    protected _width: int = 0;\r\n    protected _height: int = 0;\r\n    protected _flip: boolean;\r\n    protected _name: string;\r\n\r\n    constructor(name: string, urls: string | string[], flip: boolean) {\r\n        this._name = name;\r\n        this._urls = Array.isArray(urls) ? urls : [urls];\r\n        this._flip = flip;\r\n    }\r\n\r\n    public dispose(): void { }\r\n\r\n    public get name(): string {\r\n        return this._name;\r\n    }\r\n\r\n    public static imageFlipY(image: HTMLImageElement): void {\r\n        const imageCanvas = document.createElement('canvas');\r\n        imageCanvas.width = image.width;\r\n        imageCanvas.height = image.height;\r\n\r\n        const imageCanvasContext = imageCanvas.getContext('2d');\r\n        imageCanvasContext.translate(0, image.height);\r\n        imageCanvasContext.scale(1, -1);\r\n        imageCanvasContext.drawImage(image, 0, 0, image.width, image.height);\r\n        image.src = imageCanvas.toDataURL();\r\n    }\r\n\r\n    public static async loadImage(urls: Array<string>, flipY: boolean): Promise<Array<HTMLImageElement>> {\r\n        return new Promise(async (resolve, reject) => {\r\n            let images: Array<HTMLImageElement> = [];\r\n            for (let i: size_t = 0; i < urls.length; ++i) {\r\n                const img: HTMLImageElement = new Image();\r\n                try {\r\n                    img.src = urls[i];\r\n                    await img.decode();\r\n                    if (flipY) {\r\n                        Texture.imageFlipY(img);\r\n                    }\r\n                } catch (e) {\r\n                    console.error(\"Unable to load image from url: \" + urls[i]);\r\n                    reject(images);\r\n                }\r\n                images.push(img);\r\n            }\r\n            resolve(images);\r\n        });\r\n    }\r\n\r\n    protected resizeImage(img: HTMLImageElement, width: uint32_t, height: uint32_t): ImageData {\r\n        const imageCanvas: HTMLCanvasElement = document.createElement('canvas');\r\n        imageCanvas.width = img.width;\r\n        imageCanvas.height = img.height;\r\n\r\n        const imageCanvasContext: CanvasRenderingContext2D = imageCanvas.getContext('2d');\r\n        imageCanvasContext.drawImage(img, 0, 0, width, height);\r\n        const imageData: ImageData = imageCanvasContext.getImageData(0, 0, width, height);\r\n        return imageData;\r\n    }\r\n\r\n    protected isPowerOf2(value: int): boolean {\r\n        return (value & (value - 1)) == 0;\r\n    }\r\n\r\n    /**\r\n     * Free image data after upload to gpu. \r\n     */\r\n    protected destroyImageData(pixelVec: Float32Array[] | Uint16Array[] | Array<Uint8ClampedArray>): void {\r\n        pixelVec.length = 0;\r\n    }\r\n\r\n    public loadTexture(): void {}\r\n\r\n    public getImagePixels(image: HTMLImageElement): Uint8ClampedArray {\r\n        const imageCanvas = document.createElement('canvas');\r\n        imageCanvas.width = image.width;\r\n        imageCanvas.height = image.height;\r\n\r\n        const imageCanvasContext = imageCanvas.getContext('2d');\r\n        if (this._flip) {\r\n            imageCanvasContext.translate(0, image.height);\r\n            imageCanvasContext.scale(1, -1);\r\n        }\r\n        imageCanvasContext.drawImage(image, 0, 0, image.width, image.height);\r\n        const imageData: ImageData = imageCanvasContext.getImageData(0, 0, image.width, image.height);\r\n\r\n        let data: Uint8ClampedArray = null;\r\n\r\n        const bytesPerRow = Math.ceil(image.width * 4 / 256) * 256;\r\n        if (bytesPerRow == image.width * 4) {\r\n            data = imageData.data;\r\n        } else {\r\n            data = new Uint8ClampedArray(bytesPerRow * image.height);\r\n            let imagePixelIndex = 0;\r\n            for (let y = 0; y < image.height; ++y) {\r\n                for (let x = 0; x < image.width; ++x) {\r\n                    let i = x * 4 + y * bytesPerRow;\r\n                    data[i] = imageData.data[imagePixelIndex];\r\n                    data[i + 1] = imageData.data[imagePixelIndex + 1];\r\n                    data[i + 2] = imageData.data[imagePixelIndex + 2];\r\n                    data[i + 3] = imageData.data[imagePixelIndex + 3];\r\n                    imagePixelIndex += 4;\r\n                }\r\n            }\r\n        }\r\n\r\n        return data;\r\n    }\r\n\r\n}\r\n\r\nexport class TextureWebGPU extends Texture {\r\n\r\n    private _textureDimension: GPUTextureDimension; // texture 2D or CubeMap\r\n    private _textureViewDimension: GPUTextureViewDimension;\r\n    private _texture: GPUTexture;\r\n    private _sampler: GPUSampler;\r\n    private _format: GPUTextureFormat;\r\n    private _textureView: GPUTextureView;\r\n    private _images: Array<HTMLImageElement>;\r\n    private _pixelVec: Array<Uint8ClampedArray>;\r\n    private _resizedVec: Array<Uint8ClampedArray>;\r\n    private _context: Nullable<ContextWebGPU> = null;\r\n    private _gpuTextureHelper: WebGPUTextureHelper = null\r\n\r\n    constructor(context: Nullable<ContextWebGPU>, name: string, urls: string | string[]) {\r\n        super(name, Array.isArray(urls) ? urls : [urls], Array.isArray(urls) ? false : true)\r\n        this._textureDimension = \"2d\";\r\n        this._textureViewDimension = Array.isArray(urls) ? \"cube\" : \"2d\";\r\n        this._format = \"rgba8unorm\"\r\n        this._context = context\r\n        this._gpuTextureHelper = new WebGPUTextureHelper(context)\r\n    }\r\n\r\n    public dispose(): void {\r\n        this.destroyImageData(this._pixelVec);\r\n        this.destroyImageData(this._resizedVec);\r\n        this._textureView = null;\r\n        this._texture     = null;\r\n        this._sampler     = null;\r\n    }\r\n    \r\n    public get textureDimension(): GPUTextureDimension {\r\n        return this._textureDimension;\r\n    }\r\n\r\n    public get textureViewDimension(): GPUTextureViewDimension {\r\n        return this._textureViewDimension;\r\n    }\r\n\r\n    public get textureId(): GPUTexture {\r\n        return this._texture;\r\n    }\r\n\r\n    public get sampler(): GPUSampler {\r\n        return this._sampler;\r\n    }\r\n\r\n    public get textureView(): GPUTextureView {\r\n        return this._textureView;\r\n    }\r\n\r\n    private _onImageLoaded(): void {\r\n        if (this._images.length > 0) {\r\n            this._width = this._images[0].width;\r\n            this._height = this._images[0].height;\r\n            this._pixelVec = BuildArray(this._images.length, () => null);\r\n        }\r\n    }\r\n\r\n    public async loadTexture(): Promise<void> {\r\n        return Promise.resolve().then(async () => {\r\n            const kPadding: int = 256;\r\n            this._images = await Texture.loadImage(this._urls, this._flip);\r\n            this._onImageLoaded();\r\n            \r\n            if (this._textureViewDimension === \"cube\") {\r\n                const descriptor: GPUTextureDescriptor = {\r\n                    dimension: this._textureDimension,\r\n                    size: <GPUExtent3DDict> {\r\n                        width: this._width,\r\n                        height: this._height,\r\n                        depth: 6 // arrayLayerCount is deprecated\r\n                    },\r\n                    sampleCount: 1,\r\n                    format: this._format,\r\n                    mipLevelCount: 1,\r\n                    usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.SAMPLED\r\n                };\r\n                this._texture = this._context.createTexture(descriptor);\r\n                \r\n                for (let i: uint32_t = 0; i < 6; ++i) {\r\n                    let [resultBuffer, resultData] = this._context.createBufferMapped(\r\n                        GPUBufferUsage.COPY_SRC | GPUBufferUsage.MAP_WRITE,\r\n                        this._width * this._height * 4\r\n                    );\r\n                    this._pixelVec[i] = this.getImagePixels(this._images[i]);\r\n                    new Uint8Array(resultData).set(this._pixelVec[i]);\r\n                    resultBuffer.unmap();\r\n\r\n                    const bufferCopyView: GPUBufferCopyView = this._context.createBufferCopyView(resultBuffer, 0, this._width * 4, this._height);\r\n                    const textureCopyView: GPUTextureCopyView = this._context.createTextureCopyView(\r\n                        this._texture, 0,\r\n                        <GPUOrigin3DDict> {\r\n                            x: 0,\r\n                            y: 0,\r\n                            z: i\r\n                        }\r\n                    );\r\n                    const copySize: GPUExtent3DDict = {\r\n                        width: this._width,\r\n                        height: this._height,\r\n                        depth: 1\r\n                    };\r\n                    this._context.commandBuffers.push(\r\n                        this._context.copyBufferToTexture(bufferCopyView, textureCopyView, copySize)\r\n                    );\r\n                }\r\n\r\n                const viewDescriptor: GPUTextureViewDescriptor = {\r\n                    dimension: \"cube\",\r\n                    format: this._format,\r\n                    baseMipLevel: 0,\r\n                    mipLevelCount: 1,\r\n                    baseArrayLayer: 0,\r\n                    arrayLayerCount: 6\r\n                }\r\n        \r\n                this._textureView = this._texture.createView(viewDescriptor);\r\n        \r\n                let samplerDesc: GPUSamplerDescriptor = {\r\n                    addressModeU: \"clamp-to-edge\",\r\n                    addressModeV: \"clamp-to-edge\",\r\n                    addressModeW: \"clamp-to-edge\",\r\n                    minFilter: \"linear\",\r\n                    magFilter: \"linear\",\r\n                    mipmapFilter: \"nearest\"\r\n                };\r\n        \r\n                this._sampler = this._context.createSampler(samplerDesc);\r\n            }\r\n            else { // \"2d\"\r\n                this._texture = await this._gpuTextureHelper.generateMipmappedTexture(this._images[0]);\r\n                this._width = this._gpuTextureHelper.imageBitmapSize.width;\r\n                this._height = this._gpuTextureHelper.imageBitmapSize.height;\r\n                \r\n                const viewDescriptor: GPUTextureViewDescriptor = {\r\n                    dimension: \"2d\",\r\n                    format: this._format,\r\n                    baseMipLevel: 0,\r\n                    mipLevelCount: Math.trunc(Math.floor(Math.log2(Math.min(this._width, this._height)))) + 1,\r\n                    baseArrayLayer: 0,\r\n                    arrayLayerCount: 1\r\n                }\r\n        \r\n                this._textureView = this._texture.createView(viewDescriptor);\r\n        \r\n                let samplerDesc: GPUSamplerDescriptor = {\r\n                    addressModeU: \"clamp-to-edge\",\r\n                    addressModeV: \"clamp-to-edge\",\r\n                    addressModeW: \"clamp-to-edge\",\r\n                    minFilter: \"linear\",\r\n                    magFilter: \"linear\",\r\n                    mipmapFilter: (this.isPowerOf2(this._width) && this.isPowerOf2(this._height)) ? \"linear\" : \"nearest\"\r\n                };\r\n        \r\n                this._sampler = this._context.createSampler(samplerDesc);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * Class containing helper functions for creating textures.\r\n * @see https://github.com/toji/webgpu-test\r\n */\r\nexport class WebGPUTextureHelper {\r\n\r\n    private _context: Nullable<ContextWebGPU> = null;\r\n    private _device: GPUDevice = null;\r\n\r\n    public mipmapSampler: GPUSampler;\r\n    public mipmapBindGroupLayout: GPUBindGroupLayout;\r\n    public mipmapPipeline: GPURenderPipeline;\r\n    public imageBitmapSize: GPUExtent3DDict;\r\n\r\n    constructor(context: Nullable<ContextWebGPU>) {\r\n        this._context = context\r\n        this._device = this._context.device;\r\n  \r\n        const mipmapVertexShaderSource = `#version 450\r\n            const vec2 pos[4] = vec2[4](vec2(-1.0f, 1.0f), vec2(1.0f, 1.0f), vec2(-1.0f, -1.0f), vec2(1.0f, -1.0f));\r\n            const vec2 tex[4] = vec2[4](vec2(0.0f, 0.0f), vec2(1.0f, 0.0f), vec2(0.0f, 1.0f), vec2(1.0f, 1.0f));\r\n            layout(location = 0) out vec2 vTex;\r\n            void main() {\r\n            vTex = tex[gl_VertexIndex];\r\n            gl_Position = vec4(pos[gl_VertexIndex], 0.0, 1.0);\r\n            }\r\n        `;\r\n  \r\n        const mipmapFragmentShaderSource = `#version 450\r\n            layout(set = 0, binding = 0) uniform sampler imgSampler;\r\n            layout(set = 0, binding = 1) uniform texture2D img;\r\n            layout(location = 0) in vec2 vTex;\r\n            layout(location = 0) out vec4 outColor;\r\n            void main() {\r\n            outColor = texture(sampler2D(img, imgSampler), vTex);\r\n            }\r\n        `;\r\n  \r\n        this.mipmapSampler = this._context.createSampler(\r\n            <GPUSamplerDescriptor> {\r\n                minFilter: 'linear'\r\n            }\r\n        );\r\n\r\n        this.mipmapBindGroupLayout = this._context.makeBindGroupLayout(\r\n            <GPUBindGroupLayoutDescriptor> {\r\n                entries: <GPUBindGroupLayoutEntry[]> [\r\n                    {\r\n                        binding: 0,\r\n                        visibility: GPUShaderStage.FRAGMENT,\r\n                        type: \"sampler\"\r\n                    },\r\n                    {\r\n                        binding: 1,\r\n                        visibility: GPUShaderStage.FRAGMENT,\r\n                        type: \"sampled-texture\"\r\n                    },\r\n                ]\r\n            }\r\n        );\r\n  \r\n        this.mipmapPipeline = this._device.createRenderPipeline(<GPURenderPipelineDescriptor> {\r\n            layout: this._device.createPipelineLayout(\r\n                <GPUPipelineLayoutDescriptor> {\r\n                    bindGroupLayouts: <GPUBindGroupLayout[]> [\r\n                        this.mipmapBindGroupLayout\r\n                    ]\r\n                }\r\n            ),\r\n            vertexStage: <GPUProgrammableStageDescriptor> {\r\n                module: this._device.createShaderModule(\r\n                    <GPUShaderModuleDescriptor> {\r\n                        code: this._context.glslang.compileGLSL(mipmapVertexShaderSource, 'vertex')\r\n                    }\r\n                ),\r\n                entryPoint: 'main'\r\n            },\r\n            fragmentStage: <GPUProgrammableStageDescriptor> {\r\n                module: this._device.createShaderModule(\r\n                    <GPUShaderModuleDescriptor> {\r\n                        code: this._context.glslang.compileGLSL(mipmapFragmentShaderSource, 'fragment')\r\n                    }\r\n                ),\r\n                entryPoint: 'main'\r\n            },\r\n            primitiveTopology: 'triangle-strip',\r\n            colorStates: <GPUColorStateDescriptor[]> [\r\n                <GPUColorStateDescriptor> {\r\n                    format: 'rgba8unorm',\r\n                }\r\n            ]\r\n        });\r\n    }\r\n  \r\n    async generateMipmappedTexture(image: HTMLImageElement): Promise<GPUTexture> {\r\n        return new Promise(async (resolve, reject) => {\r\n            let imageBitmap: ImageBitmap = await createImageBitmap(image,  0,  0, image.width, image.height);\r\n\r\n            this.imageBitmapSize = <GPUExtent3DDict> {\r\n                width: imageBitmap.width,\r\n                height: imageBitmap.height,\r\n                depth: 1,\r\n            }\r\n\r\n            const textureSize: GPUExtent3DDict = <GPUExtent3DDict> {\r\n                width: imageBitmap.width,\r\n                height: imageBitmap.height,\r\n                depth: 1,\r\n            }\r\n            const mipLevelCount: uint32_t = Math.floor(Math.log2(Math.max(imageBitmap.width, imageBitmap.height))) + 1;\r\n        \r\n            // Populate the top level of the srcTexture with the imageBitmap.\r\n            const srcTexture: GPUTexture = this._device.createTexture(<GPUTextureDescriptor> {\r\n                size: textureSize,\r\n                format: 'rgba8unorm',\r\n                usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.SAMPLED | GPUTextureUsage.OUTPUT_ATTACHMENT,\r\n                mipLevelCount\r\n            });\r\n            this._device.defaultQueue.copyImageBitmapToTexture({ imageBitmap }, { texture: srcTexture }, textureSize);\r\n        \r\n            // BUG: The fact that we have to create a second texture here is due to a bug in Chrome that doesn't allow you to\r\n            // use a single texture as both a sampler and a output attachement at the same time. If we could do that this code\r\n            // would use half as much GPU allocations and no copyTextureToTexture calls.\r\n            const mipmappedTexture: GPUTexture = this._device.createTexture(<GPUTextureDescriptor> {\r\n                size: textureSize,\r\n                format: 'rgba8unorm',\r\n                usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.SAMPLED | GPUTextureUsage.OUTPUT_ATTACHMENT,\r\n                mipLevelCount\r\n            });\r\n        \r\n            const commandEncoder: GPUCommandEncoder = this._device.createCommandEncoder({});\r\n        \r\n            // BUG: Chrome currently says that if any level of a texture is incomplete the entire thing gets wiped to black when\r\n            // you attempt to sample from it. This is despite the fact that below we're using texture views restricted\r\n            // exclusively to the known populated mip levels. As a result in order for this code to work properly we first have\r\n            // to clear EVERY level of the mip chain (except the first, which was populated with copyImageBitmapToTexture)\r\n            // before we can render with it.\r\n            for (let i: uint32_t = 1; i < mipLevelCount; ++i) {\r\n                const passEncoder: GPURenderPassEncoder = commandEncoder.beginRenderPass(<GPURenderPassDescriptor> {\r\n                    colorAttachments: [\r\n                        <GPURenderPassColorAttachmentDescriptor> {\r\n                            attachment: srcTexture.createView(<GPUTextureViewDescriptor> {\r\n                                baseMipLevel: i,\r\n                                mipLevelCount: 1\r\n                            }),\r\n                            loadValue: { r: 1.0, g: 0.0, b: 0.0, a: 0.0 },\r\n                        }\r\n                    ],\r\n                });\r\n                passEncoder.endPass();\r\n            }\r\n        \r\n            for (let i = 0; i < mipLevelCount; ++i) {\r\n                const bindGroup: GPUBindGroup = this._device.createBindGroup(<GPUBindGroupDescriptor> {\r\n                    layout: this.mipmapBindGroupLayout,\r\n                    entries: <GPUBindGroupEntry[]> [\r\n                        {\r\n                            binding: 0,\r\n                            resource: this.mipmapSampler,\r\n                        },\r\n                        {\r\n                            binding: 1,\r\n                            resource: srcTexture.createView(<GPUTextureViewDescriptor> {\r\n                                baseMipLevel: Math.max(0, i-1),\r\n                                mipLevelCount: 1\r\n                            }),\r\n                        }\r\n                    ],\r\n                });\r\n        \r\n                const passEncoder: GPURenderPassEncoder = commandEncoder.beginRenderPass(\r\n                    <GPURenderPassDescriptor> {\r\n                        colorAttachments: <GPURenderPassColorAttachmentDescriptor[]> [\r\n                            {\r\n                                attachment: mipmappedTexture.createView(\r\n                                    <GPUTextureViewDescriptor> {\r\n                                        baseMipLevel: i,\r\n                                        mipLevelCount: 1\r\n                                    }\r\n                                ),\r\n                                loadValue: 'load',\r\n                            }\r\n                        ],\r\n                    }\r\n                );\r\n                passEncoder.setPipeline(this.mipmapPipeline);\r\n                passEncoder.setBindGroup(0, bindGroup);\r\n                passEncoder.draw(4, 1, 0, 0);\r\n                passEncoder.endPass();\r\n        \r\n                commandEncoder.copyTextureToTexture(\r\n                    {\r\n                        texture: mipmappedTexture,\r\n                        mipLevel: i\r\n                    },\r\n                    {\r\n                        texture: srcTexture,\r\n                        mipLevel: i\r\n                    },\r\n                    textureSize\r\n                );\r\n        \r\n                textureSize.width = Math.ceil(textureSize.width / 2);\r\n                textureSize.height = Math.ceil(textureSize.height / 2);\r\n            }\r\n            this._device.defaultQueue.submit([commandEncoder.finish()]);\r\n        \r\n            srcTexture.destroy();\r\n        \r\n            resolve(mipmappedTexture);\r\n        });\r\n    }\r\n    \r\n  }","/// <reference path=\"../node_modules/@webgpu/types/dist/index.d.ts\" />\r\n\r\nimport { ASSERT, BuildArray, Nullable, float, int, uint32_t, size_t } from \"./types\";\r\nimport { Aquarium, TOGGLE, MODELGROUP, MODELNAME } from \"./aquarium\";\r\nimport { Buffer, BufferWebGPU } from \"./buffer\";\r\nimport { BufferManagerWebGPU, RingBufferWebGPU } from \"./bufferManager\";\r\nimport { FPSTimer } from \"./fpsTimer\";\r\nimport glslangModule from './glslang';\r\nimport { Model, FishModelWebGPU, FishModelInstancedDrawWebGPU, GenericModelWebGPU,\r\n         InnerModelWebGPU, OutsideModelWebGPU, SeaweedModelWebGPU } from \"./model\";\r\nimport { Program, ProgramWebGPU } from \"./program\";\r\nimport { ResourceHelper } from \"./resourceHelper\";\r\nimport { Texture, TextureWebGPU } from \"./texture\";\r\nimport { FishPerWithPadding, FogUniforms, LightUniforms, LightWorldPositionUniform } from \"./uniforms\";\r\nimport { ComboRenderPassDescriptor, ComboRenderPipelineDescriptor, ComboVertexStateDescriptor } from \"./utils\";\r\n\r\nexport enum SingleShaderStage { Vertex, Fragment, Compute };\r\n\r\n/**\r\n * Defines the accessing to graphics API of a graphics backend.\r\n */\r\nexport class Context {\r\n\r\n    protected _clientWidth: int;\r\n    protected _clientHeight: int;\r\n    protected _preTotalInstance: int;\r\n    protected _curTotalInstance: int;\r\n\r\n    protected _resourceHelper: Nullable<ResourceHelper> = null;\r\n\r\n    protected _availableToggleBitset: Array<boolean>;\r\n    protected _disableControlPanel: boolean;\r\n\r\n    private _showOptionWindow: boolean;\r\n\r\n    constructor() {\r\n        this._availableToggleBitset = BuildArray(TOGGLE.TOGGLEMAX, () => false) \r\n    }\r\n\r\n    public get clientWidth(): int {\r\n        return this._clientWidth;\r\n    }\r\n\r\n    public get clientHeight(): int {\r\n        return this._clientHeight;\r\n    }\r\n\r\n    public get availableToggleBitset(): Array<boolean> {\r\n        return this._availableToggleBitset;\r\n    }\r\n\r\n    public get resourceHelper(): Nullable<ResourceHelper> {\r\n        return this._resourceHelper;\r\n    }\r\n\r\n    public initialize(toggleBitset: Array<boolean>, canvas: HTMLCanvasElement): Promise<boolean> {\r\n        return Promise.resolve().then(() => {\r\n            return false;\r\n        });\r\n    }\r\n\r\n    public createTextureWebGPU(name: string, urls: string | string[]): Promise<Nullable<Texture>> {\r\n        return Promise.resolve().then(() => {\r\n            return null;\r\n        });\r\n    }\r\n\r\n    public shouldQuit(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public keyBoardQuit(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public createBufferWebGPU(numComponents: int, buffer: Float32Array | Uint16Array, isIndex: boolean): Nullable<Buffer> {\r\n        return null;\r\n    }\r\n\r\n    public createProgram(vsId: string, fsId: string): Nullable<Program> {\r\n        return null;\r\n    }\r\n\r\n    public doFlush(toggleBitset: Array<boolean>): void {}\r\n    public terminate(): void {}\r\n    public flush(): void {}\r\n    public preFrame(): void {}\r\n    public updateFPS(fpsTimer: FPSTimer, fishCount: int, toggleBitset: Array<boolean>): void {}\r\n    public showFPS(): void {}\r\n    public reallocResource(preTotalInstance: int, curTotalInstance: int, enableDynamicBufferOffset: boolean): void {}\r\n    public updateAllFishData(): void {}\r\n    public beginRenderPass(): void {}\r\n\r\n    public createModel(aquarium: Nullable<Aquarium>, type: MODELGROUP, name: MODELNAME, blend: boolean): Nullable<Model> {\r\n        return null;\r\n    };\r\n\r\n    public initGeneralResources(aquarium: Nullable<Aquarium>): void {}\r\n    public updateWorldlUniforms(aquarium: Nullable<Aquarium>): void {}\r\n\r\n    protected setWindowSize(windowWidth: int, windowHeight: int): void {\r\n        if (windowWidth !== 0) {\r\n            this._clientWidth = windowWidth;\r\n        }\r\n        if (windowHeight !== 0) {\r\n            this._clientHeight = windowHeight;\r\n        }\r\n    }\r\n\r\n    protected _initAvailableToggleBitset(): void { }\r\n\r\n}\r\n\r\nexport class ContextWebGPU extends Context {\r\n  \r\n    public commandBuffers: Array<GPUCommandBuffer>;\r\n    public queue: GPUQueue;\r\n\r\n    public groupLayoutGeneral: GPUBindGroupLayout;\r\n    public bindGroupGeneral: GPUBindGroup;\r\n    public groupLayoutWorld: GPUBindGroupLayout;\r\n    public bindGroupWorld: GPUBindGroup;\r\n\r\n    public groupLayoutFishPer: GPUBindGroupLayout;\r\n    public fishPersBuffer: GPUBuffer;\r\n    public bindGroupFishPers: Array<GPUBindGroup>;\r\n\r\n    public fishPers: Array<FishPerWithPadding>;\r\n\r\n    public adapter: GPUAdapter; // The backend adapter\r\n    public device: GPUDevice;\r\n    \r\n    private static readonly kSwapchainBackBufferUsage: GPUTextureUsageFlags =\r\n        GPUTextureUsage.OUTPUT_ATTACHMENT | GPUTextureUsage.COPY_SRC;\r\n\r\n    private _glslang: any;\r\n    private _isSwapchainOutOfDate = false;\r\n    private _canvas: HTMLCanvasElement;\r\n    private _gpuCanvasContext: GPUCanvasContext;\r\n\r\n    private _swapChain: GPUSwapChain;\r\n    private _commandEncoder: GPUCommandEncoder;\r\n    private _renderPass: GPURenderPassEncoder;\r\n    private _renderPassDescriptor: Nullable<ComboRenderPassDescriptor> = null;\r\n\r\n    private _backbufferView: GPUTextureView;\r\n    private _sceneRenderTargetView: GPUTextureView;\r\n    private _sceneDepthStencilView: GPUTextureView;\r\n    private _pipeline: GPURenderPipeline;\r\n    private _bindGroup: GPUBindGroup;\r\n    private _preferredSwapChainFormat: GPUTextureFormat = \"rgba8unorm\";\r\n\r\n    private _lightWorldPositionBuffer: GPUBuffer;\r\n    private _lightBuffer: GPUBuffer;\r\n    private _fogBuffer: GPUBuffer;\r\n\r\n    private _enableMSAA: boolean = false;\r\n    private _enableDynamicBufferOffset: boolean = false;\r\n    private _enableFullScreenMode: boolean = false;\r\n\r\n    private _bufferManager: Nullable<BufferManagerWebGPU> = null;\r\n\r\n    constructor() {\r\n        super();\r\n        this.commandBuffers = new Array<GPUCommandBuffer>();\r\n        this.bindGroupFishPers = new Array<GPUBindGroup>();\r\n        this.fishPers = new Array<FishPerWithPadding>();\r\n        this._resourceHelper = new ResourceHelper(document.location.toString());\r\n        this._initAvailableToggleBitset();\r\n    }\r\n\r\n    public get glslang(): any {\r\n        return this._glslang;\r\n    }\r\n\r\n    public dispose(): void {\r\n        this._sceneRenderTargetView    = null;\r\n        this._sceneDepthStencilView    = null;\r\n        this._backbufferView           = null;\r\n        this._pipeline                 = null;\r\n        this._bindGroup                = null;\r\n        this._lightWorldPositionBuffer = null;\r\n        this._lightBuffer              = null;\r\n        this._fogBuffer                = null;\r\n        this._commandEncoder           = null;\r\n        this.commandBuffers.length     = 0\r\n        this._renderPass               = null;\r\n        this._renderPassDescriptor     = null;\r\n        this.groupLayoutGeneral        = null;\r\n        this.bindGroupGeneral          = null;\r\n        this.groupLayoutWorld          = null;\r\n        this.bindGroupWorld            = null;\r\n    \r\n        this.groupLayoutFishPer        = null;\r\n        this._destroyFishResource();\r\n    \r\n        this._swapChain                = null;\r\n        this.queue                     = null;\r\n        this.device                    = null;\r\n    }\r\n\r\n    public async initialize(toggleBitset: Array<boolean>, canvas: HTMLCanvasElement): Promise<boolean> {\r\n        this._canvas = canvas;\r\n        \r\n        this._enableMSAA = toggleBitset[TOGGLE.ENABLEMSAAx4];\r\n        this._disableControlPanel = toggleBitset[TOGGLE.DISABLECONTROLPANEL];\r\n        this._enableFullScreenMode = toggleBitset[TOGGLE.ENABLEFULLSCREENMODE];\r\n\r\n        // Set client width and height\r\n        this._syncClientSize();\r\n        \r\n        return new Promise<boolean>(async (resolve, reject) => {\r\n            try {\r\n                // Physical Device Adapter\r\n                this.adapter = await navigator.gpu.requestAdapter({\r\n                    powerPreference: \"high-performance\"\r\n                });\r\n    \r\n                // Logical Device\r\n                this.device = await this.adapter.requestDevice();\r\n                if (typeof this.device.addEventListener === 'function') {\r\n                    this.device.addEventListener('uncapturederror', (event) => {\r\n                        console.error(event);\r\n                    });\r\n                }\r\n\r\n                // GLSL to SPIR-V converter\r\n                this._glslang = await glslangModule();\r\n    \r\n                // Queue\r\n                this.queue = this.device.defaultQueue;\r\n\r\n                // Canvas context\r\n                this._gpuCanvasContext = canvas.getContext('gpupresent') as any;\r\n\r\n                // Swap chain\r\n                this._preferredSwapChainFormat = await this._gpuCanvasContext.getSwapChainPreferredFormat(this.device);\r\n                this._swapChain = this._gpuCanvasContext.configureSwapChain(\r\n                    <GPUSwapChainDescriptor> {\r\n                        device: this.device,\r\n                        format: this._preferredSwapChainFormat\r\n                    }\r\n                );\r\n\r\n                // When MSAA is enabled, we create an intermediate multisampled texture to render the scene to.\r\n                if (this._enableMSAA) {\r\n                    this._sceneRenderTargetView = this.createMultisampledRenderTargetView();\r\n                }\r\n\r\n                this._sceneDepthStencilView = this.createDepthStencilView();\r\n\r\n                // Recreate swapchain when window is resized\r\n                window.addEventListener('resize', this._framebufferResizeCallback);\r\n            \r\n                // Create the buffer manager\r\n                this._bufferManager = new BufferManagerWebGPU(this, !toggleBitset[TOGGLE.BUFFERMAPPINGASYNC]);\r\n            } catch (e) {\r\n                reject(\"Unable initialize the WebGPU context \" + e)\r\n                return false;\r\n            }\r\n    \r\n            resolve(true);\r\n        });\r\n    }\r\n\r\n    protected _initAvailableToggleBitset(): void {\r\n        this._availableToggleBitset[TOGGLE.ENABLEMSAAx4]              = true;\r\n        this._availableToggleBitset[TOGGLE.ENABLEINSTANCEDDRAWS]      = true;\r\n        this._availableToggleBitset[TOGGLE.ENABLEDYNAMICBUFFEROFFSET] = false; // Not supported ?\r\n        this._availableToggleBitset[TOGGLE.DISCRETEGPU]               = true;\r\n        this._availableToggleBitset[TOGGLE.INTEGRATEDGPU]             = true;\r\n        this._availableToggleBitset[TOGGLE.ENABLEFULLSCREENMODE]      = true;\r\n        this._availableToggleBitset[TOGGLE.BUFFERMAPPINGASYNC]        = false; // Not yet finished\r\n        this._availableToggleBitset[TOGGLE.TURNOFFVSYNC]              = true;\r\n        this._availableToggleBitset[TOGGLE.DISABLED3D12RENDERPASS]    = true;\r\n        this._availableToggleBitset[TOGGLE.DISABLEWEBGPUVALIDATION]   = true;\r\n        this._availableToggleBitset[TOGGLE.SIMULATINGFISHCOMEANDGO]   = true;\r\n    }\r\n\r\n    private _syncClientSize(): void {\r\n        const defaultWidth = this._canvas.offsetWidth * window.devicePixelRatio;\r\n        const defaultHeight = this._canvas.offsetHeight * window.devicePixelRatio;\r\n        // Extend canvas size\r\n        if (this._enableFullScreenMode) {\r\n            this._canvas.width = window.innerWidth || defaultWidth;\r\n            this._canvas.height = window.innerHeight || defaultHeight;\r\n        }\r\n        else {\r\n            this._canvas.width = defaultWidth;\r\n            this._canvas.height = defaultHeight;\r\n        }\r\n        this.setWindowSize(this._canvas.width, this._canvas.height);\r\n    }\r\n\r\n    private _framebufferResizeCallback(): void {\r\n        this._isSwapchainOutOfDate = true;\r\n    }\r\n\r\n    public createTextureWebGPU(name: string, urls: string | string[]): Promise<Nullable<Texture>> {\r\n        return Promise.resolve().then(async () => {\r\n            const texture: Texture = new TextureWebGPU(this, name, urls);\r\n            await texture.loadTexture();\r\n            return texture;\r\n        });\r\n    }\r\n\r\n    public createTexture(descriptor: GPUTextureDescriptor): GPUTexture {\r\n        return this.device.createTexture(descriptor);\r\n    }\r\n\r\n    public createSampler(descriptor: GPUSamplerDescriptor): GPUSampler {\r\n        return this.device.createSampler(descriptor);\r\n    }\r\n\r\n    public createBufferFromData(pixels: Float32Array | Uint16Array, size: size_t, usage: GPUBufferUsageFlags): GPUBuffer {\r\n        const buffer: GPUBuffer = this.createBuffer(size, usage | GPUBufferUsage.COPY_DST);\r\n\r\n        this.setBufferData(buffer, 0, size, pixels);\r\n        return buffer;\r\n    }\r\n\r\n    public createBufferCopyView(buffer: GPUBuffer, offset: uint32_t, bytesPerRow: uint32_t, rowsPerImage: uint32_t): GPUBufferCopyView {\r\n        const bufferCopyView: GPUBufferCopyView = {\r\n            buffer: buffer,\r\n            offset: offset,\r\n            bytesPerRow: bytesPerRow,\r\n            rowsPerImage: rowsPerImage\r\n        };\r\n\r\n        return bufferCopyView;\r\n    }\r\n\r\n    public createTextureCopyView(texture: GPUTexture, level: uint32_t, origin: GPUOrigin3D): GPUTextureCopyView {\r\n        const textureCopyView: GPUTextureCopyView = {\r\n            texture: texture,\r\n            mipLevel: level,\r\n            origin: origin\r\n        };\r\n\r\n        return textureCopyView;\r\n    }\r\n\r\n    public copyBufferToTexture(bufferCopyView: GPUBufferCopyView, textureCopyView: GPUTextureCopyView, ext3D: GPUExtent3D): GPUCommandBuffer {\r\n        const encoder: GPUCommandEncoder = this.device.createCommandEncoder();\r\n        encoder.copyBufferToTexture(bufferCopyView, textureCopyView, ext3D);\r\n        const copy: GPUCommandBuffer = encoder.finish();\r\n\r\n        return copy;\r\n    }\r\n\r\n    public copyBufferToBuffer(srcBuffer: GPUBuffer, srcOffset: size_t, destBuffer: GPUBuffer, destOffset: size_t, size: size_t): GPUCommandBuffer {\r\n        const encoder: GPUCommandEncoder = this.device.createCommandEncoder();\r\n        encoder.copyBufferToBuffer(srcBuffer, srcOffset, destBuffer, destOffset, size);\r\n        const copy: GPUCommandBuffer = encoder.finish();\r\n\r\n        return copy;\r\n    }\r\n\r\n    public createShaderModule(stage: SingleShaderStage, shaderSourceGLSL: string): GPUShaderModule {\r\n        const shaderType: string = (stage == SingleShaderStage.Vertex) ? \"vertex\" :\r\n                                   (stage == SingleShaderStage.Fragment) ? \"fragment\" : \"compute\";\r\n        const shaderModule: GPUShaderModule = this.device.createShaderModule(\r\n            <GPUShaderModuleDescriptor> {\r\n                code: this._glslang.compileGLSL(shaderSourceGLSL, shaderType),\r\n                // @ts-ignore\r\n                source: shaderSourceGLSL,\r\n                transform: source => this._glslang.compileGLSL(source, shaderType),\r\n            }\r\n        );\r\n        return shaderModule;\r\n    }\r\n\r\n    public makeBindGroupLayout(bindGroupLayoutdescriptor: GPUBindGroupLayoutDescriptor): GPUBindGroupLayout {\r\n        return this.device.createBindGroupLayout(bindGroupLayoutdescriptor);\r\n    }\r\n\r\n    public makeBasicPipelineLayout(pipelineLayoutDescriptor: GPUPipelineLayoutDescriptor): GPUPipelineLayout {\r\n        return this.device.createPipelineLayout(pipelineLayoutDescriptor);\r\n    }\r\n\r\n    public createRenderPipeline(pipelineLayout: GPUPipelineLayout, programWebGPU: ProgramWebGPU,\r\n                                vertexStateDescriptor: Nullable<ComboVertexStateDescriptor>,\r\n                                enableBlend: boolean): GPURenderPipeline {\r\n        const vsModule: Nullable<GPUShaderModule> = programWebGPU.vertexShaderModule;\r\n        const fsModule: Nullable<GPUShaderModule> = programWebGPU.fragmentShaderModule\r\n    \r\n        const blendDescriptor: GPUBlendDescriptor = {\r\n            operation: \"add\",\r\n            srcFactor: enableBlend ? \"src-alpha\" : \"one\",\r\n            dstFactor: enableBlend ? \"one-minus-src-alpha\" : \"zero\"\r\n        };\r\n\r\n        const colorStateDescriptor: GPUColorStateDescriptor = {\r\n            format: this._preferredSwapChainFormat,\r\n            colorBlend: blendDescriptor,\r\n            alphaBlend: blendDescriptor,\r\n            writeMask: GPUColorWrite.ALL\r\n        };\r\n\r\n        const rasterizationState: GPURasterizationStateDescriptor = {\r\n            frontFace: \"ccw\",\r\n            cullMode: \"back\",\r\n            depthBias: 0,\r\n            depthBiasSlopeScale: 0.0,\r\n            depthBiasClamp: 0.0\r\n        };\r\n\r\n        // test\r\n        const descriptor: ComboRenderPipelineDescriptor = new ComboRenderPipelineDescriptor(this.device);\r\n        descriptor.layout                               = pipelineLayout;\r\n        descriptor.vertexStage.module                   = vsModule;\r\n        descriptor.fragmentStage.module                 = fsModule;\r\n        descriptor.vertexState                          = vertexStateDescriptor;\r\n        descriptor.depthStencilState                    = descriptor.cDepthStencilState;\r\n        descriptor.cDepthStencilState.format            = \"depth24plus-stencil8\";\r\n        descriptor.colorStates[0]                       = colorStateDescriptor;\r\n        descriptor.colorStates[0].format                = this._preferredSwapChainFormat;\r\n        descriptor.cDepthStencilState.depthWriteEnabled = true;\r\n        descriptor.cDepthStencilState.depthCompare      = \"less\";\r\n        descriptor.primitiveTopology                    = \"triangle-list\"\r\n        descriptor.sampleCount                          = this._enableMSAA ? 4 : 1;\r\n        descriptor.rasterizationState                   = rasterizationState;\r\n        \r\n        const pipeline: GPURenderPipeline = this.device.createRenderPipeline(descriptor);\r\n\r\n        return pipeline;\r\n    }\r\n\r\n    public createMultisampledRenderTargetView(): GPUTextureView {\r\n        const descriptor: GPUTextureDescriptor = {\r\n            dimension: \"2d\",\r\n            size: <GPUExtent3DDict> {\r\n                width: this._clientWidth,\r\n                height: this._clientHeight,\r\n                depth: 1\r\n            },\r\n            sampleCount: 4,\r\n            format: this._preferredSwapChainFormat,\r\n            mipLevelCount: 1,\r\n            usage: GPUTextureUsage.OUTPUT_ATTACHMENT\r\n        };\r\n        const multisampledRenderTargetView = this.device.createTexture(descriptor);\r\n        return multisampledRenderTargetView.createView();\r\n    }\r\n\r\n    public createDepthStencilView(): GPUTextureView {\r\n        const descriptor: GPUTextureDescriptor = {\r\n            dimension: \"2d\",\r\n            size: <GPUExtent3DDict> {\r\n                width: this._clientWidth,\r\n                height: this._clientHeight,\r\n                depth: 1\r\n            },\r\n            sampleCount: this._enableMSAA ? 4 : 1,\r\n            format: \"depth24plus-stencil8\",\r\n            mipLevelCount: 1,\r\n            usage: GPUTextureUsage.OUTPUT_ATTACHMENT | GPUTextureUsage.COPY_DST\r\n        };\r\n        const depthStencilTexture = this.device.createTexture(descriptor);\r\n        return depthStencilTexture.createView();\r\n    }\r\n\r\n    public createBuffer(size: uint32_t, bit: GPUBufferUsageFlags): GPUBuffer {\r\n        const descriptor: GPUBufferDescriptor = {\r\n            size: size,\r\n            usage: bit\r\n        }\r\n\r\n        return this.device.createBuffer(descriptor);\r\n    }\r\n\r\n    public setBufferData(buffer: GPUBuffer, start: uint32_t, size: uint32_t, pixels: Float32Array | Uint16Array): void {\r\n        let [resultBuffer, resultData] = this.createBufferMapped(GPUBufferUsage.MAP_WRITE | GPUBufferUsage.COPY_SRC, size);\r\n    \r\n        const writeArray = pixels instanceof Uint16Array ? new Uint16Array(resultData) : new Float32Array(resultData);\r\n        writeArray.set(pixels);\r\n        resultBuffer.unmap();\r\n        \r\n        const command: GPUCommandBuffer = this.copyBufferToBuffer(resultBuffer, 0, buffer, 0, size);\r\n        this.commandBuffers.push(command);\r\n    }\r\n\r\n    public makeBindGroup(bindGroupDescriptor: GPUBindGroupDescriptor): GPUBindGroup {\r\n        return this.device.createBindGroup(bindGroupDescriptor);\r\n    }\r\n\r\n    public initGeneralResources(aquarium: Nullable<Aquarium>): void {\r\n        // Initialize general uniform buffers\r\n        this.groupLayoutGeneral = this.makeBindGroupLayout(\r\n            <GPUBindGroupLayoutDescriptor> {\r\n                entries: <GPUBindGroupLayoutEntry[]> [\r\n                    {\r\n                        binding: 0,\r\n                        visibility: GPUShaderStage.FRAGMENT,\r\n                        type: \"uniform-buffer\"\r\n                    },\r\n                    {\r\n                        binding: 1,\r\n                        visibility: GPUShaderStage.FRAGMENT,\r\n                        type: \"uniform-buffer\"\r\n                    }\r\n                ]\r\n            }\r\n        );\r\n\r\n        this._lightBuffer = this.createBufferFromData(aquarium.lightUniforms.data, LightUniforms.byteSize,\r\n                                                      GPUBufferUsage.COPY_DST | GPUBufferUsage.UNIFORM);\r\n        this._fogBuffer = this.createBufferFromData(aquarium.fogUniforms.data, FogUniforms.byteSize,\r\n                                                    GPUBufferUsage.COPY_DST | GPUBufferUsage.UNIFORM);\r\n\r\n        this.bindGroupGeneral = this.makeBindGroup(\r\n            <GPUBindGroupDescriptor> {\r\n                layout: this.groupLayoutGeneral,\r\n                entries: <GPUBindGroupEntry[]> [\r\n                    {\r\n                        binding: 0,\r\n                        resource: <GPUBufferBinding> {\r\n                            buffer: this._lightBuffer,\r\n                            offset: 0,\r\n                        }\r\n                    },\r\n                    {\r\n                        binding: 1,\r\n                        resource: <GPUBufferBinding> {\r\n                            buffer: this._fogBuffer,\r\n                            offset: 0,\r\n                        }\r\n                    }\r\n                ]\r\n            }\r\n        );\r\n\r\n        this.setBufferData(this._lightBuffer, 0, LightUniforms.byteSize, aquarium.lightUniforms.data);\r\n        this.setBufferData(this._fogBuffer, 0, FogUniforms.byteSize, aquarium.fogUniforms.data);\r\n\r\n        // Initialize world uniform buffers\r\n        this.groupLayoutWorld = this.makeBindGroupLayout(\r\n            <GPUBindGroupLayoutDescriptor> {\r\n                entries: <GPUBindGroupLayoutEntry[]> [\r\n                    {\r\n                        binding: 0,\r\n                        visibility: GPUShaderStage.VERTEX,\r\n                        type: \"uniform-buffer\"\r\n                    }\r\n                ]\r\n            }\r\n        );\r\n\r\n        this._lightWorldPositionBuffer = this.createBufferFromData(\r\n            aquarium.lightWorldPositionUniform.data,\r\n            this.calcConstantBufferByteSize(LightWorldPositionUniform.byteSize),\r\n            GPUBufferUsage.COPY_DST | GPUBufferUsage.UNIFORM);\r\n\r\n        this.bindGroupWorld = this.makeBindGroup(\r\n            <GPUBindGroupDescriptor> {\r\n                layout: this.groupLayoutWorld,\r\n                entries: <GPUBindGroupEntry[]> [\r\n                    {\r\n                        binding: 0,\r\n                        resource: <GPUBufferBinding> {\r\n                            buffer: this._lightWorldPositionBuffer,\r\n                            offset: 0,\r\n                        }\r\n                    }\r\n                ]\r\n            }\r\n        );\r\n\r\n        const enableDynamicBufferOffset: boolean = aquarium.toggleBitset[TOGGLE.ENABLEDYNAMICBUFFEROFFSET];\r\n        this.groupLayoutFishPer = this.makeBindGroupLayout(\r\n            <GPUBindGroupLayoutDescriptor> {\r\n                entries: <GPUBindGroupLayoutEntry[]> [\r\n                    {\r\n                        binding: 0,\r\n                        visibility: GPUShaderStage.VERTEX,\r\n                        type: \"uniform-buffer\",\r\n                        hasDynamicOffset: enableDynamicBufferOffset ? true : undefined,\r\n                    }\r\n                ]\r\n            }\r\n        );\r\n\r\n        this.reallocResource(aquarium.preFishCount, aquarium.curFishCount, enableDynamicBufferOffset);\r\n    }\r\n\r\n    public updateWorldlUniforms(aquarium: Nullable<Aquarium>) {\r\n        this.updateBufferData(this._lightWorldPositionBuffer, aquarium.lightWorldPositionUniform.data,\r\n                              this.calcConstantBufferByteSize(LightWorldPositionUniform.byteSize));\r\n    }\r\n\r\n    public createBufferWebGPU(numComponents: int, buf: Float32Array | Uint16Array, isIndex: boolean): Nullable<Buffer> {\r\n        const buffer: Buffer = new BufferWebGPU(this, buf.length, numComponents, buf, isIndex);\r\n\r\n        return buffer;\r\n    }\r\n\r\n    public createProgram(vsId: string, fsId: string): Nullable<Program> {\r\n        const program: ProgramWebGPU = new ProgramWebGPU(this, vsId, fsId);\r\n\r\n        return program;\r\n    }\r\n\r\n    /**\r\n     * Submit commands of the frame.\r\n     */\r\n    public doFlush(toggleBitset: Array<boolean>): void {\r\n        this._renderPass.endPass();\r\n\r\n        this._bufferManager.flush();\r\n\r\n        const cmd: GPUCommandBuffer = this._commandEncoder.finish();\r\n        this.commandBuffers.push(cmd);\r\n\r\n        this.flush();\r\n    }\r\n\r\n    public flush(): void {\r\n        this.queue.submit(this.commandBuffers);\r\n        this.commandBuffers.length = 0\r\n    }\r\n\r\n    public preFrame(): void {\r\n\r\n        if (this._isSwapchainOutOfDate) {\r\n            this._syncClientSize();\r\n            if (this._enableMSAA) {\r\n                this._sceneRenderTargetView = this.createMultisampledRenderTargetView();\r\n            }\r\n            this._sceneDepthStencilView = this.createDepthStencilView();\r\n            this._isSwapchainOutOfDate = false;\r\n        }\r\n\r\n        this._commandEncoder = this.device.createCommandEncoder();\r\n        this._backbufferView = this._swapChain.getCurrentTexture().createView();\r\n\r\n        if (this._enableMSAA) {\r\n            // If MSAA is enabled, we render to a multisampled texture and then resolve to the backbuffer\r\n            this._renderPassDescriptor = new ComboRenderPassDescriptor([this._sceneRenderTargetView], this._sceneDepthStencilView);\r\n            this._renderPassDescriptor.cColorAttachments[0].resolveTarget = this._backbufferView;\r\n            this._renderPassDescriptor.cColorAttachments[0].storeOp       = \"clear\";\r\n            this._renderPassDescriptor.cColorAttachments[0].loadValue     = <GPUColorDict> {r: 0.0, g: 0.8, b: 1.0, a: 0.0};\r\n            this._renderPassDescriptor.colorAttachmentCount               = 1;\r\n        }\r\n        else {\r\n            // When MSAA is off, we render directly to the backbuffer\r\n            this._renderPassDescriptor = new ComboRenderPassDescriptor([this._backbufferView], this._sceneDepthStencilView);\r\n            this._renderPassDescriptor.cColorAttachments[0].storeOp   = \"store\";\r\n            this._renderPassDescriptor.cColorAttachments[0].loadValue = <GPUColorDict> {r: 0.0, g: 0.8, b: 1.0, a: 0.0};\r\n            this._renderPassDescriptor.colorAttachmentCount           = 1;\r\n        }\r\n\r\n        this._renderPass = this._commandEncoder.beginRenderPass(this._renderPassDescriptor);\r\n    }\r\n\r\n    public createModel(aquarium: Nullable<Aquarium>, type: MODELGROUP, name: MODELNAME, blend: boolean): Nullable<Model> {\r\n        let model: Nullable<Model> = null;\r\n        switch(type) {\r\n            case MODELGROUP.FISH:\r\n                model = new FishModelWebGPU(this, aquarium, type, name, blend);\r\n                break;\r\n            case MODELGROUP.FISHINSTANCEDDRAW:\r\n                model = new FishModelInstancedDrawWebGPU(this, aquarium, type, name, blend);\r\n                break;\r\n            case MODELGROUP.GENERIC:\r\n                model = new GenericModelWebGPU(this, aquarium, type, name, blend);\r\n                break;\r\n            case MODELGROUP.INNER:\r\n                model = new InnerModelWebGPU(this, aquarium, type, name, blend);\r\n                break;\r\n            case MODELGROUP.SEAWEED:\r\n                model = new SeaweedModelWebGPU(this, aquarium, type, name, blend);\r\n                break;\r\n            case MODELGROUP.OUTSIDE:\r\n                model = new OutsideModelWebGPU(this, aquarium, type, name, blend);\r\n                break;\r\n            default:\r\n                model = null;\r\n                console.error(\"Can not create model type: \" + type);\r\n        }\r\n\r\n        return model;\r\n    }\r\n\r\n    public reallocResource(preTotalInstance: int, curTotalInstance: int, enableDynamicBufferOffset: boolean): void {\r\n        this._preTotalInstance          = preTotalInstance;\r\n        this._curTotalInstance          = curTotalInstance;\r\n        this._enableDynamicBufferOffset = enableDynamicBufferOffset;\r\n\r\n        if (curTotalInstance === 0) {\r\n            return;\r\n        }\r\n\r\n        // If current fish number > pre fish number, allocate a new bigger buffer.\r\n        // If current fish number <= prefish number, do not allocate a new one.\r\n        if (preTotalInstance >= curTotalInstance) {\r\n            return;\r\n        }\r\n\r\n        this._destroyFishResource();\r\n\r\n        this.fishPers = BuildArray(curTotalInstance, () => new FishPerWithPadding());\r\n\r\n        if (enableDynamicBufferOffset) {\r\n            this.bindGroupFishPers = Array.from<GPUBindGroup>([null]);\r\n        }\r\n        else {\r\n            this.bindGroupFishPers = BuildArray(curTotalInstance, () => null);\r\n        }\r\n\r\n        const size: size_t  = this.calcConstantBufferByteSize(FishPerWithPadding.byteSize * curTotalInstance);\r\n        this.fishPersBuffer = this.createBuffer(size, GPUBufferUsage.COPY_DST | GPUBufferUsage.UNIFORM);\r\n\r\n        if (enableDynamicBufferOffset) {\r\n            this.bindGroupFishPers[0] = this.makeBindGroup(\r\n                <GPUBindGroupDescriptor> {\r\n                    layout: this.groupLayoutFishPer,\r\n                    entries: <GPUBindGroupEntry[]> [\r\n                        {\r\n                            binding: 0,\r\n                            resource: <GPUBufferBinding> {\r\n                                buffer: this.fishPersBuffer,\r\n                                offset: 0\r\n                            }\r\n                        }\r\n                    ]\r\n                }\r\n            );\r\n        }\r\n        else {\r\n            for (let i: int = 0; i < curTotalInstance; ++i) {\r\n                this.bindGroupFishPers[i] = this.makeBindGroup(\r\n                    <GPUBindGroupDescriptor> {\r\n                        layout: this.groupLayoutFishPer,\r\n                        entries: <GPUBindGroupEntry[]> [\r\n                            {\r\n                                binding: 0,\r\n                                resource: <GPUBufferBinding> {\r\n                                    buffer: this.fishPersBuffer,\r\n                                    offset: this.calcConstantBufferByteSize(FishPerWithPadding.byteSize * i)\r\n                                }\r\n                            }\r\n                        ]\r\n                    }\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    public createBufferMapped(usage: GPUBufferUsageFlags, size: uint32_t): [GPUBuffer, ArrayBuffer] {\r\n        const descriptor: GPUBufferDescriptor = {\r\n            size: size,\r\n            usage: usage\r\n        }\r\n\r\n        const result: [GPUBuffer, ArrayBuffer] = this.device.createBufferMapped(descriptor);\r\n        ASSERT(result[1].byteLength === size, \"Invalid buffer size.\");\r\n        return result;\r\n    }\r\n\r\n    public get renderPass(): GPURenderPassEncoder {\r\n        return this._renderPass;\r\n    }\r\n\r\n    public waitABit(): void {\r\n\r\n    }\r\n\r\n    public createCommandEncoder(): GPUCommandEncoder {\r\n        return this.device.createCommandEncoder();\r\n    }\r\n\r\n    public updateAllFishData(): void {\r\n        const size: size_t = this.calcConstantBufferByteSize(FishPerWithPadding.byteSize * this._curTotalInstance);\r\n        let fishPersData: Array<float> = [];\r\n        for (let i: size_t = 0; i < this._curTotalInstance; ++i) {\r\n            fishPersData = fishPersData.concat(this.fishPers[i].getAsArray());\r\n        }\r\n        this.updateBufferData(this.fishPersBuffer, new Float32Array(fishPersData), size);\r\n    }\r\n\r\n    public updateBufferData(buffer: GPUBuffer, pixel: Float32Array | Uint16Array, size: size_t): void {\r\n        let offset: size_t = 0;\r\n        const result = this._bufferManager.allocate(size, offset);\r\n        \r\n        const ringBuffer: Nullable<RingBufferWebGPU> = result.buffer;\r\n        offset                                       = result.offset;\r\n\r\n        if (ringBuffer === null) {\r\n            console.error(\"Memory upper limit.\");\r\n            return;\r\n        }\r\n\r\n        ringBuffer.push(this._bufferManager.encoder, buffer, offset, 0, pixel, size);\r\n    }\r\n\r\n    private _destroyFishResource(): void {\r\n        this.fishPersBuffer = null;\r\n\r\n        if (this.fishPers.length > 0) {\r\n            this.fishPers.length = 0;\r\n        }\r\n        if (this._enableDynamicBufferOffset) {\r\n            if (this.bindGroupFishPers !== null) {\r\n                if (this.bindGroupFishPers[0] !== null) {\r\n                    this.bindGroupFishPers[0] = null;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if (this.bindGroupFishPers !== null) {\r\n                for (let i: int = 0; i < this._preTotalInstance; i++) {\r\n                    if (this.bindGroupFishPers[i] !== null) {\r\n                        this.bindGroupFishPers[i] = null;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.bindGroupFishPers.length = 0;\r\n\r\n        this._bufferManager.destroyBufferPool();\r\n    }\r\n\r\n    public calcConstantBufferByteSize(byteSize: size_t): size_t {\r\n        return (byteSize + 255) & ~255;\r\n    }\r\n\r\n}","import { BuildArray, int, double, float, size_t } from \"./types\";\r\n\r\n/**\r\n * Defines the fps timer.\r\n */\r\nexport class FPSTimer {\r\n\r\n    public static readonly NUM_HISTORY_DATA: int      = 100;\r\n    public static readonly NUM_FRAMES_TO_AVERAGE: int = 128;\r\n    public static readonly FPS_VALID_THRESHOLD: int   = 5;\r\n\r\n    private _totalTime: double;\r\n    private _timeTable: double[];\r\n    private _timeTableCursor: int;\r\n\r\n    private _historyFPS: float[];\r\n    private _historyFrameTime: float[];\r\n    private _logFPS: float[];\r\n\r\n    private _averageFPS: double;\r\n\r\n    constructor() {\r\n        this._totalTime = FPSTimer.NUM_FRAMES_TO_AVERAGE * 1.0;\r\n        this._timeTable = BuildArray(FPSTimer.NUM_FRAMES_TO_AVERAGE, () => 1.0);;\r\n        this._timeTableCursor = 0;\r\n        this._historyFPS = BuildArray(FPSTimer.NUM_HISTORY_DATA, () => 1.0);\r\n        this._historyFrameTime = BuildArray(FPSTimer.NUM_HISTORY_DATA, () => 100.0);\r\n        this._logFPS = [];\r\n        this._averageFPS = 0.0;\r\n    }\r\n\r\n    public get averageFPS(): double {\r\n        return this._averageFPS;\r\n    }\r\n\r\n    public get historyFPS(): float[] {\r\n        return this._historyFPS;\r\n    }\r\n\r\n    public get historyFrameTime(): float[] {\r\n        return this._historyFrameTime;\r\n    }\r\n\r\n    public update(elapsedTime: double, renderingTime: double, testTime: int): void {\r\n        this._totalTime += elapsedTime - this._timeTable[this._timeTableCursor];\r\n        this._timeTable[this._timeTableCursor] = elapsedTime;\r\n\r\n        this._timeTableCursor++;\r\n        if (this._timeTableCursor === FPSTimer.NUM_FRAMES_TO_AVERAGE) {\r\n            this._timeTableCursor = 0;\r\n        }\r\n\r\n        this._averageFPS = Math.floor((1.0 / (this._totalTime / (FPSTimer.NUM_FRAMES_TO_AVERAGE * 1.0))) + 0.5);\r\n\r\n        for (let i: int = 0; i < FPSTimer.NUM_HISTORY_DATA; ++i) {\r\n            this._historyFPS[i]       = this._historyFPS[i + 1];\r\n            this._historyFrameTime[i] = this._historyFrameTime[i + 1];\r\n        }\r\n        this._historyFPS[FPSTimer.NUM_HISTORY_DATA - 1]       = this._averageFPS;\r\n        this._historyFrameTime[FPSTimer.NUM_HISTORY_DATA - 1] = 1000.0 / this._averageFPS;\r\n\r\n        if (testTime - renderingTime > 5 && testTime - renderingTime < 25) {\r\n            this._logFPS.push(this._averageFPS);\r\n        }\r\n    }\r\n\r\n    public variance(): int {\r\n        let avg: float = 0.0;\r\n\r\n        for (let i: size_t = 0; i < this._logFPS.length; ++i) {\r\n            avg += this._logFPS[i];\r\n        }\r\n        avg /= this._logFPS.length;\r\n\r\n        let variance: float = 0.0;\r\n        for (let i: size_t = 0; i < this._logFPS.length; i++) {\r\n            variance += Math.pow(this._logFPS[i] - avg, 2);\r\n        }\r\n        variance /= this._logFPS.length;\r\n\r\n        if (variance < FPSTimer.FPS_VALID_THRESHOLD) {\r\n            return Math.ceil(avg);\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n}","import { DeepImmutable, FloatArray, float, int, size_t } from \"./types\";\r\n\r\n/**\r\n * @fileoverview This class contains functions to perform matrix calculations including\r\n * multiply, addition, substraction, transpose, inverse, translation, etc.\r\n */\r\nexport class Matrix {\r\n\r\n    /**\r\n     * A constant for the pseudoRandom function.\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    private static _RANDOM_RANGE: size_t = 4294967296;\r\n\r\n    /**\r\n     * A random seed for the pseudoRandom function.\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    private static _randomSeed: size_t = 0;\r\n\r\n    /**\r\n     * Multiplies two 4-by-4 matrices; assumes that the given matrices are 4-by-4;\r\n     * assumes matrix entries are accessed in [row][column] fashion.\r\n     * @param {!FloatArray} dst The matrix product of a and b destination.\r\n     * @param {!FloatArray} a The matrix on the left.\r\n     * @param {!FloatArray} b The matrix on the right.\r\n     */\r\n    public static mulMatrixMatrix4(dst: FloatArray, a: DeepImmutable<FloatArray>, b: DeepImmutable<FloatArray>): void {\r\n        const a00 = a[0];\r\n        const a01 = a[1];\r\n        const a02 = a[2];\r\n        const a03 = a[3];\r\n        const a10 = a[4 + 0];\r\n        const a11 = a[4 + 1];\r\n        const a12 = a[4 + 2];\r\n        const a13 = a[4 + 3];\r\n        const a20 = a[8 + 0];\r\n        const a21 = a[8 + 1];\r\n        const a22 = a[8 + 2];\r\n        const a23 = a[8 + 3];\r\n        const a30 = a[12 + 0];\r\n        const a31 = a[12 + 1];\r\n        const a32 = a[12 + 2];\r\n        const a33 = a[12 + 3];\r\n        const b00 = b[0];\r\n        const b01 = b[1];\r\n        const b02 = b[2];\r\n        const b03 = b[3];\r\n        const b10 = b[4 + 0];\r\n        const b11 = b[4 + 1];\r\n        const b12 = b[4 + 2];\r\n        const b13 = b[4 + 3];\r\n        const b20 = b[8 + 0];\r\n        const b21 = b[8 + 1];\r\n        const b22 = b[8 + 2];\r\n        const b23 = b[8 + 3];\r\n        const b30 = b[12 + 0];\r\n        const b31 = b[12 + 1];\r\n        const b32 = b[12 + 2];\r\n        const b33 = b[12 + 3];\r\n        dst[0]    = a00 * b00 + a01 * b10 + a02 * b20 + a03 * b30;\r\n        dst[1]    = a00 * b01 + a01 * b11 + a02 * b21 + a03 * b31;\r\n        dst[2]    = a00 * b02 + a01 * b12 + a02 * b22 + a03 * b32;\r\n        dst[3]    = a00 * b03 + a01 * b13 + a02 * b23 + a03 * b33;\r\n        dst[4]    = a10 * b00 + a11 * b10 + a12 * b20 + a13 * b30;\r\n        dst[5]    = a10 * b01 + a11 * b11 + a12 * b21 + a13 * b31;\r\n        dst[6]    = a10 * b02 + a11 * b12 + a12 * b22 + a13 * b32;\r\n        dst[7]    = a10 * b03 + a11 * b13 + a12 * b23 + a13 * b33;\r\n        dst[8]    = a20 * b00 + a21 * b10 + a22 * b20 + a23 * b30;\r\n        dst[9]    = a20 * b01 + a21 * b11 + a22 * b21 + a23 * b31;\r\n        dst[10]   = a20 * b02 + a21 * b12 + a22 * b22 + a23 * b32;\r\n        dst[11]   = a20 * b03 + a21 * b13 + a22 * b23 + a23 * b33;\r\n        dst[12]   = a30 * b00 + a31 * b10 + a32 * b20 + a33 * b30;\r\n        dst[13]   = a30 * b01 + a31 * b11 + a32 * b21 + a33 * b31;\r\n        dst[14]   = a30 * b02 + a31 * b12 + a32 * b22 + a33 * b32;\r\n        dst[15]   = a30 * b03 + a31 * b13 + a32 * b23 + a33 * b33;\r\n    }\r\n\r\n    /**\r\n     * Computes the inverse of a 4-by-4 matrix.\r\n     * @param {!FloatArray} dst The inverse of m destination.\r\n     * @param {!FloatArray} m The matrix.\r\n     */\r\n    public static inverse4(dst: FloatArray, m: DeepImmutable<FloatArray>): void {\r\n        const m00    = m[0 * 4 + 0];\r\n        const m01    = m[0 * 4 + 1];\r\n        const m02    = m[0 * 4 + 2];\r\n        const m03    = m[0 * 4 + 3];\r\n        const m10    = m[1 * 4 + 0];\r\n        const m11    = m[1 * 4 + 1];\r\n        const m12    = m[1 * 4 + 2];\r\n        const m13    = m[1 * 4 + 3];\r\n        const m20    = m[2 * 4 + 0];\r\n        const m21    = m[2 * 4 + 1];\r\n        const m22    = m[2 * 4 + 2];\r\n        const m23    = m[2 * 4 + 3];\r\n        const m30    = m[3 * 4 + 0];\r\n        const m31    = m[3 * 4 + 1];\r\n        const m32    = m[3 * 4 + 2];\r\n        const m33    = m[3 * 4 + 3];\r\n        const tmp_0  = m22 * m33;\r\n        const tmp_1  = m32 * m23;\r\n        const tmp_2  = m12 * m33;\r\n        const tmp_3  = m32 * m13;\r\n        const tmp_4  = m12 * m23;\r\n        const tmp_5  = m22 * m13;\r\n        const tmp_6  = m02 * m33;\r\n        const tmp_7  = m32 * m03;\r\n        const tmp_8  = m02 * m23;\r\n        const tmp_9  = m22 * m03;\r\n        const tmp_10 = m02 * m13;\r\n        const tmp_11 = m12 * m03;\r\n        const tmp_12 = m20 * m31;\r\n        const tmp_13 = m30 * m21;\r\n        const tmp_14 = m10 * m31;\r\n        const tmp_15 = m30 * m11;\r\n        const tmp_16 = m10 * m21;\r\n        const tmp_17 = m20 * m11;\r\n        const tmp_18 = m00 * m31;\r\n        const tmp_19 = m30 * m01;\r\n        const tmp_20 = m00 * m21;\r\n        const tmp_21 = m20 * m01;\r\n        const tmp_22 = m00 * m11;\r\n        const tmp_23 = m10 * m01;\r\n\r\n        const t0 = (tmp_0 * m11 + tmp_3 * m21 + tmp_4 * m31) - (tmp_1 * m11 + tmp_2 * m21 + tmp_5 * m31);\r\n        const t1 = (tmp_1 * m01 + tmp_6 * m21 + tmp_9 * m31) - (tmp_0 * m01 + tmp_7 * m21 + tmp_8 * m31);\r\n        const t2 = (tmp_2 * m01 + tmp_7 * m11 + tmp_10 * m31) - (tmp_3 * m01 + tmp_6 * m11 + tmp_11 * m31);\r\n        const t3 = (tmp_5 * m01 + tmp_8 * m11 + tmp_11 * m21) - (tmp_4 * m01 + tmp_9 * m11 + tmp_10 * m21);\r\n\r\n        const d = 1.0 / (m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3);\r\n\r\n        dst[0] = d * t0;\r\n        dst[1] = d * t1;\r\n        dst[2] = d * t2;\r\n        dst[3] = d * t3;\r\n        dst[4] =\r\n            d * ((tmp_1 * m10 + tmp_2 * m20 + tmp_5 * m30) - (tmp_0 * m10 + tmp_3 * m20 + tmp_4 * m30));\r\n        dst[5] =\r\n            d * ((tmp_0 * m00 + tmp_7 * m20 + tmp_8 * m30) - (tmp_1 * m00 + tmp_6 * m20 + tmp_9 * m30));\r\n        dst[6]  = d * ((tmp_3 * m00 + tmp_6 * m10 + tmp_11 * m30) -\r\n                    (tmp_2 * m00 + tmp_7 * m10 + tmp_10 * m30));\r\n        dst[7]  = d * ((tmp_4 * m00 + tmp_9 * m10 + tmp_10 * m20) -\r\n                    (tmp_5 * m00 + tmp_8 * m10 + tmp_11 * m20));\r\n        dst[8]  = d * ((tmp_12 * m13 + tmp_15 * m23 + tmp_16 * m33) -\r\n                    (tmp_13 * m13 + tmp_14 * m23 + tmp_17 * m33));\r\n        dst[9]  = d * ((tmp_13 * m03 + tmp_18 * m23 + tmp_21 * m33) -\r\n                    (tmp_12 * m03 + tmp_19 * m23 + tmp_20 * m33));\r\n        dst[10] = d * ((tmp_14 * m03 + tmp_19 * m13 + tmp_22 * m33) -\r\n                    (tmp_15 * m03 + tmp_18 * m13 + tmp_23 * m33));\r\n        dst[11] = d * ((tmp_17 * m03 + tmp_20 * m13 + tmp_23 * m23) -\r\n                    (tmp_16 * m03 + tmp_21 * m13 + tmp_22 * m23));\r\n        dst[12] = d * ((tmp_14 * m22 + tmp_17 * m32 + tmp_13 * m12) -\r\n                    (tmp_16 * m32 + tmp_12 * m12 + tmp_15 * m22));\r\n        dst[13] = d * ((tmp_20 * m32 + tmp_12 * m02 + tmp_19 * m22) -\r\n                    (tmp_18 * m22 + tmp_21 * m32 + tmp_13 * m02));\r\n        dst[14] = d * ((tmp_18 * m12 + tmp_23 * m32 + tmp_15 * m02) -\r\n                    (tmp_22 * m32 + tmp_14 * m02 + tmp_19 * m12));\r\n        dst[15] = d * ((tmp_22 * m22 + tmp_16 * m02 + tmp_21 * m12) -\r\n                    (tmp_20 * m12 + tmp_23 * m22 + tmp_17 * m02));\r\n    }\r\n\r\n    /**\r\n     * Takes the transpose of a matrix.\r\n     * @param {!Matrix} dst The transpose of m result.\r\n     * @param {!Matrix} m The matrix.\r\n     */\r\n    public static transpose4(dst: Matrix, m: DeepImmutable<Matrix>): void {\r\n        const m00 = m[0 * 4 + 0];\r\n        const m01 = m[0 * 4 + 1];\r\n        const m02 = m[0 * 4 + 2];\r\n        const m03 = m[0 * 4 + 3];\r\n        const m10 = m[1 * 4 + 0];\r\n        const m11 = m[1 * 4 + 1];\r\n        const m12 = m[1 * 4 + 2];\r\n        const m13 = m[1 * 4 + 3];\r\n        const m20 = m[2 * 4 + 0];\r\n        const m21 = m[2 * 4 + 1];\r\n        const m22 = m[2 * 4 + 2];\r\n        const m23 = m[2 * 4 + 3];\r\n        const m30 = m[3 * 4 + 0];\r\n        const m31 = m[3 * 4 + 1];\r\n        const m32 = m[3 * 4 + 2];\r\n        const m33 = m[3 * 4 + 3];\r\n\r\n        dst[0]  = m00;\r\n        dst[1]  = m10;\r\n        dst[2]  = m20;\r\n        dst[3]  = m30;\r\n        dst[4]  = m01;\r\n        dst[5]  = m11;\r\n        dst[6]  = m21;\r\n        dst[7]  = m31;\r\n        dst[8]  = m02;\r\n        dst[9]  = m12;\r\n        dst[10] = m22;\r\n        dst[11] = m32;\r\n        dst[12] = m03;\r\n        dst[13] = m13;\r\n        dst[14] = m23;\r\n        dst[15] = m33;\r\n    }\r\n\r\n    /**\r\n     * Computes a 4-by-4 perspective transformation matrix given the left, right,\r\n     * top, bottom, near and far clipping planes. The arguments define a frustum\r\n     * extending in the negative z direction. The arguments near and far are the\r\n     * distances to the near and far clipping planes. Note that near and far are not\r\n     * z coordinates, but rather they are distances along the negative z-axis. The\r\n     * matrix generated sends the viewing frustum to the unit box. We assume a unit\r\n     * box extending from -1 to 1 in the x and y dimensions and from 0 to 1 in the z\r\n     * dimension.\r\n     * @param {!FloatArray} dst The perspective projection matrix result.\r\n     * @param {number} left The x coordinate of the left plane of the box.\r\n     * @param {number} right The x coordinate of the right plane of the box.\r\n     * @param {number} bottom The y coordinate of the bottom plane of the box.\r\n     * @param {number} top The y coordinate of the right plane of the box.\r\n     * @param {number} near_ The negative z coordinate of the near plane of the box.\r\n     * @param {number} far_ The negative z coordinate of the far plane of the box.\r\n     */\r\n    public static frustum(dst: FloatArray, left: float, right: float, bottom: float, top: float, near_: float, far_: float): void {\r\n        const dx: float = right - left;\r\n        const dy: float = top - bottom;\r\n        const dz: float = near_ - far_;\r\n\r\n        dst[0]  = 2.0 * near_ / dx;\r\n        dst[1]  = 0.0;\r\n        dst[2]  = 0.0;\r\n        dst[3]  = 0.0;\r\n        dst[4]  = 0.0;\r\n        dst[5]  = 2.0 * near_ / dy;\r\n        dst[6]  = 0.0;\r\n        dst[7]  = 0.0;\r\n        dst[8]  = (left + right) / dx;\r\n        dst[9]  = (top + bottom) / dy;\r\n        dst[10] = far_ / dz;\r\n        dst[11] = -1.0;\r\n        dst[12] = 0.0;\r\n        dst[13] = 0.0;\r\n        dst[14] = near_ * far_ / dz;\r\n        dst[15] = 0.0;\r\n    }\r\n\r\n    public static getAxis(dst: FloatArray, m: DeepImmutable<FloatArray>, axis: int): void {\r\n        const off: int = axis * 4;\r\n        dst[0]         = m[off + 0];\r\n        dst[1]         = m[off + 1];\r\n        dst[2]         = m[off + 2];\r\n    }\r\n\r\n    /**\r\n     * Multiplies a scalar by a vector.\r\n     * @param {number} k The scalar.\r\n     * @param {!FloatArray} v The vector.\r\n     * @param {!number} length The length of vector v.\r\n     */\r\n    public static mulScalarVector(k: number, v: FloatArray, length: size_t): void {\r\n        for (let i = 0; i < length; ++i) {\r\n            v[i] = v[i] * k;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds two vectors; assumes a and b have the same dimension.\r\n     * @param {!FloatArray} dst The sum of a and b result.\r\n     * @param {!FloatArray} a Operand vector.\r\n     * @param {!FloatArray} b Operand vector.\r\n     * @param {!number} length The length of vector a and b.\r\n     */\r\n    public static addVector(dst: FloatArray, a: DeepImmutable<FloatArray>, b: DeepImmutable<FloatArray>, length: size_t): void {\r\n        for (let i = 0; i < length; ++i) {\r\n            dst[i] = a[i] + b[i];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Divides a vector by its Euclidean length and returns the quotient.\r\n     * @param {!Float32Array} dst The normalized vector.\r\n     * @param {!Float32Array} a The vector.\r\n     * @param {!number} length The length of vector a.\r\n     */\r\n    public static normalize(dst: Float32Array, a: DeepImmutable<Float32Array>, length: size_t): void {\r\n        let n: float = 0.0;\r\n\r\n        for (let i = 0; i < length; ++i) {\r\n            n += a[i] * a[i];\r\n        }\r\n        n = Math.sqrt(n);\r\n        if (n > 0.00001)\r\n        {\r\n            for (let i = 0; i < length; ++i) {\r\n                dst[i] = a[i] / n;\r\n            }\r\n        }\r\n        else\r\n        {\r\n            for (let i = 0; i < length; ++i) {\r\n                dst[i] = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Subtracts two vectors.\r\n     * @param {!FloatArray} dst The difference of a and b result.\r\n     * @param {!FloatArray} a Operand vector.\r\n     * @param {!FloatArray} b Operand vector.\r\n     * @param {!number} length The length of vector a and b.\r\n     */\r\n    public static subVector(dst: FloatArray, a: DeepImmutable<FloatArray>, b: DeepImmutable<FloatArray>, length: size_t): void {\r\n        for (let i = 0; i < length; ++i) {\r\n            dst[i] = a[i] - b[i];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Computes the cross product of two vectors; assumes both vectors have\r\n     * three entries.\r\n     * @return {!FloatArray} The vector a cross b result.\r\n     * @param {!FloatArray} a Operand vector.\r\n     * @param {!FloatArray} b Operand vector.\r\n     */\r\n    public static cross(dst: FloatArray, a: DeepImmutable<FloatArray>, b: DeepImmutable<FloatArray>): void {\r\n        dst[0] = a[1] * b[2] - a[2] * b[1];\r\n        dst[1] = a[2] * b[0] - a[0] * b[2];\r\n        dst[2] = a[0] * b[1] - a[1] * b[0];\r\n    }\r\n\r\n    /**\r\n     * Computes the dot product of two vectors; assumes that a and b have\r\n     * the same dimension.\r\n     * @param {!Float32Array} a Operand vector.\r\n     * @param {!Float32Array} b Operand vector.\r\n     * @return {number} The dot product of a and b.\r\n     */\r\n    public static dot(a: DeepImmutable<Float32Array>, b: DeepImmutable<Float32Array>): float {\r\n        return (a[0] * b[0]) + (a[1] * b[1]) + (a[2] * b[2]);\r\n    }\r\n\r\n    /**\r\n     * Computes a 4-by-4 camera look-at transformation. This is the\r\n     * inverse of lookAt The transformation generated is an\r\n     * orthogonal rotation matrix with translation component.\r\n     * @param {!FloatArray} dst The camera look-at matrix result.\r\n     * @param {!FloatArray} eye The position of the eye.\r\n     * @param {!FloatArray} target The position meant to be viewed.\r\n     * @param {!FloatArray} up A vector pointing up.\r\n     */\r\n    public static cameraLookAt(dst: FloatArray, eye: DeepImmutable<FloatArray>, target: DeepImmutable<FloatArray>, up: DeepImmutable<FloatArray>): void {\r\n        let t0: Float32Array = new Float32Array(3);\r\n        let t1: Float32Array = new Float32Array(3);\r\n        let t2: Float32Array = new Float32Array(3);\r\n        Matrix.subVector(t0, eye, target, 3);\r\n        Matrix.normalize(t0, t0, 3);\r\n        Matrix.cross(t1, up, t0);\r\n        Matrix.normalize(t1, t1, 3);\r\n        Matrix.cross(t2, t0, t1);\r\n\r\n        dst[0]  = t1[0];\r\n        dst[1]  = t1[1];\r\n        dst[2]  = t1[2];\r\n        dst[3]  = 0.0;\r\n        dst[4]  = t2[0];\r\n        dst[5]  = t2[1];\r\n        dst[6]  = t2[2];\r\n        dst[7]  = 0.0;\r\n        dst[8]  = t0[0];\r\n        dst[9]  = t0[1];\r\n        dst[10] = t0[2];\r\n        dst[11] = 0.0;\r\n        dst[12] = eye[0];\r\n        dst[13] = eye[1];\r\n        dst[14] = eye[2];\r\n        dst[15] = 1.0;\r\n    }\r\n\r\n    /**\r\n     * Resets the pseudoRandom function sequence.\r\n     */\r\n    public static resetPseudoRandom(): void {\r\n        Matrix._randomSeed = 0;\r\n    }\r\n\r\n    /**\r\n     * Returns a deterministic pseudorandom number between 0 and 1\r\n     * @return {float} a random number between 0 and 1\r\n     */\r\n    public static pseudoRandom(): float {\r\n        Matrix._randomSeed = (134775813 * Matrix._randomSeed + 1) % Matrix._RANDOM_RANGE;\r\n        return Matrix._randomSeed / Matrix._randomSeed;\r\n    }\r\n\r\n    /**\r\n     * Creates a 4-by-4 matrix which translates by the given vector v.\r\n     * @param {!FloatArray} dst The translation matrix result.\r\n     * @param {!Float32Array} v The vector by which to translate.\r\n     */\r\n    public static translation(dst: FloatArray, v: DeepImmutable<Float32Array>): void {\r\n        dst[0]  = 1;\r\n        dst[1]  = 0;\r\n        dst[2]  = 0;\r\n        dst[3]  = 0;\r\n        dst[4]  = 0;\r\n        dst[5]  = 1;\r\n        dst[6]  = 0;\r\n        dst[7]  = 0;\r\n        dst[8]  = 0;\r\n        dst[9]  = 0;\r\n        dst[10] = 1;\r\n        dst[11] = 0;\r\n        dst[12] = v[0];\r\n        dst[13] = v[1];\r\n        dst[14] = v[2];\r\n        dst[15] = 1;\r\n    }\r\n\r\n    /**\r\n     * Modifies the given 4-by-4 matrix by translation by the given vector v.\r\n     * @param {!FloatArray} m The matrix result.\r\n     * @param {!Float32Array} v The vector by which to translate.\r\n     */\r\n    public static translate(m: FloatArray, v: DeepImmutable<Float32Array>): void {\r\n        const v0  = v[0];\r\n        const v1  = v[1];\r\n        const v2  = v[2];\r\n        const m00 = m[0];\r\n        const m01 = m[1];\r\n        const m02 = m[2];\r\n        const m03 = m[3];\r\n        const m10 = m[1 * 4 + 0];\r\n        const m11 = m[1 * 4 + 1];\r\n        const m12 = m[1 * 4 + 2];\r\n        const m13 = m[1 * 4 + 3];\r\n        const m20 = m[2 * 4 + 0];\r\n        const m21 = m[2 * 4 + 1];\r\n        const m22 = m[2 * 4 + 2];\r\n        const m23 = m[2 * 4 + 3];\r\n        const m30 = m[3 * 4 + 0];\r\n        const m31 = m[3 * 4 + 1];\r\n        const m32 = m[3 * 4 + 2];\r\n        const m33 = m[3 * 4 + 3];\r\n\r\n        m[12] = m00 * v0 + m10 * v1 + m20 * v2 + m30;\r\n        m[13] = m01 * v0 + m11 * v1 + m21 * v2 + m31;\r\n        m[14] = m02 * v0 + m12 * v1 + m22 * v2 + m32;\r\n        m[15] = m03 * v0 + m13 * v1 + m23 * v2 + m33;\r\n    }\r\n\r\n    /**\r\n     * Converts degrees to radians.\r\n     * @param {number} degrees A value in degrees.\r\n     * @return {number} the value in radians.\r\n     */\r\n    public static degToRad(degrees: float): float {\r\n        return degrees * Math.PI / 180.0;\r\n    }\r\n}","import { ASSERT, BuildArray, Nullable, double, float, FloatArray, int, size_t, uint32_t } from \"./types\";\r\n\r\nimport { Behavior } from \"./behavior\";\r\nimport { Buffer } from \"./buffer\";\r\nimport { Context, ContextWebGPU } from \"./context\";\r\nimport { FPSTimer } from \"./fpsTimer\";\r\nimport { IO } from \"./io\";\r\nimport { Program, ProgramWebGPU } from \"./program\";\r\nimport { Matrix } from \"./matrix\";\r\nimport { Model, FishModel } from \"./model\";\r\nimport { ResourceHelper } from \"./resourceHelper\";\r\nimport { Texture } from \"./texture\";\r\nimport { FogUniforms, LightWorldPositionUniform, LightUniforms, WorldUniforms } from \"./uniforms\";\r\n\r\n/**\r\n * Define global variables, enums, constant variables and Class Aquarium.\r\n */\r\n\r\nexport enum MODELNAME {\r\n    MODELFIRST,\r\n    MODELRUINCOlOMN,\r\n    MODELARCH,\r\n    MODELROCKA,\r\n    MODELROCKB,\r\n    MODELROCKC,\r\n    MODELSUNKNSHIPBOXES,\r\n    MODELSUNKNSHIPDECK,\r\n    MODELSUNKNSHIPHULL,\r\n    MODELFLOORBASE_BAKED,\r\n    MODELSUNKNSUB,\r\n    MODELCORAL,\r\n    MODELSTONE,\r\n    MODELCORALSTONEA,\r\n    MODELCORALSTONEB,\r\n    MODELGLOBEBASE,\r\n    MODELTREASURECHEST,\r\n    MODELENVIRONMENTBOX,\r\n    MODELSUPPORTBEAMS,\r\n    MODELSKYBOX,\r\n    MODELGLOBEINNER,\r\n    MODELSEAWEEDA,\r\n    MODELSEAWEEDB,\r\n    MODELSMALLFISHA,\r\n    MODELMEDIUMFISHA,\r\n    MODELMEDIUMFISHB,\r\n    MODELBIGFISHA,\r\n    MODELBIGFISHB,\r\n    MODELSMALLFISHAINSTANCEDDRAWS,\r\n    MODELMEDIUMFISHAINSTANCEDDRAWS,\r\n    MODELMEDIUMFISHBINSTANCEDDRAWS,\r\n    MODELBIGFISHAINSTANCEDDRAWS,\r\n    MODELBIGFISHBINSTANCEDDRAWS,\r\n    MODELMAX\r\n}\r\n\r\nexport enum MODELGROUP {\r\n    FISH,\r\n    FISHINSTANCEDDRAW,\r\n    INNER,\r\n    SEAWEED,\r\n    GENERIC,\r\n    OUTSIDE,\r\n    GROUPMAX\r\n}\r\n\r\nexport class G_sceneInfo {\r\n    namestr: string;\r\n    name: MODELNAME;\r\n    program: Array<string>;\r\n    fog: boolean;\r\n    type: MODELGROUP;\r\n    blend?: boolean;\r\n}\r\n\r\nexport enum FISHENUM {\r\n    BIG,\r\n    MEDIUM,\r\n    SMALL,\r\n    MAX\r\n}\r\n\r\nexport enum TOGGLE {\r\n    // Stop rendering after specified time.\r\n    AUTOSTOP,\r\n    // Enable alpha blending.\r\n    ENABLEALPHABLENDING,\r\n    // Enable 4 times MSAA.\r\n    ENABLEMSAAx4,\r\n    // Go through instanced draw.\r\n    ENABLEINSTANCEDDRAWS,\r\n    // The toggle is only supported on WebGPU backend.\r\n    // By default, the app will enable dynamic buffer offset.\r\n    // The toggle is to disable dbo feature.\r\n    ENABLEDYNAMICBUFFEROFFSET,\r\n    // Turn off render pass on d3d12\r\n    DISABLED3D12RENDERPASS,\r\n    // Turn off WebGPU validation,\r\n    DISABLEWEBGPUVALIDATION,\r\n    // Disable control panel,\r\n    DISABLECONTROLPANEL,\r\n    // Select integrated gpu if available.\r\n    INTEGRATEDGPU,\r\n    // Select discrete gpu if available.\r\n    DISCRETEGPU,\r\n    // Update and draw for each model on OpenGL and Angle backend, but draw once per frame on other\r\n    // backend.\r\n    UPATEANDDRAWFOREACHMODEL,\r\n    // Support Full Screen mode\r\n    ENABLEFULLSCREENMODE,\r\n    // Print logs such as avg fps\r\n    PRINTLOG,\r\n    // Use async buffer mapping to upload data\r\n    BUFFERMAPPINGASYNC,\r\n    // Simulate fish come and go for WEBGPU backend\r\n    SIMULATINGFISHCOMEANDGO,\r\n    // Turn off vsync, donot limit fps to 60\r\n    TURNOFFVSYNC,\r\n    TOGGLEMAX\r\n}\r\n\r\nexport const g_sceneInfo: G_sceneInfo[] = [\r\n    {\r\n        namestr: \"SmallFishA\",\r\n        name: MODELNAME.MODELSMALLFISHA,\r\n        program: [\"fishVertexShader\", \"fishReflectionFragmentShader\"],\r\n        fog: true,\r\n        type: MODELGROUP.FISH\r\n    },\r\n    {\r\n        namestr: \"MediumFishA\",\r\n        name: MODELNAME.MODELMEDIUMFISHA,\r\n        program: [\"fishVertexShader\", \"fishNormalMapFragmentShader\"],\r\n        fog: true,\r\n        type: MODELGROUP.FISH\r\n    },\r\n    {\r\n        namestr: \"MediumFishB\",\r\n        name: MODELNAME.MODELMEDIUMFISHB,\r\n        program: [\"fishVertexShader\", \"fishReflectionFragmentShader\"],\r\n        fog: true,\r\n        type: MODELGROUP.FISH\r\n    },\r\n    {\r\n        namestr: \"BigFishA\",\r\n        name: MODELNAME.MODELBIGFISHA,\r\n        program: [\"fishVertexShader\", \"fishNormalMapFragmentShader\"],\r\n        fog: true,\r\n        type: MODELGROUP.FISH\r\n    },\r\n    {\r\n        namestr: \"BigFishB\",\r\n        name: MODELNAME.MODELBIGFISHB,\r\n        program: [\"fishVertexShader\", \"fishNormalMapFragmentShader\"],\r\n        fog: true,\r\n        type: MODELGROUP.FISH\r\n    },\r\n    {\r\n        namestr: \"SmallFishA\",\r\n        name: MODELNAME.MODELSMALLFISHAINSTANCEDDRAWS,\r\n        program: [\"fishVertexShaderInstancedDraws\", \"fishReflectionFragmentShader\"],\r\n        fog: true,\r\n        type: MODELGROUP.FISHINSTANCEDDRAW\r\n    },\r\n    {\r\n        namestr:  \"MediumFishA\",\r\n        name: MODELNAME.MODELMEDIUMFISHAINSTANCEDDRAWS,\r\n        program: [\"fishVertexShaderInstancedDraws\", \"fishNormalMapFragmentShader\"],\r\n        fog: true,\r\n        type: MODELGROUP.FISHINSTANCEDDRAW\r\n    },\r\n    {\r\n        namestr: \"MediumFishB\",\r\n        name: MODELNAME.MODELMEDIUMFISHBINSTANCEDDRAWS,\r\n        program: [\"fishVertexShaderInstancedDraws\", \"fishReflectionFragmentShader\"],\r\n        fog: true,\r\n        type: MODELGROUP.FISHINSTANCEDDRAW\r\n    },\r\n    {\r\n        namestr: \"BigFishA\",\r\n        name: MODELNAME.MODELBIGFISHAINSTANCEDDRAWS,\r\n        program: [\"fishVertexShaderInstancedDraws\", \"fishNormalMapFragmentShader\"],\r\n        fog: true,\r\n        type: MODELGROUP.FISHINSTANCEDDRAW\r\n    },\r\n    {\r\n        namestr: \"BigFishB\",\r\n        name: MODELNAME.MODELBIGFISHBINSTANCEDDRAWS,\r\n        program: [\"fishVertexShaderInstancedDraws\", \"fishNormalMapFragmentShader\"],\r\n        fog: true,\r\n        type: MODELGROUP.FISHINSTANCEDDRAW\r\n    },\r\n    {\r\n        namestr: \"Arch\",\r\n        name: MODELNAME.MODELARCH,\r\n        program: [\"\", \"\"],\r\n        fog: true,\r\n        type: MODELGROUP.GENERIC\r\n    },\r\n    {\r\n        namestr: \"Coral\",\r\n        name: MODELNAME.MODELCORAL,\r\n        program: [\"\", \"\"],\r\n        fog: true,\r\n        type: MODELGROUP.GENERIC\r\n    },\r\n    {\r\n        namestr: \"CoralStoneA\",\r\n        name: MODELNAME.MODELCORALSTONEA,\r\n        program: [\"\", \"\"],\r\n        fog: true,\r\n        type: MODELGROUP.GENERIC\r\n    },\r\n    {\r\n        namestr: \"CoralStoneB\",\r\n        name: MODELNAME.MODELCORALSTONEB,\r\n        program: [\"\", \"\"],\r\n        fog: true,\r\n        type: MODELGROUP.GENERIC\r\n    },\r\n    {\r\n        namestr: \"EnvironmentBox\",\r\n        name: MODELNAME.MODELENVIRONMENTBOX,\r\n        program: [\"diffuseVertexShader\", \"diffuseFragmentShader\"],\r\n        fog: false,\r\n        type: MODELGROUP.OUTSIDE\r\n    },\r\n    {\r\n        namestr: \"FloorBase_Baked\",\r\n        name: MODELNAME.MODELFLOORBASE_BAKED,\r\n        program: [\"\", \"\"],\r\n        fog: true,\r\n        type: MODELGROUP.GENERIC\r\n    },\r\n    {\r\n        namestr: \"GlobeBase\",\r\n        name: MODELNAME.MODELGLOBEBASE,\r\n        program: [\"diffuseVertexShader\", \"diffuseFragmentShader\"],\r\n        fog: false,\r\n        type: MODELGROUP.GENERIC\r\n    },\r\n    /*{\r\n        namestr: \"GlobeInner\",\r\n        name: MODELNAME.MODELGLOBEINNER,\r\n        program: [\"innerRefractionMapVertexShader\", \"innerRefractionMapFragmentShader\"],\r\n        fog: true,\r\n        type: MODELGROUP.INNER\r\n    },*/\r\n    {\r\n        namestr: \"RockA\",\r\n        name: MODELNAME.MODELROCKA,\r\n        program: [\"\", \"\"],\r\n        fog: true,\r\n        type: MODELGROUP.GENERIC\r\n    },\r\n    {\r\n        namestr: \"RockB\", \"name\": MODELNAME.MODELROCKB,\r\n        program: [\"\", \"\"],\r\n        fog: true,\r\n        type: MODELGROUP.GENERIC\r\n    },\r\n    {\r\n        namestr: \"RockC\",\r\n        name: MODELNAME.MODELROCKC,\r\n        program: [\"\", \"\"],\r\n        fog: true,\r\n        type: MODELGROUP.GENERIC\r\n    },\r\n    {\r\n        namestr: \"RuinColumn\",\r\n        name: MODELNAME.MODELRUINCOlOMN,\r\n        program: [\"\", \"\"],\r\n        fog: true,\r\n        type: MODELGROUP.GENERIC\r\n    },\r\n    {\r\n        namestr: \"Stone\",\r\n        name: MODELNAME.MODELSTONE,\r\n        program: [\"\", \"\"],\r\n        fog: true,\r\n        type: MODELGROUP.GENERIC\r\n    },\r\n    {\r\n        namestr: \"SunknShipBoxes\",\r\n        name: MODELNAME.MODELSUNKNSHIPBOXES,\r\n        program: [\"\", \"\"],\r\n        fog: true,\r\n        type: MODELGROUP.GENERIC\r\n    },\r\n    {\r\n        namestr: \"SunknShipDeck\",\r\n        name: MODELNAME.MODELSUNKNSHIPDECK,\r\n        program: [\"\", \"\"],\r\n        fog: true,\r\n        type: MODELGROUP.GENERIC\r\n    },\r\n    {\r\n        namestr: \"SunknShipHull\",\r\n        name: MODELNAME.MODELSUNKNSHIPHULL,\r\n        program: [\"\", \"\"],\r\n        fog: true,\r\n        type: MODELGROUP.GENERIC\r\n    },\r\n    {\r\n        namestr: \"SunknSub\",\r\n        name: MODELNAME.MODELSUNKNSUB,\r\n        program: [\"\", \"\"],\r\n        fog: true,\r\n        type: MODELGROUP.GENERIC\r\n    },\r\n    {\r\n        namestr: \"SeaweedA\",\r\n        name: MODELNAME.MODELSEAWEEDA,\r\n        program: [\"seaweedVertexShader\", \"seaweedFragmentShader\"],\r\n        fog: false,\r\n        type: MODELGROUP.SEAWEED\r\n    },\r\n    {\r\n        namestr: \"SeaweedB\",\r\n        name: MODELNAME.MODELSEAWEEDB,\r\n        program: [\"seaweedVertexShader\", \"seaweedFragmentShader\"],\r\n        fog: false,\r\n        type: MODELGROUP.SEAWEED\r\n    },\r\n    {\r\n        namestr: \"Skybox\",\r\n        name: MODELNAME.MODELSKYBOX,\r\n        program: [\"diffuseVertexShader\", \"diffuseFragmentShader\"],\r\n        fog: false,\r\n        type: MODELGROUP.OUTSIDE\r\n    },\r\n    {\r\n        namestr: \"SupportBeams\",\r\n        name: MODELNAME.MODELSUPPORTBEAMS,\r\n        program: [\"\", \"\"],\r\n        fog: false,\r\n        type: MODELGROUP.OUTSIDE\r\n    },\r\n    {\r\n        namestr: \"TreasureChest\",\r\n        name: MODELNAME.MODELTREASURECHEST,\r\n        program: [\"\", \"\"],\r\n        fog: true,\r\n        type: MODELGROUP.GENERIC\r\n    }\r\n];\r\n\r\nexport interface Fish {\r\n    name: string;\r\n    modelName: MODELNAME;\r\n    type: FISHENUM;\r\n    speed: float;\r\n    speedRange: float;\r\n    radius: float;\r\n    radiusRange: float;\r\n    tailSpeed: float;\r\n    heightOffset: float;\r\n    heightRange: float;\r\n\r\n    fishLength: float;\r\n    fishWaveLength: float;\r\n    fishBendAmount: float;\r\n\r\n    lasers?: boolean;\r\n    laserRot?: float;\r\n    laserOff?: Array<float>;\r\n    laserScale?: Array<float>;\r\n}\r\n\r\nexport const fishTable: Fish[] = [\r\n    {\r\n        name: \"SmallFishA\",\r\n        modelName: MODELNAME.MODELSMALLFISHA,\r\n        type: FISHENUM.SMALL,\r\n        speed: 1.0,\r\n        speedRange: 1.5,\r\n        radius: 30.0,\r\n        radiusRange: 25.0,\r\n        tailSpeed: 10.0,\r\n        heightOffset: 0.0,\r\n        heightRange: 16.0,\r\n        fishLength: 10.0,\r\n        fishWaveLength: 1.0,\r\n        fishBendAmount: 2.0\r\n    },\r\n    {\r\n        name: \"MediumFishA\",\r\n        modelName: MODELNAME.MODELMEDIUMFISHA,\r\n        type: FISHENUM.MEDIUM,\r\n        speed: 1.0,\r\n        speedRange: 2.0,\r\n        radius: 10.0,\r\n        radiusRange: 20.0,\r\n        tailSpeed: 1.0,\r\n        heightOffset: 0.0,\r\n        heightRange: 16.0,\r\n        fishLength: 10.0,\r\n        fishWaveLength: -2.0,\r\n        fishBendAmount: 2.0\r\n    },\r\n    {\r\n        name: \"MediumFishB\",\r\n        modelName: MODELNAME.MODELMEDIUMFISHB,\r\n        type: FISHENUM.MEDIUM,\r\n        speed: 0.5,\r\n        speedRange: 4.0,\r\n        radius: 10.0,\r\n        radiusRange: 20.0,\r\n        tailSpeed: 3.0,\r\n        heightOffset: -8.0,\r\n        heightRange: 5.0,\r\n        fishLength: 10.0,\r\n        fishWaveLength: -2.0,\r\n        fishBendAmount: 2.0\r\n    },\r\n    {\r\n        name: \"BigFishA\",\r\n        modelName: MODELNAME.MODELBIGFISHA,\r\n        type: FISHENUM.BIG,\r\n        speed: 0.5,\r\n        speedRange: 0.5,\r\n        radius: 50.0,\r\n        radiusRange: 3.0,\r\n        tailSpeed: 1.5,\r\n        heightOffset: 0.0,\r\n        heightRange: 16.0,\r\n        fishLength: 10.0,\r\n        fishWaveLength: -1.0,\r\n        fishBendAmount: 0.5,\r\n        lasers: true,\r\n        laserRot: 0.04,\r\n        laserOff: [0.0, 0.1, 9.0],\r\n        laserScale: [0.3, 0.3, 1000.0]\r\n    },\r\n    {\r\n        name: \"BigFishB\",\r\n        modelName: MODELNAME.MODELBIGFISHB,\r\n        type: FISHENUM.BIG,\r\n        speed: 0.5,\r\n        speedRange: 0.5,\r\n        radius: 45.0,\r\n        radiusRange: 3.0,\r\n        tailSpeed: 1.0,\r\n        heightOffset: 0.0,\r\n        heightRange: 16.0,\r\n        fishLength: 10.0,\r\n        fishWaveLength: -0.7,\r\n        fishBendAmount: 0.3,\r\n        lasers: true,\r\n        laserRot: 0.04,\r\n        laserOff: [0.0, -0.3, 9.0],\r\n        laserScale: [0.3, 0.3, 1000.0]\r\n    }\r\n]\r\n\r\nexport const g_tailOffsetMult: float         = 1.0;\r\nexport const g_endOfDome: float              = Math.PI / 8.0;\r\nexport const g_tankRadius: float             = 74.0;\r\nexport const g_tankHeight: float             = 36.0;\r\nexport const g_standHeight: float            = 25.0;\r\nexport const g_sharkSpeed: float             = 0.3;\r\nexport const g_sharkClockOffset: float       = 17.0;\r\nexport const g_sharkXClock: float            = 1.0;\r\nexport const g_sharkYClock: float            = 0.17;\r\nexport const g_sharkZClock: float            = 1.0;\r\nexport const g_numBubbleSets: int            = 10;\r\nexport const g_laserEta: float               = 1.2;\r\nexport const g_laserLenFudge: float          = 1.0;\r\nexport const g_numLightRays: int             = 5;\r\nexport const g_lightRayY: int                = 50;\r\nexport const g_lightRayDurationMin: int      = 1;\r\nexport const g_lightRayDurationRange: int    = 1;\r\nexport const g_lightRaySpeed: int            = 4;\r\nexport const g_lightRaySpread: int           = 7;\r\nexport const g_lightRayPosRange: int         = 20;\r\nexport const g_lightRayRotRange: float       = 1.0;\r\nexport const g_lightRayRotLerp: float        = 0.2;\r\nexport const g_lightRayOffset: float         = Math.PI * 2.0 / g_numLightRays;\r\nexport const g_bubbleTimer: float            = 0.0;\r\nexport const g_bubbleIndex: int              = 0;\r\n\r\nexport const g_numFishSmall: int             = 100;\r\nexport const g_numFishMedium: int            = 1000;\r\nexport const g_numFishBig: int               = 10000;\r\nexport const g_numFishLeftSmall: int         = 80;\r\nexport const g_numFishLeftBig: int           = 160;\r\nexport const g_sand_shininess: float         = 5.0;\r\nexport const g_sand_specularFactor: float    = 0.3;\r\nexport const g_generic_shininess: float      = 50.0;\r\nexport const g_generic_specularFactor: float = 1.0;\r\nexport const g_outside_shininess: float      = 50.0;\r\nexport const g_outside_specularFactor: float = 0.0;\r\nexport const g_seaweed_shininess: float      = 50.0;\r\nexport const g_seaweed_specularFactor: float = 1.0;\r\nexport const g_inner_shininess: float        = 50.0;\r\nexport const g_inner_specularFactor: float   = 1.0;\r\nexport const g_fish_shininess: float         = 5.0;\r\nexport const g_fish_specularFactor: float    = 0.3;\r\n\r\nexport const g_speed: float                  = 1.0;\r\nexport const g_targetHeight: float           = 63.3;\r\nexport const g_targetRadius: float           = 91.6;\r\nexport const g_eyeHeight: float              = 7.5;\r\nexport const g_eyeSpeed: float               = 0.0258;\r\nexport const g_filedOfView: float            = 82.699;\r\nexport const g_ambientRed: float             = 0.218;\r\nexport const g_ambientGreen: float           = 0.502;\r\nexport const g_ambientBlue: float            = 0.706;\r\nexport const g_fogPower: float               = 16.5;\r\nexport const g_fogMult: float                = 1.5;\r\nexport const g_fogOffset: float              = 0.738;\r\nexport const g_fogRed: float                 = 0.338;\r\nexport const g_fogGreen: float               = 0.81;\r\nexport const g_fogBlue: float                = 1.0;\r\nexport const g_fishHeightRange: float        = 1.0;\r\nexport const g_fishHeight: float             = 25.0;\r\nexport const g_fishSpeed: float              = 0.124;\r\nexport const g_fishOffset: float             = 0.52;\r\nexport const g_fishXClock: float             = 1.0;\r\nexport const g_fishYClock: float             = 0.556;\r\nexport const g_fishZClock: float             = 1.0;\r\nexport const g_fishTailSpeed: float          = 1.0;\r\nexport const g_refractionFudge: float        = 3.0;\r\nexport const g_eta: float                    = 1.0;\r\nexport const g_tankColorFudge: float         = 0.796;\r\nexport const g_fovFudge: float               = 1.0;\r\nexport const g_net_offset: Array<float>      = [0.0, 0.0, 0.0];\r\nexport const g_net_offsetMult: float         = 1.21;\r\nexport const g_eyeRadius: float              = 13.2;\r\nexport const g_fieldOfView: float            = 82.699;\r\n\r\nexport class Global {\r\n\r\n    public projection: Array<float>\r\n    public view: Array<float>\r\n    public worldInverse: Array<float>\r\n    public viewProjectionInverse: Array<float>\r\n    public skyView: Array<float>\r\n    public skyViewProjection: Array<float>\r\n    public skyViewProjectionInverse: Array<float>\r\n    public eyePosition: Array<float>\r\n    public target: Array<float>\r\n    public up: Array<float>;\r\n    public v3t0: Array<float>\r\n    public v3t1: Array<float>\r\n    public m4t0: Array<float>\r\n    public m4t1: Array<float>\r\n    public m4t2: Array<float>\r\n    public m4t3: Array<float>\r\n    public colorMult: Array<float>;\r\n    public then: double;\r\n    public start: double;\r\n    public mclock: float;\r\n    public eyeClock: float;\r\n    public alpha: string;\r\n\r\n    constructor() {\r\n        this.projection               = BuildArray(16, () => 0.0);\r\n        this.view                     = BuildArray(16, () => 0.0);\r\n        this.worldInverse             = BuildArray(16, () => 0.0);\r\n        this.viewProjectionInverse    = BuildArray(16, () => 0.0);\r\n        this.skyView                  = BuildArray(16, () => 0.0);\r\n        this.skyViewProjection        = BuildArray(16, () => 0.0);\r\n        this.skyViewProjectionInverse = BuildArray(16, () => 0.0);\r\n        this.eyePosition              = BuildArray(3, () => 0.0);\r\n        this.target                   = BuildArray(3, () => 0.0);\r\n        this.up                       = [0, 1, 0];\r\n        this.v3t0                     = BuildArray(3, () => 0.0);\r\n        this.v3t1                     = BuildArray(3, () => 0.0);\r\n        this.m4t0                     = BuildArray(16, () => 0.0);\r\n        this.m4t1                     = BuildArray(16, () => 0.0);\r\n        this.m4t2                     = BuildArray(16, () => 0.0);\r\n        this.m4t3                     = BuildArray(16, () => 0.0);\r\n        this.colorMult                = [1, 1, 1, 1];\r\n    }\r\n\r\n}\r\n\r\nexport class AquariumOptions {\r\n    canvas: HTMLCanvasElement;\r\n    num_fish?: int;\r\n    enable_msaa?: boolean;\r\n    disable_dynamic_buffer_offset?: boolean;\r\n    integrated_gpu?: boolean;\r\n    discrete_gpu?: boolean;\r\n    enable_full_screen_mode?: boolean;\r\n    print_log?: boolean;\r\n    buffer_mapping_async?: boolean;\r\n    turn_off_vsync?: boolean;\r\n    test_time?: int;\r\n    disable_webgpu_validation?: boolean;\r\n    enable_alpha_blending?: string;\r\n    simulating_fish_come_and_go?: boolean;\r\n    disable_control_panel?: boolean;\r\n}\r\n\r\nexport class Aquarium {\r\n\r\n    public toggleBitset: Array<boolean>;\r\n    public lightWorldPositionUniform: Nullable<LightWorldPositionUniform> = new LightWorldPositionUniform();\r\n    public worldUniforms: Nullable<WorldUniforms> = new WorldUniforms();\r\n    public lightUniforms: Nullable<LightUniforms> = new LightUniforms();\r\n    public fogUniforms: Nullable<FogUniforms> = new FogUniforms();\r\n    public g: Nullable<Global> = new Global();\r\n    public fishCount: Array<int>;\r\n\r\n    private _modelEnumMap: Record<string, MODELNAME> = {};\r\n    private _textureMap: Record<string, Nullable<Texture>> = {};\r\n    private _programMap: Record<string, Nullable<Program>> = {};\r\n    private _aquariumModels: Array<Nullable<Model>>;\r\n    private _context: Nullable<Context> = null;\r\n    private _fpsTimer: Nullable<FPSTimer> = null; // object to measure frames per second;\r\n    private _curFishCount: int;\r\n    private _preFishCount: int;\r\n    private _testTime: int;\r\n    private _skyUrls: Array<string>;\r\n    private _fishBehavior: Array<Nullable<Behavior>>;\r\n\r\n    constructor() {            \r\n        this._curFishCount = 1;\r\n        this._preFishCount = 0;\r\n\r\n        this.g.then          = 0.0;\r\n        this.g.mclock        = 0.0;\r\n        this.g.eyeClock      = 0.0;\r\n        this.g.alpha         = \"1\";\r\n\r\n        this.lightUniforms.ambient    = [g_ambientRed, g_ambientGreen, g_ambientBlue, 0.0];\r\n        this.lightUniforms.lightColor = [1.0, 1.0, 1.0, 1.0];\r\n        this.lightUniforms.specular   = [1.0, 1.0, 1.0, 1.0];\r\n\r\n        this.fogUniforms.fogColor  = [g_fogRed, g_fogGreen, g_fogBlue, 1.0];\r\n        this.fogUniforms.fogPower  = g_fogPower;\r\n        this.fogUniforms.fogMult   = g_fogMult;\r\n        this.fogUniforms.fogOffset = g_fogOffset;\r\n\r\n        this.fishCount = [0, 0, 0, 0, 0];\r\n\r\n        this.toggleBitset    = BuildArray(TOGGLE.TOGGLEMAX, () => false);\r\n        this._aquariumModels = BuildArray(MODELNAME.MODELMAX, () => null);\r\n        this._fpsTimer       = new FPSTimer();\r\n    }\r\n\r\n    public dispose(): void {\r\n        \r\n    }\r\n\r\n    public get skybox(): Nullable<Texture> {\r\n        return this._textureMap[\"skybox\"];\r\n    }\r\n\r\n    public get curFishCount(): int {\r\n        return this._curFishCount;\r\n    }\r\n\r\n    public get preFishCount(): int {\r\n        return this._preFishCount;\r\n    }\r\n\r\n    public async init(options: AquariumOptions): Promise<boolean> {\r\n        return Promise.resolve().then(async () => {\r\n            // Create context\r\n            this._context = new ContextWebGPU();\r\n\r\n            const availableToggleBitset: Array<boolean> = this._context.availableToggleBitset;\r\n            if (availableToggleBitset[TOGGLE.UPATEANDDRAWFOREACHMODEL]) {\r\n                this.toggleBitset[TOGGLE.UPATEANDDRAWFOREACHMODEL] = true;\r\n            }\r\n            if (availableToggleBitset[TOGGLE.ENABLEDYNAMICBUFFEROFFSET]) {\r\n                this.toggleBitset[TOGGLE.ENABLEDYNAMICBUFFEROFFSET] = true;\r\n            }\r\n            this.toggleBitset[TOGGLE.ENABLEALPHABLENDING] = true;\r\n\r\n            if (!this._processOptions(options, availableToggleBitset)) {\r\n                return false;\r\n            }\r\n\r\n            if (!await this._context.initialize(this.toggleBitset, options.canvas)) {\r\n                return false;\r\n            }\r\n\r\n            this._calculateFishCount();\r\n\r\n            console.log(\"Init resources ...\");\r\n            this._getElapsedTime();\r\n\r\n            const resourceHelper: ResourceHelper = this._context.resourceHelper;\r\n            const skyUrls: string[] = resourceHelper.getSkyBoxUrls();\r\n            this._textureMap[\"skybox\"] = await this._context.createTextureWebGPU(\"skybox\", skyUrls);\r\n\r\n            // Init general buffer and binding groups for WebGPU backend.\r\n            this._context.initGeneralResources(this);\r\n            // Avoid resource allocation in the first render loop\r\n            this._preFishCount = this._curFishCount;\r\n\r\n            this._setupModelEnumMap();\r\n            await this.loadResource();\r\n            this._context.flush();\r\n\r\n            console.log(\"End loading.\\nCost \" + this._getElapsedTime() + \"s totally.\");\r\n\r\n            this._resetFpsTime();\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    private _processOptions(options: AquariumOptions, availableToggleBitset: Array<boolean>): boolean {\r\n        if (!options) {\r\n            return false;\r\n        }\r\n\r\n        if (options.num_fish) {\r\n            this._curFishCount = options.num_fish;\r\n            if (this._curFishCount < 0) {\r\n                console.error(\"Fish count should larger or equal to 0.\");\r\n                return false;\r\n            }\r\n        }\r\n        if (options.enable_msaa) {\r\n            if (!availableToggleBitset[TOGGLE.ENABLEMSAAx4]) {\r\n                console.error(\"MSAA isn't implemented for the backend.\");\r\n                return false;\r\n            }\r\n            this.toggleBitset[TOGGLE.ENABLEMSAAx4] = true;\r\n        }\r\n        if (options.disable_dynamic_buffer_offset) {\r\n            if (!availableToggleBitset[TOGGLE.ENABLEDYNAMICBUFFEROFFSET]) {\r\n                console.error(\"Dynamic buffer offset is not supported.\");\r\n                return false;\r\n            }\r\n            this.toggleBitset[TOGGLE.ENABLEDYNAMICBUFFEROFFSET] = true;\r\n        }\r\n        if (options.integrated_gpu) {\r\n            if (!availableToggleBitset[TOGGLE.INTEGRATEDGPU] &&\r\n                !availableToggleBitset[TOGGLE.DISCRETEGPU])  {\r\n                console.error(\"Dynamically choose gpu isn't supported for the backend.\");\r\n                return false;\r\n            }\r\n\r\n            if (availableToggleBitset[TOGGLE.DISCRETEGPU]) {\r\n                console.error(\"Integrated and Discrete gpu cannot be used simultaneosly.\");\r\n            }\r\n            this.toggleBitset[TOGGLE.INTEGRATEDGPU] = true;\r\n        }\r\n        if (options.discrete_gpu) {\r\n            if (!availableToggleBitset[TOGGLE.INTEGRATEDGPU] &&\r\n                !availableToggleBitset[TOGGLE.DISCRETEGPU])  {\r\n                console.error(\"Dynamically choose gpu isn't supported for the backend.\");\r\n                return false;\r\n            }\r\n\r\n            if (availableToggleBitset[TOGGLE.INTEGRATEDGPU]) {\r\n                console.error(\"Integrated and Discrete gpu cannot be used simultaneosly.\");\r\n            }\r\n            this.toggleBitset[TOGGLE.DISCRETEGPU] = true;\r\n        }\r\n        if (options.enable_full_screen_mode) {\r\n            if (!availableToggleBitset[TOGGLE.ENABLEFULLSCREENMODE]) {\r\n                console.error(\"Full screen mode isn't supported for the backend.\");\r\n                return false;\r\n            }\r\n            this.toggleBitset[TOGGLE.ENABLEFULLSCREENMODE] = true;\r\n        }\r\n        if (options.print_log) {\r\n            this.toggleBitset[TOGGLE.PRINTLOG] = true;\r\n        }\r\n        if (options.buffer_mapping_async) {\r\n            if (!availableToggleBitset[TOGGLE.BUFFERMAPPINGASYNC]) {\r\n                console.error(\"Buffer mapping async isn't supported for the backend.\");\r\n                return false;\r\n            }\r\n            this.toggleBitset[TOGGLE.BUFFERMAPPINGASYNC] = true;\r\n        }\r\n        if (options.turn_off_vsync) {\r\n            if (!availableToggleBitset[TOGGLE.TURNOFFVSYNC]) {\r\n                console.error(\"Turn off vsync isn't supported for the backend.\");\r\n                return false;\r\n            }\r\n            this.toggleBitset[TOGGLE.TURNOFFVSYNC] = true;\r\n        }\r\n        if (options.test_time) {\r\n            this._testTime = options.test_time;\r\n            this.toggleBitset[TOGGLE.AUTOSTOP] = true;\r\n        }\r\n        if (options.disable_webgpu_validation) {\r\n            if (!availableToggleBitset[TOGGLE.DISABLEWEBGPUVALIDATION]) {\r\n                console.error(\"Disable validation for WebGPU backend.\");\r\n                return false;\r\n            }\r\n            this.toggleBitset[TOGGLE.DISABLEWEBGPUVALIDATION] = true;\r\n        }\r\n        if (options.enable_alpha_blending) {\r\n            this.g.alpha = options.enable_alpha_blending;\r\n            if (this.g.alpha === \"false\") {\r\n                this.toggleBitset[TOGGLE.ENABLEALPHABLENDING] = false;\r\n            }\r\n        }\r\n        if (options.simulating_fish_come_and_go) {\r\n            if (!availableToggleBitset[TOGGLE.SIMULATINGFISHCOMEANDGO]) {\r\n                console.error(\"Simulating fish come and go is only implemented for WebGPU backend.\");\r\n                return false;\r\n            }\r\n            this.toggleBitset[TOGGLE.SIMULATINGFISHCOMEANDGO] = true;\r\n        }\r\n        if (options.disable_control_panel) {\r\n            this.toggleBitset[TOGGLE.DISABLECONTROLPANEL] = true;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private _resetFpsTime(): void {\r\n        this.g.start = performance.now() / 1000.0;\r\n        this.g.then  = this.g.start\r\n    }\r\n\r\n    /**\r\n     * Main render loop.\r\n     */\r\n    public display(): void {\r\n        let shouldQuit: boolean = this._context.shouldQuit();\r\n        if (!shouldQuit) {\r\n            this._context.keyBoardQuit();\r\n            this._render();\r\n\r\n            this._context.doFlush(this.toggleBitset);\r\n\r\n            if (this.toggleBitset[TOGGLE.AUTOSTOP]\r\n                && (this.g.then - this.g.start) > this._testTime) {\r\n                shouldQuit = true\r\n            }\r\n        }\r\n\r\n        if (!shouldQuit) {\r\n            window.requestAnimationFrame(this.display.bind(this));\r\n        }\r\n        else {\r\n            this._context.terminate();\r\n\r\n            if (this.toggleBitset[TOGGLE.PRINTLOG]) {\r\n                this._printAvgFps();\r\n            }\r\n        }\r\n    }\r\n\r\n    private async loadResource(): Promise<void> {\r\n        return Promise.resolve().then(async () => {\r\n            await this._loadModels();\r\n            await this._loadPlacement();\r\n            if (this.toggleBitset[TOGGLE.SIMULATINGFISHCOMEANDGO]) {\r\n                await this._loadFishScenario();\r\n            }\r\n        });\r\n    }\r\n\r\n    private _setupModelEnumMap(): void {\r\n        for (let info of g_sceneInfo) {\r\n            this._modelEnumMap[info.namestr] = info.name;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Load world matrices of models from json file.\r\n     */\r\n    private async _loadPlacement(): Promise<void> {\r\n        const resourceHelper: ResourceHelper = this._context.resourceHelper;\r\n        const proppath: string = resourceHelper.propPlacementPath;\r\n\r\n        return new Promise((resolve, reject) => {\r\n            IO.LoadJSON(proppath, (json: any, exception: string) => {\r\n                if (exception) {\r\n                    console.error(\"Unable to load placement file: \" + exception);\r\n                    reject(exception);\r\n                }\r\n\r\n                ASSERT(\"objects\" in json, \"JSON file does not contain an 'objects' key.\");\r\n                let objects = json.objects;\r\n                ASSERT(Array.isArray(objects), \"'objects' value is not an array.\");\r\n\r\n                for (let i: size_t = 0; i < objects.length; ++i) {\r\n                    const name: any          = objects[i].name;\r\n                    const worldMatrix: any[] = objects[i].worldMatrix;\r\n                    ASSERT(Array.isArray(worldMatrix) && worldMatrix.length == 16, \"Invalid world matrix\");\r\n                \r\n                    let matrix: Array<float> = [];\r\n                    for (let j: size_t = 0; j < worldMatrix.length; ++j) {\r\n                        matrix.push(worldMatrix[j] as float);\r\n                    }\r\n\r\n                    const modelname: MODELNAME = this._modelEnumMap[name as string];\r\n                    // MODELFIRST means the model is not found in the Map\r\n                    if (modelname !== MODELNAME.MODELFIRST && this._aquariumModels[modelname]) {\r\n                        this._aquariumModels[modelname].worldmatrices.push(matrix);\r\n                    }\r\n                }\r\n                resolve();\r\n            });\r\n        });\r\n    }\r\n\r\n    private async _loadModels(): Promise<void> {\r\n        return Promise.resolve().then(async () => {\r\n            const enableInstanceddraw: boolean = this.toggleBitset[TOGGLE.ENABLEINSTANCEDDRAWS];\r\n            for (let info of g_sceneInfo) {\r\n                if ((enableInstanceddraw && info.type === MODELGROUP.FISH)\r\n                    || ((!enableInstanceddraw) && info.type === MODELGROUP.FISHINSTANCEDDRAW)) {\r\n                    continue;\r\n                }\r\n                await this._loadModel(info);\r\n            }\r\n        });\r\n    }\r\n\r\n    private async _loadFishScenario(): Promise<void> {\r\n        const resourceHelper: ResourceHelper = this._context.resourceHelper;\r\n        const fishBehaviorPath: string = resourceHelper.fishBehaviorPath;\r\n\r\n        return new Promise((resolve, reject) => {\r\n            IO.LoadJSON(fishBehaviorPath, (json: any, exception: string) => {\r\n                if (exception) {\r\n                    console.error(\"Unable to load fish scenario file: \" + exception);\r\n                    reject(exception);\r\n                }\r\n\r\n                ASSERT(\"behaviors\" in json, \"JSON file does not contain a 'behaviors' key.\");\r\n                let behaviors = json.behaviors;\r\n                ASSERT(Array.isArray(behaviors), \"'behaviors' value is not an array.\");\r\n\r\n                for (let i: size_t = 0; i < behaviors.length; ++i) {\r\n                    const frame: int = behaviors[i].frame as int;\r\n                    const op: string = behaviors[i].op as string;\r\n                    const count: int = behaviors[i].count as int;\r\n\r\n                    const behave: Behavior = new Behavior(frame, op, count);\r\n                    this._fishBehavior.push(behave);\r\n                }\r\n                resolve();\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Load vertex and index buffers, textures and program for each model.\r\n     * @param info the model\r\n     */\r\n    private async _loadModel(info: G_sceneInfo): Promise<void> {\r\n        const resourceHelper: ResourceHelper = this._context.resourceHelper;\r\n        const imagePath: string              = resourceHelper.imagePath;\r\n        const programPath: string            = resourceHelper.programPath\r\n        const modelPath: string              = resourceHelper.getModelPath(info.namestr);\r\n    \r\n        return new Promise(async (resolve, reject) => {\r\n            IO.LoadJSON(modelPath, async (json: any, exception: string) => {\r\n                if (exception) {\r\n                    console.error(\"Unable to load model file: \" + exception);\r\n                    reject(exception);\r\n                }\r\n\r\n                ASSERT(\"models\" in json, \"JSON file does not contain a 'models' key.\");\r\n                let models = json.models;\r\n                ASSERT(Array.isArray(models), \"'models' value is not an array.\");\r\n\r\n                let model: Nullable<Model> = null;\r\n                if (this.toggleBitset[TOGGLE.ENABLEALPHABLENDING] &&\r\n                    info.type !== MODELGROUP.INNER && info.type !== MODELGROUP.OUTSIDE) {\r\n                    model = this._context.createModel(this, info.type, info.name, true);\r\n                }\r\n                else {\r\n                    model = this._context.createModel(this, info.type, info.name, info.blend);\r\n                }\r\n                this._aquariumModels[info.name] = model;\r\n\r\n                let value = models[models.length - 1];\r\n                {\r\n                    // Set up textures\r\n                    const textures: any[] = value.textures;\r\n                    for (let textureName in textures) {\r\n                        const name: string  = textureName as string;\r\n                        const image: string = textures[textureName] as string;\r\n\r\n                        if (!(image in this._textureMap)) {\r\n                            this._textureMap[image] = await this._context.createTextureWebGPU(name, imagePath + image);\r\n                        }\r\n\r\n                        model.textureMap[name] = this._textureMap[image];\r\n                    }\r\n\r\n                    // Set up vertices\r\n                    const arrays: any[] = value.fields;\r\n                    for (let arrayName in arrays) {\r\n                        const texture: any        = arrays[arrayName];\r\n                        const name: string        = arrayName as string;\r\n                        const numComponents: int  = texture.numComponents as int;\r\n                        const type: string        = texture.type as string;\r\n                        let buffer: Nullable<Buffer> = null;\r\n                        if (name == \"indices\") {\r\n                            ASSERT(type === \"Uint16Array\", \"Invalid indices array type.\");\r\n                            let vec: Array<int> = [];\r\n                            for (let data of texture.data) {\r\n                                vec.push(data as int);\r\n                            }\r\n                            buffer = this._context.createBufferWebGPU(numComponents, new Uint16Array(vec), true);\r\n                        }\r\n                        else {\r\n                            ASSERT(type === \"Float32Array\", \"Invalid vertices array type.\");\r\n                            let vec: Array<float> = [];\r\n                            for (let data of texture.data) {\r\n                                vec.push(data as float);\r\n                            }\r\n                            buffer = this._context.createBufferWebGPU(numComponents, new Float32Array(vec), false);\r\n                        }\r\n\r\n                        model.bufferMap[name] = buffer;\r\n                    }\r\n\r\n                    // setup program\r\n                    // There are 3 programs\r\n                    // DM\r\n                    // DM+NM\r\n                    // DM+NM+RM\r\n                    let vsId: string = info.program[0];\r\n                    let fsId: string = info.program[1];\r\n\r\n                    if (vsId !== \"\" && fsId !== \"\") {\r\n                        model.textureMap[\"skybox\"] = this._textureMap[\"skybox\"];\r\n                    }\r\n                    else if (\"reflection\" in model.textureMap && model.textureMap[\"reflection\"] !== null) {\r\n                        vsId = \"reflectionMapVertexShader\";\r\n                        fsId = \"reflectionMapFragmentShader\";\r\n\r\n                        model.textureMap[\"skybox\"] = this._textureMap[\"skybox\"];\r\n                    }\r\n                    else if (\"normalMap\" in model.textureMap && model.textureMap[\"normalMap\"] !== null) {\r\n                        vsId = \"normalMapVertexShader\";\r\n                        fsId = \"normalMapFragmentShader\";\r\n                    }\r\n                    else {\r\n                        vsId = \"diffuseVertexShader\";\r\n                        fsId = \"diffuseFragmentShader\";\r\n                    }\r\n\r\n                    let program: Nullable<Program> = null;\r\n                    const programId: string = vsId + fsId;\r\n                    if (programId in this._programMap) {\r\n                        program = this._programMap[programId];\r\n                    }\r\n                    else {\r\n                        program = this._context.createProgram(programPath + vsId, programPath + fsId);\r\n                        if (this.toggleBitset[TOGGLE.ENABLEALPHABLENDING] &&\r\n                            info.type !== MODELGROUP.INNER && info.type !== MODELGROUP.OUTSIDE) {\r\n                            await program.compileProgram(true, this.g.alpha);\r\n                        }\r\n                        else {\r\n                            await program.compileProgram(false, this.g.alpha);\r\n                        }\r\n                        this._programMap[programId] = program;\r\n                    }\r\n\r\n                    model.program = program;\r\n                    model.init();\r\n                }\r\n                resolve();\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Calculate fish count for each type of fish\r\n     */\r\n    private _calculateFishCount(): void {\r\n        let numLeft: int = this._curFishCount;\r\n        for (let i: size_t = 0; i < FISHENUM.MAX; ++i) {\r\n            for (let j: size_t = 0; j < fishTable.length; ++j) {\r\n                const fishInfo: Fish = fishTable[j];\r\n                if (fishInfo.type != i) {\r\n                    continue;\r\n                }\r\n                let numfloat: int = numLeft;\r\n                if (i == FISHENUM.BIG) {\r\n                    let temp: int = this._curFishCount < g_numFishSmall ? 1 : 2;\r\n                    numfloat = Math.min(numLeft, temp);\r\n                }\r\n                else if (i === FISHENUM.MEDIUM) {\r\n                    if (this._curFishCount < g_numFishMedium) {\r\n                        numfloat = Math.min(numLeft, this._curFishCount / 10);\r\n                    }\r\n                    else if (this._curFishCount < g_numFishBig)  {\r\n                        numfloat = Math.min(numLeft, g_numFishLeftSmall);\r\n                    }\r\n                    else {\r\n                        numfloat = Math.min(numLeft, g_numFishLeftBig);\r\n                    }\r\n                }\r\n                numLeft                                                        = numLeft - numfloat;\r\n                this.fishCount[fishInfo.modelName - MODELNAME.MODELSMALLFISHA] = numfloat;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _getElapsedTime(): double {\r\n        // Update our time\r\n        const now: double = performance.now() / 1000.0; // now in seconds\r\n        let elapsedTime: double = 0.0;\r\n        if (this.g.then == 0.0) {\r\n            elapsedTime = 0.0;\r\n        }\r\n        else {\r\n            elapsedTime = now - this.g.then;\r\n        }\r\n        this.g.then = now;\r\n\r\n        return elapsedTime;\r\n    }\r\n\r\n    private _printAvgFps(): void {\r\n        const avg: int = this._fpsTimer.variance();\r\n\r\n        console.log(\"Avg FPS: \" + avg);\r\n        if (avg == 0) {\r\n            console.log(\"Invalid value. The fps is unstable.\");\r\n        }\r\n    }\r\n\r\n    private _updateGlobalUniforms(): void {\r\n        let g = this.g;\r\n        let lightWorldPositionUniform = this.lightWorldPositionUniform;\r\n\r\n        let elapsedTime: double   = this._getElapsedTime();\r\n        let renderingTime: double = g.then - g.start;\r\n\r\n        this._fpsTimer.update(elapsedTime, renderingTime, this._testTime);\r\n        g.mclock += elapsedTime * g_speed;\r\n        g.eyeClock += elapsedTime * g_eyeSpeed;\r\n\r\n        g.eyePosition[0] = Math.sin(g.eyeClock) * g_eyeRadius;\r\n        g.eyePosition[1] = g_eyeHeight;\r\n        g.eyePosition[2] = Math.cos(g.eyeClock) * g_eyeRadius;\r\n        g.target[0]      = Math.sin(g.eyeClock + Math.PI) * g_targetRadius;\r\n        g.target[1]      = g_targetHeight;\r\n        g.target[2]      = Math.cos(g.eyeClock + Math.PI) * g_targetRadius;\r\n\r\n        let nearPlane: float = 1.0;\r\n        let farPlane: float  = 25000.0;\r\n        let aspect: float    = (this._context.clientWidth * 1.0) / (this._context.clientHeight * 1.0);\r\n        let top: float       = Math.tan(Matrix.degToRad(g_fieldOfView * g_fovFudge) * 0.5) * nearPlane;\r\n        let bottom: float    = -top;\r\n        let left: float      = aspect * bottom;\r\n        let right: float     = aspect * top;\r\n        let width: float     = Math.abs(right - left);\r\n        let height: float    = Math.abs(top - bottom);\r\n        let xOff: float      = width * g_net_offset[0] * g_net_offsetMult;\r\n        let yOff: float      = height * g_net_offset[1] * g_net_offsetMult;\r\n\r\n        // set frustum and camera look at\r\n        Matrix.frustum(g.projection, left + xOff, right + xOff, bottom + yOff, top + yOff, nearPlane, farPlane);\r\n        Matrix.cameraLookAt(lightWorldPositionUniform.viewInverse, g.eyePosition, g.target, g.up);\r\n        Matrix.inverse4(g.view, lightWorldPositionUniform.viewInverse);\r\n        Matrix.mulMatrixMatrix4(lightWorldPositionUniform.viewProjection, g.view, g.projection);\r\n        Matrix.inverse4(g.viewProjectionInverse, lightWorldPositionUniform.viewProjection);\r\n\r\n        // memcpy(g.skyView, g.view, 16 * sizeof(float));\r\n        g.skyView[12] = 0.0;\r\n        g.skyView[13] = 0.0;\r\n        g.skyView[14] = 0.0;\r\n        Matrix.mulMatrixMatrix4(g.skyViewProjection, g.skyView, g.projection);\r\n        Matrix.inverse4(g.skyViewProjectionInverse, g.skyViewProjection);\r\n\r\n        Matrix.getAxis(g.v3t0, lightWorldPositionUniform.viewInverse, 0);\r\n        Matrix.getAxis(g.v3t1, lightWorldPositionUniform.viewInverse, 1);\r\n        Matrix.mulScalarVector(20.0, g.v3t0, 3);\r\n        Matrix.mulScalarVector(30.0, g.v3t1, 3);\r\n        Matrix.addVector(lightWorldPositionUniform.lightWorldPos, g.eyePosition, g.v3t0, 3);\r\n        Matrix.addVector(lightWorldPositionUniform.lightWorldPos, lightWorldPositionUniform.lightWorldPos, g.v3t1, 3);\r\n\r\n        // update world uniforms for WebGPU backend\r\n        this._context.updateWorldlUniforms(this);\r\n    }\r\n\r\n    private _render(): void {\r\n        Matrix.resetPseudoRandom();\r\n\r\n        this._context.preFrame();\r\n\r\n        // Global Uniforms should update after command reallocation.\r\n        this._updateGlobalUniforms();\r\n\r\n        if (this.toggleBitset[TOGGLE.SIMULATINGFISHCOMEANDGO]) {\r\n            if (this._fishBehavior.length > 0) {\r\n                const behave: Behavior = this._fishBehavior[0];\r\n                let frame:int          = behave.frame;\r\n                if (frame == 0) {\r\n                    this._fishBehavior.shift(); // pop front element\r\n                    if (behave.op === \"+\") {\r\n                        this._curFishCount += behave.count;\r\n                    }\r\n                    else {\r\n                        this._curFishCount -= behave.count;\r\n                    }\r\n                    console.log(\"Fish count \" + this._curFishCount);\r\n                }\r\n                else {\r\n                    behave.frame = --frame;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!this.toggleBitset[TOGGLE.ENABLEINSTANCEDDRAWS]) {\r\n            if (this.curFishCount != this.preFishCount) {\r\n                this._calculateFishCount();\r\n                const enableDynamicBufferOffset: boolean = this.toggleBitset[TOGGLE.ENABLEDYNAMICBUFFEROFFSET];\r\n                this._context.reallocResource(this.preFishCount, this.curFishCount, enableDynamicBufferOffset);\r\n                this._preFishCount = this.curFishCount;\r\n\r\n                this._resetFpsTime();\r\n            }\r\n        }\r\n\r\n        const updateAndDrawForEachFish: Boolean = this.toggleBitset[TOGGLE.UPATEANDDRAWFOREACHMODEL];\r\n\r\n        if (updateAndDrawForEachFish) {\r\n            this._updateAndDrawBackground();\r\n            this._updateAndDrawFishes();\r\n            this._context.updateFPS(this._fpsTimer, this.curFishCount, this.toggleBitset);\r\n        }\r\n        else {\r\n            this._updateBackground();\r\n            this._updateFishes();\r\n            this._context.updateFPS(this._fpsTimer, this.curFishCount, this.toggleBitset);\r\n\r\n            // Begin render pass\r\n            this._context.beginRenderPass();\r\n\r\n            this._drawBackground();\r\n            this._drawFishes();\r\n            this._context.showFPS();\r\n\r\n            // End renderpass\r\n        }\r\n    }\r\n\r\n    private _updateAndDrawBackground(): void {\r\n        for (let i: int = MODELNAME.MODELRUINCOlOMN; i <= MODELNAME.MODELSEAWEEDB; ++i) {\r\n            const model: Model = this._aquariumModels[i];\r\n            if (model) {\r\n                this._updateWorldMatrixAndDraw(model);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _drawBackground(): void {\r\n        for (let i: int = MODELNAME.MODELRUINCOlOMN; i <= MODELNAME.MODELSEAWEEDB; ++i) {\r\n            const model: Model = this._aquariumModels[i];\r\n            if (model) {\r\n                model.draw();\r\n            }\r\n        }\r\n    }\r\n\r\n    private _updateAndDrawFishes(): void {\r\n        const begin: int = this.toggleBitset[TOGGLE.ENABLEINSTANCEDDRAWS]\r\n                                    ? MODELNAME.MODELSMALLFISHAINSTANCEDDRAWS\r\n                                    : MODELNAME.MODELSMALLFISHA;\r\n        const end: int = this.toggleBitset[TOGGLE.ENABLEINSTANCEDDRAWS]\r\n                                    ? MODELNAME.MODELBIGFISHBINSTANCEDDRAWS\r\n                                    : MODELNAME.MODELBIGFISHB;\r\n\r\n        for (let i: int = begin; i <= end; ++i) {\r\n            const model: FishModel = this._aquariumModels[i] as FishModel;\r\n\r\n            if (!model) {\r\n                continue;\r\n            }\r\n\r\n            const fishInfo: Fish  = fishTable[i - begin];\r\n            const numFish: int    = this.fishCount[i - begin];\r\n\r\n            model.prepareForDraw();\r\n\r\n            const fishBaseClock: float   = this.g.mclock * g_fishSpeed;\r\n            const fishRadius: float      = fishInfo.radius;\r\n            const fishRadiusRange: float = fishInfo.radiusRange;\r\n            const fishSpeed: float       = fishInfo.speed;\r\n            const fishSpeedRange: float  = fishInfo.speedRange;\r\n            const fishTailSpeed: float   = fishInfo.tailSpeed * g_fishTailSpeed;\r\n            const fishOffset: float      = g_fishOffset;\r\n            // const fishClockSpeed: float  = g_fishSpeed;\r\n            const fishHeight: float      = g_fishHeight + fishInfo.heightOffset;\r\n            const fishHeightRange: float = g_fishHeightRange * fishInfo.heightRange;\r\n            const fishXClock: float      = g_fishXClock;\r\n            const fishYClock: float      = g_fishYClock;\r\n            const fishZClock: float      = g_fishZClock;\r\n\r\n            for (let ii: int = 0; ii < numFish; ++ii) {\r\n                const fishClock: float      = fishBaseClock + ii * fishOffset;\r\n                const speed: float          = fishSpeed + (Matrix.pseudoRandom() * 1.0) * fishSpeedRange;\r\n                const scale: float          = 1.0 + Matrix.pseudoRandom() * 1.0;\r\n                const xRadius: float        = fishRadius + (Matrix.pseudoRandom() * 1.0) * fishRadiusRange;\r\n                const yRadius: float        = 2.0 + (Matrix.pseudoRandom() * 1.0) * fishHeightRange;\r\n                const zRadius: float        = fishRadius + (Matrix.pseudoRandom() * 1.0) * fishRadiusRange;\r\n                const fishSpeedClock: float = fishClock * speed;\r\n                const xClock: float         = fishSpeedClock * fishXClock;\r\n                const yClock: float         = fishSpeedClock * fishYClock;\r\n                const zClock: float         = fishSpeedClock * fishZClock;\r\n\r\n                model.updateFishPerUniforms(\r\n                    Math.sin(xClock) * xRadius, Math.sin(yClock) * yRadius + fishHeight, Math.cos(zClock) * zRadius,\r\n                    Math.sin(xClock - 0.04) * xRadius, Math.sin(yClock - 0.01) * yRadius + fishHeight,\r\n                    Math.cos(zClock - 0.04) * zRadius, scale,\r\n                    (((this.g.mclock + ii * g_tailOffsetMult) * fishTailSpeed * speed) % (Math.PI * 2.0)),\r\n                    ii);\r\n\r\n                model.updatePerInstanceUniforms(this.worldUniforms);\r\n                model.draw();\r\n            }\r\n        }\r\n    }\r\n\r\n    private _updateBackground(): void {\r\n        for (let i: int = MODELNAME.MODELRUINCOlOMN; i <= MODELNAME.MODELSEAWEEDB; ++i) {\r\n            const model: Model = this._aquariumModels[i];\r\n            if (model) {\r\n                this._updateWorldMatrix(model);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _updateFishes(): void {\r\n        const begin: int = this.toggleBitset[TOGGLE.ENABLEINSTANCEDDRAWS]\r\n                                    ? MODELNAME.MODELSMALLFISHAINSTANCEDDRAWS\r\n                                    : MODELNAME.MODELSMALLFISHA;\r\n        const end: int = this.toggleBitset[TOGGLE.ENABLEINSTANCEDDRAWS]\r\n                                    ? MODELNAME.MODELBIGFISHBINSTANCEDDRAWS\r\n                                    : MODELNAME.MODELBIGFISHB;\r\n\r\n        for (let i: int = begin; i <= end; ++i) {\r\n            const model: FishModel = this._aquariumModels[i] as FishModel;\r\n\r\n            if (!model) {\r\n                continue;\r\n            }\r\n\r\n            const fishInfo: Fish = fishTable[i - begin];\r\n            const numFish: int   = this.fishCount[i - begin];\r\n\r\n            model.prepareForDraw();\r\n\r\n            const fishBaseClock: float   = this.g.mclock * g_fishSpeed;\r\n            const fishRadius: float      = fishInfo.radius;\r\n            const fishRadiusRange: float = fishInfo.radiusRange;\r\n            const fishSpeed: float       = fishInfo.speed;\r\n            const fishSpeedRange: float  = fishInfo.speedRange;\r\n            const fishTailSpeed: float   = fishInfo.tailSpeed * g_fishTailSpeed;\r\n            const fishOffset: float      = g_fishOffset;\r\n            // const fishClockSpeed: float  = g_fishSpeed;\r\n            const fishHeight: float      = g_fishHeight + fishInfo.heightOffset;\r\n            const fishHeightRange: float = g_fishHeightRange * fishInfo.heightRange;\r\n            const fishXClock: float      = g_fishXClock;\r\n            const fishYClock: float      = g_fishYClock;\r\n            const fishZClock: float      = g_fishZClock;\r\n\r\n            for (let ii: int = 0; ii < numFish; ++ii) {\r\n                const fishClock: float      = fishBaseClock + ii * fishOffset;\r\n                const speed: float          = fishSpeed + (Matrix.pseudoRandom() * 1.0) * fishSpeedRange;\r\n                const scale: float          = 1.0 + Matrix.pseudoRandom() * 1.0;\r\n                const xRadius: float        = fishRadius + (Matrix.pseudoRandom() * 1.0) * fishRadiusRange;\r\n                const yRadius: float        = 2.0 + (Matrix.pseudoRandom() * 1.0) * fishHeightRange;\r\n                const zRadius: float        = fishRadius + (Matrix.pseudoRandom() * 1.0) * fishRadiusRange;\r\n                const fishSpeedClock: float = fishClock * speed;\r\n                const xClock: float         = fishSpeedClock * fishXClock;\r\n                const yClock: float         = fishSpeedClock * fishYClock;\r\n                const zClock: float         = fishSpeedClock * fishZClock;\r\n\r\n                model.updateFishPerUniforms(\r\n                    Math.sin(xClock) * xRadius, Math.sin(yClock) * yRadius + fishHeight, Math.cos(zClock) * zRadius,\r\n                    Math.sin(xClock - 0.04) * xRadius, Math.sin(yClock - 0.01) * yRadius + fishHeight,\r\n                    Math.cos(zClock - 0.04) * zRadius, scale,\r\n                    (((this.g.mclock + ii * g_tailOffsetMult) * fishTailSpeed * speed) % (Math.PI * 2.0)),\r\n                    ii);\r\n            }\r\n        }\r\n\r\n        this._context.updateAllFishData();\r\n    }\r\n\r\n    private _drawFishes(): void {\r\n        const begin = this.toggleBitset[TOGGLE.ENABLEINSTANCEDDRAWS]\r\n                                ? MODELNAME.MODELSMALLFISHAINSTANCEDDRAWS\r\n                                : MODELNAME.MODELSMALLFISHA;\r\n        const end = this.toggleBitset[TOGGLE.ENABLEINSTANCEDDRAWS]\r\n                                ? MODELNAME.MODELBIGFISHBINSTANCEDDRAWS\r\n                                : MODELNAME.MODELBIGFISHB;\r\n\r\n        for (let i: int = begin; i <= end; ++i) {\r\n            const model: FishModel = this._aquariumModels[i] as FishModel;\r\n            if (model) {\r\n                model.draw();\r\n            }            \r\n        }\r\n    }\r\n\r\n    private _updateWorldProjections(w: FloatArray) {\r\n        ASSERT(w.length === 16, \"The length of the array should be equal to 16.\");\r\n        for (let i: uint32_t = 0; i < 16; ++i) {\r\n            this.worldUniforms.world[i] = w[i];\r\n        }\r\n        Matrix.mulMatrixMatrix4(this.worldUniforms.worldViewProjection, this.worldUniforms.world,\r\n                                this.lightWorldPositionUniform.viewProjection);\r\n        Matrix.inverse4(this.g.worldInverse, this.worldUniforms.world);\r\n        Matrix.transpose4(this.worldUniforms.worldInverseTranspose, this.g.worldInverse);\r\n    }\r\n\r\n    private _updateWorldMatrixAndDraw(model: Nullable<Model>): void {\r\n        if (model.worldmatrices.length > 0) {\r\n            for (let world of model.worldmatrices) {\r\n                this._updateWorldProjections(world);\r\n                model.prepareForDraw();\r\n                model.updatePerInstanceUniforms(this.worldUniforms);\r\n                model.draw();\r\n            }\r\n        }\r\n    }\r\n\r\n    private _updateWorldMatrix(model: Nullable<Model>): void {\r\n        if (model.worldmatrices.length > 0) {\r\n            for (let world of model.worldmatrices) {\r\n                this._updateWorldProjections(world);\r\n                model.updatePerInstanceUniforms(this.worldUniforms);\r\n            }\r\n        }\r\n\r\n        model.prepareForDraw();\r\n    }\r\n\r\n}","import { Aquarium, AquariumOptions } from \"./aquarium\";\r\n\r\nasync function runWebGPUAquarium() {\r\n    const canvas = document.getElementById('gfx') as HTMLCanvasElement;\r\n    const aquarium: Aquarium = new Aquarium();\r\n    const options: AquariumOptions = {\r\n        canvas: canvas,\r\n        enable_full_screen_mode: true,\r\n        num_fish: 100,\r\n    }\r\n    aquarium.init(options)\r\n        .then((success: boolean) => {\r\n            if (success) {\r\n                aquarium.display();\r\n            }\r\n            else {\r\n                console.error('Unable to initialize aquarium!');\r\n            }\r\n        }) \r\n        .catch((error) => {\r\n            console.error(error); \r\n        });\r\n}\r\n\r\nrunWebGPUAquarium();"],"sourceRoot":""}